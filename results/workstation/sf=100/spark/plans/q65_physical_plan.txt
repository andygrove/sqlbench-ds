AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#717 ASC NULLS FIRST,i_item_desc#672 ASC NULLS FIRST], output=[s_store_name#717,i_item_desc#672,revenue#12981,i_current_price#673,i_wholesale_cost#674,i_brand#676])
   +- *(23) Project [s_store_name#717, i_item_desc#672, revenue#12981, i_current_price#673, i_wholesale_cost#674, i_brand#676]
      +- *(23) SortMergeJoin [ss_store_sk#12989], [ss_store_sk#259], Inner, (cast(revenue#12981 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#12980)), DecimalType(23,7), true))
         :- *(21) Sort [ss_store_sk#12989 ASC NULLS FIRST], false, 0
         :  +- AQEShuffleRead coalesced
         :     +- ShuffleQueryStage 12
         :        +- Exchange hashpartitioning(ss_store_sk#12989, 200), ENSURE_REQUIREMENTS, [id=#135569]
         :           +- *(20) Project [s_store_name#717, ss_store_sk#12989, revenue#12981, i_item_desc#672, i_current_price#673, i_wholesale_cost#674, i_brand#676]
         :              +- *(20) SortMergeJoin [ss_item_sk#12984], [i_item_sk#668], Inner
         :                 :- *(18) Sort [ss_item_sk#12984 ASC NULLS FIRST], false, 0
         :                 :  +- AQEShuffleRead coalesced
         :                 :     +- ShuffleQueryStage 11
         :                 :        +- Exchange hashpartitioning(ss_item_sk#12984, 200), ENSURE_REQUIREMENTS, [id=#135450]
         :                 :           +- *(17) Project [s_store_name#717, ss_store_sk#12989, ss_item_sk#12984, revenue#12981]
         :                 :              +- *(17) SortMergeJoin [s_store_sk#712], [ss_store_sk#12989], Inner
         :                 :                 :- *(15) Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
         :                 :                 :  +- AQEShuffleRead coalesced
         :                 :                 :     +- ShuffleQueryStage 0
         :                 :                 :        +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#134234]
         :                 :                 :           +- *(1) Filter isnotnull(s_store_sk#712)
         :                 :                 :              +- *(1) ColumnarToRow
         :                 :                 :                 +- FileScan parquet [s_store_sk#712,s_store_name#717] Batched: true, DataFilters: [isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string>
         :                 :                 +- *(16) Sort [ss_store_sk#12989 ASC NULLS FIRST], false, 0
         :                 :                    +- AQEShuffleRead coalesced
         :                 :                       +- ShuffleQueryStage 9
         :                 :                          +- Exchange hashpartitioning(ss_store_sk#12989, 200), ENSURE_REQUIREMENTS, [id=#135262]
         :                 :                             +- *(13) Filter isnotnull(revenue#12981)
         :                 :                                +- *(13) HashAggregate(keys=[ss_store_sk#12989, ss_item_sk#12984], functions=[sum(UnscaledValue(ss_sales_price#12995))], output=[ss_store_sk#12989, ss_item_sk#12984, revenue#12981])
         :                 :                                   +- AQEShuffleRead coalesced
         :                 :                                      +- ShuffleQueryStage 7
         :                 :                                         +- Exchange hashpartitioning(ss_store_sk#12989, ss_item_sk#12984, 200), ENSURE_REQUIREMENTS, [id=#135003]
         :                 :                                            +- *(9) HashAggregate(keys=[ss_store_sk#12989, ss_item_sk#12984], functions=[partial_sum(UnscaledValue(ss_sales_price#12995))], output=[ss_store_sk#12989, ss_item_sk#12984, sum#13043L])
         :                 :                                               +- *(9) Project [ss_item_sk#12984, ss_store_sk#12989, ss_sales_price#12995]
         :                 :                                                  +- *(9) SortMergeJoin [ss_sold_date_sk#12982], [d_date_sk#13005], Inner
         :                 :                                                     :- *(7) Sort [ss_sold_date_sk#12982 ASC NULLS FIRST], false, 0
         :                 :                                                     :  +- AQEShuffleRead coalesced
         :                 :                                                     :     +- ShuffleQueryStage 1
         :                 :                                                     :        +- Exchange hashpartitioning(ss_sold_date_sk#12982, 200), ENSURE_REQUIREMENTS, [id=#134251]
         :                 :                                                     :           +- *(2) Filter ((isnotnull(ss_sold_date_sk#12982) AND isnotnull(ss_store_sk#12989)) AND isnotnull(ss_item_sk#12984))
         :                 :                                                     :              +- *(2) ColumnarToRow
         :                 :                                                     :                 +- FileScan parquet [ss_sold_date_sk#12982,ss_item_sk#12984,ss_store_sk#12989,ss_sales_price#12995] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#12982), isnotnull(ss_store_sk#12989), isnotnull(ss_item_sk#12984)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :                 :                                                     +- *(8) Sort [d_date_sk#13005 ASC NULLS FIRST], false, 0
         :                 :                                                        +- AQEShuffleRead coalesced
         :                 :                                                           +- ShuffleQueryStage 2
         :                 :                                                              +- Exchange hashpartitioning(d_date_sk#13005, 200), ENSURE_REQUIREMENTS, [id=#134270]
         :                 :                                                                 +- *(3) Project [d_date_sk#13005]
         :                 :                                                                    +- *(3) Filter (((isnotnull(d_month_seq#13008) AND (d_month_seq#13008 >= 1212)) AND (d_month_seq#13008 <= 1223)) AND isnotnull(d_date_sk#13005))
         :                 :                                                                       +- *(3) ColumnarToRow
         :                 :                                                                          +- FileScan parquet [d_date_sk#13005,d_month_seq#13008] Batched: true, DataFilters: [isnotnull(d_month_seq#13008), (d_month_seq#13008 >= 1212), (d_month_seq#13008 <= 1223), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
         :                 +- *(19) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
         :                    +- AQEShuffleRead coalesced
         :                       +- ShuffleQueryStage 3
         :                          +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#134301]
         :                             +- *(4) Filter isnotnull(i_item_sk#668)
         :                                +- *(4) ColumnarToRow
         :                                   +- FileScan parquet [i_item_sk#668,i_item_desc#672,i_current_price#673,i_wholesale_cost#674,i_brand#676] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2...
         +- *(22) Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
            +- *(22) HashAggregate(keys=[ss_store_sk#259], functions=[avg(revenue#12979)], output=[ss_store_sk#259, ave#12980])
               +- AQEShuffleRead coalesced
                  +- ShuffleQueryStage 10
                     +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#135369]
                        +- *(14) HashAggregate(keys=[ss_store_sk#259], functions=[partial_avg(revenue#12979)], output=[ss_store_sk#259, sum#13046, count#13047L])
                           +- *(14) HashAggregate(keys=[ss_store_sk#259, ss_item_sk#254], functions=[sum(UnscaledValue(ss_sales_price#265))], output=[ss_store_sk#259, revenue#12979])
                              +- AQEShuffleRead coalesced
                                 +- ShuffleQueryStage 8
                                    +- Exchange hashpartitioning(ss_store_sk#259, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#135165]
                                       +- *(12) HashAggregate(keys=[ss_store_sk#259, ss_item_sk#254], functions=[partial_sum(UnscaledValue(ss_sales_price#265))], output=[ss_store_sk#259, ss_item_sk#254, sum#13049L])
                                          +- *(12) Project [ss_item_sk#254, ss_store_sk#259, ss_sales_price#265]
                                             +- *(12) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                                                :- *(10) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                                                :  +- AQEShuffleRead coalesced
                                                :     +- ShuffleQueryStage 4
                                                :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#134352]
                                                :           +- *(5) Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                                                :              +- *(5) ColumnarToRow
                                                :                 +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                                                +- *(11) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                                                   +- AQEShuffleRead coalesced
                                                      +- ShuffleQueryStage 6
                                                         +- ReusedExchange [d_date_sk#612], Exchange hashpartitioning(d_date_sk#13005, 200), ENSURE_REQUIREMENTS, [id=#134270]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#717 ASC NULLS FIRST,i_item_desc#672 ASC NULLS FIRST], output=[s_store_name#717,i_item_desc#672,revenue#12981,i_current_price#673,i_wholesale_cost#674,i_brand#676])
   +- Project [s_store_name#717, i_item_desc#672, revenue#12981, i_current_price#673, i_wholesale_cost#674, i_brand#676]
      +- SortMergeJoin [ss_store_sk#12989], [ss_store_sk#259], Inner, (cast(revenue#12981 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#12980)), DecimalType(23,7), true))
         :- Sort [ss_store_sk#12989 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(ss_store_sk#12989, 200), ENSURE_REQUIREMENTS, [id=#134161]
         :     +- Project [s_store_name#717, ss_store_sk#12989, revenue#12981, i_item_desc#672, i_current_price#673, i_wholesale_cost#674, i_brand#676]
         :        +- SortMergeJoin [ss_item_sk#12984], [i_item_sk#668], Inner
         :           :- Sort [ss_item_sk#12984 ASC NULLS FIRST], false, 0
         :           :  +- Exchange hashpartitioning(ss_item_sk#12984, 200), ENSURE_REQUIREMENTS, [id=#134138]
         :           :     +- Project [s_store_name#717, ss_store_sk#12989, ss_item_sk#12984, revenue#12981]
         :           :        +- SortMergeJoin [s_store_sk#712], [ss_store_sk#12989], Inner
         :           :           :- Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
         :           :           :  +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#134130]
         :           :           :     +- Filter isnotnull(s_store_sk#712)
         :           :           :        +- FileScan parquet [s_store_sk#712,s_store_name#717] Batched: true, DataFilters: [isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string>
         :           :           +- Sort [ss_store_sk#12989 ASC NULLS FIRST], false, 0
         :           :              +- Exchange hashpartitioning(ss_store_sk#12989, 200), ENSURE_REQUIREMENTS, [id=#134131]
         :           :                 +- Filter isnotnull(revenue#12981)
         :           :                    +- HashAggregate(keys=[ss_store_sk#12989, ss_item_sk#12984], functions=[sum(UnscaledValue(ss_sales_price#12995))], output=[ss_store_sk#12989, ss_item_sk#12984, revenue#12981])
         :           :                       +- Exchange hashpartitioning(ss_store_sk#12989, ss_item_sk#12984, 200), ENSURE_REQUIREMENTS, [id=#134125]
         :           :                          +- HashAggregate(keys=[ss_store_sk#12989, ss_item_sk#12984], functions=[partial_sum(UnscaledValue(ss_sales_price#12995))], output=[ss_store_sk#12989, ss_item_sk#12984, sum#13043L])
         :           :                             +- Project [ss_item_sk#12984, ss_store_sk#12989, ss_sales_price#12995]
         :           :                                +- SortMergeJoin [ss_sold_date_sk#12982], [d_date_sk#13005], Inner
         :           :                                   :- Sort [ss_sold_date_sk#12982 ASC NULLS FIRST], false, 0
         :           :                                   :  +- Exchange hashpartitioning(ss_sold_date_sk#12982, 200), ENSURE_REQUIREMENTS, [id=#134117]
         :           :                                   :     +- Filter ((isnotnull(ss_sold_date_sk#12982) AND isnotnull(ss_store_sk#12989)) AND isnotnull(ss_item_sk#12984))
         :           :                                   :        +- FileScan parquet [ss_sold_date_sk#12982,ss_item_sk#12984,ss_store_sk#12989,ss_sales_price#12995] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#12982), isnotnull(ss_store_sk#12989), isnotnull(ss_item_sk#12984)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :           :                                   +- Sort [d_date_sk#13005 ASC NULLS FIRST], false, 0
         :           :                                      +- Exchange hashpartitioning(d_date_sk#13005, 200), ENSURE_REQUIREMENTS, [id=#134118]
         :           :                                         +- Project [d_date_sk#13005]
         :           :                                            +- Filter (((isnotnull(d_month_seq#13008) AND (d_month_seq#13008 >= 1212)) AND (d_month_seq#13008 <= 1223)) AND isnotnull(d_date_sk#13005))
         :           :                                               +- FileScan parquet [d_date_sk#13005,d_month_seq#13008] Batched: true, DataFilters: [isnotnull(d_month_seq#13008), (d_month_seq#13008 >= 1212), (d_month_seq#13008 <= 1223), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
         :           +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
         :              +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#134139]
         :                 +- Filter isnotnull(i_item_sk#668)
         :                    +- FileScan parquet [i_item_sk#668,i_item_desc#672,i_current_price#673,i_wholesale_cost#674,i_brand#676] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2...
         +- Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
            +- HashAggregate(keys=[ss_store_sk#259], functions=[avg(revenue#12979)], output=[ss_store_sk#259, ave#12980])
               +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#134157]
                  +- HashAggregate(keys=[ss_store_sk#259], functions=[partial_avg(revenue#12979)], output=[ss_store_sk#259, sum#13046, count#13047L])
                     +- HashAggregate(keys=[ss_store_sk#259, ss_item_sk#254], functions=[sum(UnscaledValue(ss_sales_price#265))], output=[ss_store_sk#259, revenue#12979])
                        +- Exchange hashpartitioning(ss_store_sk#259, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#134153]
                           +- HashAggregate(keys=[ss_store_sk#259, ss_item_sk#254], functions=[partial_sum(UnscaledValue(ss_sales_price#265))], output=[ss_store_sk#259, ss_item_sk#254, sum#13049L])
                              +- Project [ss_item_sk#254, ss_store_sk#259, ss_sales_price#265]
                                 +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                                    :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                                    :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#134145]
                                    :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                                    :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                                    +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                                       +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#134146]
                                          +- Project [d_date_sk#612]
                                             +- Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1212)) AND (d_month_seq#615 <= 1223)) AND isnotnull(d_date_sk#612))
                                                +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1212), (d_month_seq#615 <= 1223), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
