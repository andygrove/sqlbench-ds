AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#401 ASC NULLS FIRST], output=[c_customer_id#401])
   +- *(22) Project [c_customer_id#401]
      +- *(22) SortMergeJoin [ctr_customer_sk#851], [c_customer_sk#400], Inner
         :- *(20) Sort [ctr_customer_sk#851 ASC NULLS FIRST], false, 0
         :  +- AQEShuffleRead coalesced
         :     +- ShuffleQueryStage 11
         :        +- Exchange hashpartitioning(ctr_customer_sk#851, 200), ENSURE_REQUIREMENTS, [id=#1489]
         :           +- *(19) Project [ctr_customer_sk#851]
         :              +- *(19) SortMergeJoin [ctr_store_sk#852], [s_store_sk#712], Inner
         :                 :- *(17) Project [ctr_customer_sk#851, ctr_store_sk#852]
         :                 :  +- *(17) SortMergeJoin [ctr_store_sk#852], [ctr_store_sk#852#858], Inner, (cast(ctr_total_return#853 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#856)
         :                 :     :- *(15) Sort [ctr_store_sk#852 ASC NULLS FIRST], false, 0
         :                 :     :  +- AQEShuffleRead coalesced
         :                 :     :     +- ShuffleQueryStage 9
         :                 :     :        +- Exchange hashpartitioning(ctr_store_sk#852, 200), ENSURE_REQUIREMENTS, [id=#1222]
         :                 :     :           +- *(13) Filter isnotnull(ctr_total_return#853)
         :                 :     :              +- *(13) HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[sum(UnscaledValue(SR_FEE#150))], output=[ctr_customer_sk#851, ctr_store_sk#852, ctr_total_return#853])
         :                 :     :                 +- AQEShuffleRead coalesced
         :                 :     :                    +- ShuffleQueryStage 7
         :                 :     :                       +- Exchange hashpartitioning(sr_customer_sk#139, sr_store_sk#143, 200), ENSURE_REQUIREMENTS, [id=#788]
         :                 :     :                          +- *(9) HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[partial_sum(UnscaledValue(SR_FEE#150))], output=[sr_customer_sk#139, sr_store_sk#143, sum#860L])
         :                 :     :                             +- *(9) Project [sr_customer_sk#139, sr_store_sk#143, sr_fee#150]
         :                 :     :                                +- *(9) SortMergeJoin [sr_returned_date_sk#136], [d_date_sk#612], Inner
         :                 :     :                                   :- *(7) Sort [sr_returned_date_sk#136 ASC NULLS FIRST], false, 0
         :                 :     :                                   :  +- AQEShuffleRead coalesced
         :                 :     :                                   :     +- ShuffleQueryStage 0
         :                 :     :                                   :        +- Exchange hashpartitioning(sr_returned_date_sk#136, 200), ENSURE_REQUIREMENTS, [id=#355]
         :                 :     :                                   :           +- *(1) Filter ((isnotnull(sr_returned_date_sk#136) AND isnotnull(sr_store_sk#143)) AND isnotnull(sr_customer_sk#139))
         :                 :     :                                   :              +- *(1) ColumnarToRow
         :                 :     :                                   :                 +- FileScan parquet [sr_returned_date_sk#136,sr_customer_sk#139,sr_store_sk#143,sr_fee#150] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#136), isnotnull(sr_store_sk#143), isnotnull(sr_customer_sk#139)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>
         :                 :     :                                   +- *(8) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :                 :     :                                      +- AQEShuffleRead coalesced
         :                 :     :                                         +- ShuffleQueryStage 1
         :                 :     :                                            +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#374]
         :                 :     :                                               +- *(2) Project [d_date_sk#612]
         :                 :     :                                                  +- *(2) Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
         :                 :     :                                                     +- *(2) ColumnarToRow
         :                 :     :                                                        +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :                 :     +- *(16) Sort [ctr_store_sk#852#858 ASC NULLS FIRST], false, 0
         :                 :        +- *(16) Filter isnotnull((avg(ctr_total_return) * 1.2)#856)
         :                 :           +- *(16) HashAggregate(keys=[ctr_store_sk#852], functions=[avg(ctr_total_return#853)], output=[(avg(ctr_total_return) * 1.2)#856, ctr_store_sk#852#858])
         :                 :              +- AQEShuffleRead coalesced
         :                 :                 +- ShuffleQueryStage 10
         :                 :                    +- Exchange hashpartitioning(ctr_store_sk#852, 200), ENSURE_REQUIREMENTS, [id=#1320]
         :                 :                       +- *(14) HashAggregate(keys=[ctr_store_sk#852], functions=[partial_avg(ctr_total_return#853)], output=[ctr_store_sk#852, sum#863, count#864L])
         :                 :                          +- *(14) HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[sum(UnscaledValue(SR_FEE#150))], output=[ctr_store_sk#852, ctr_total_return#853])
         :                 :                             +- AQEShuffleRead coalesced
         :                 :                                +- ShuffleQueryStage 8
         :                 :                                   +- Exchange hashpartitioning(sr_customer_sk#139, sr_store_sk#143, 200), ENSURE_REQUIREMENTS, [id=#1032]
         :                 :                                      +- *(12) HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[partial_sum(UnscaledValue(SR_FEE#150))], output=[sr_customer_sk#139, sr_store_sk#143, sum#866L])
         :                 :                                         +- *(12) Project [sr_customer_sk#139, sr_store_sk#143, sr_fee#150]
         :                 :                                            +- *(12) SortMergeJoin [sr_returned_date_sk#136], [d_date_sk#612], Inner
         :                 :                                               :- *(10) Sort [sr_returned_date_sk#136 ASC NULLS FIRST], false, 0
         :                 :                                               :  +- AQEShuffleRead coalesced
         :                 :                                               :     +- ShuffleQueryStage 2
         :                 :                                               :        +- Exchange hashpartitioning(sr_returned_date_sk#136, 200), ENSURE_REQUIREMENTS, [id=#401]
         :                 :                                               :           +- *(3) Filter (isnotnull(sr_returned_date_sk#136) AND isnotnull(sr_store_sk#143))
         :                 :                                               :              +- *(3) ColumnarToRow
         :                 :                                               :                 +- FileScan parquet [sr_returned_date_sk#136,sr_customer_sk#139,sr_store_sk#143,sr_fee#150] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#136), isnotnull(sr_store_sk#143)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>
         :                 :                                               +- *(11) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :                 :                                                  +- AQEShuffleRead coalesced
         :                 :                                                     +- ShuffleQueryStage 4
         :                 :                                                        +- ReusedExchange [d_date_sk#612], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#374]
         :                 +- *(18) Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
         :                    +- AQEShuffleRead coalesced
         :                       +- ShuffleQueryStage 5
         :                          +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#455]
         :                             +- *(5) Project [s_store_sk#712]
         :                                +- *(5) Filter ((isnotnull(s_state#736) AND (s_state#736 = SD)) AND isnotnull(s_store_sk#712))
         :                                   +- *(5) ColumnarToRow
         :                                      +- FileScan parquet [s_store_sk#712,s_state#736] Batched: true, DataFilters: [isnotnull(s_state#736), (s_state#736 = SD), isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,SD), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
         +- *(21) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
            +- AQEShuffleRead coalesced
               +- ShuffleQueryStage 6
                  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#483]
                     +- *(6) Filter isnotnull(c_customer_sk#400)
                        +- *(6) ColumnarToRow
                           +- FileScan parquet [c_customer_sk#400,c_customer_id#401] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#401 ASC NULLS FIRST], output=[c_customer_id#401])
   +- Project [c_customer_id#401]
      +- SortMergeJoin [ctr_customer_sk#851], [c_customer_sk#400], Inner
         :- Sort [ctr_customer_sk#851 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(ctr_customer_sk#851, 200), ENSURE_REQUIREMENTS, [id=#254]
         :     +- Project [ctr_customer_sk#851]
         :        +- SortMergeJoin [ctr_store_sk#852], [s_store_sk#712], Inner
         :           :- Project [ctr_customer_sk#851, ctr_store_sk#852]
         :           :  +- SortMergeJoin [ctr_store_sk#852], [ctr_store_sk#852#858], Inner, (cast(ctr_total_return#853 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#856)
         :           :     :- Sort [ctr_store_sk#852 ASC NULLS FIRST], false, 0
         :           :     :  +- Exchange hashpartitioning(ctr_store_sk#852, 200), ENSURE_REQUIREMENTS, [id=#241]
         :           :     :     +- Filter isnotnull(ctr_total_return#853)
         :           :     :        +- HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[sum(UnscaledValue(SR_FEE#150))], output=[ctr_customer_sk#851, ctr_store_sk#852, ctr_total_return#853])
         :           :     :           +- Exchange hashpartitioning(sr_customer_sk#139, sr_store_sk#143, 200), ENSURE_REQUIREMENTS, [id=#220]
         :           :     :              +- HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[partial_sum(UnscaledValue(SR_FEE#150))], output=[sr_customer_sk#139, sr_store_sk#143, sum#860L])
         :           :     :                 +- Project [sr_customer_sk#139, sr_store_sk#143, sr_fee#150]
         :           :     :                    +- SortMergeJoin [sr_returned_date_sk#136], [d_date_sk#612], Inner
         :           :     :                       :- Sort [sr_returned_date_sk#136 ASC NULLS FIRST], false, 0
         :           :     :                       :  +- Exchange hashpartitioning(sr_returned_date_sk#136, 200), ENSURE_REQUIREMENTS, [id=#212]
         :           :     :                       :     +- Filter ((isnotnull(sr_returned_date_sk#136) AND isnotnull(sr_store_sk#143)) AND isnotnull(sr_customer_sk#139))
         :           :     :                       :        +- FileScan parquet [sr_returned_date_sk#136,sr_customer_sk#139,sr_store_sk#143,sr_fee#150] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#136), isnotnull(sr_store_sk#143), isnotnull(sr_customer_sk#139)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>
         :           :     :                       +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :           :     :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#213]
         :           :     :                             +- Project [d_date_sk#612]
         :           :     :                                +- Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
         :           :     :                                   +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :           :     +- Sort [ctr_store_sk#852#858 ASC NULLS FIRST], false, 0
         :           :        +- Filter isnotnull((avg(ctr_total_return) * 1.2)#856)
         :           :           +- HashAggregate(keys=[ctr_store_sk#852], functions=[avg(ctr_total_return#853)], output=[(avg(ctr_total_return) * 1.2)#856, ctr_store_sk#852#858])
         :           :              +- Exchange hashpartitioning(ctr_store_sk#852, 200), ENSURE_REQUIREMENTS, [id=#236]
         :           :                 +- HashAggregate(keys=[ctr_store_sk#852], functions=[partial_avg(ctr_total_return#853)], output=[ctr_store_sk#852, sum#863, count#864L])
         :           :                    +- HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[sum(UnscaledValue(SR_FEE#150))], output=[ctr_store_sk#852, ctr_total_return#853])
         :           :                       +- Exchange hashpartitioning(sr_customer_sk#139, sr_store_sk#143, 200), ENSURE_REQUIREMENTS, [id=#232]
         :           :                          +- HashAggregate(keys=[sr_customer_sk#139, sr_store_sk#143], functions=[partial_sum(UnscaledValue(SR_FEE#150))], output=[sr_customer_sk#139, sr_store_sk#143, sum#866L])
         :           :                             +- Project [sr_customer_sk#139, sr_store_sk#143, sr_fee#150]
         :           :                                +- SortMergeJoin [sr_returned_date_sk#136], [d_date_sk#612], Inner
         :           :                                   :- Sort [sr_returned_date_sk#136 ASC NULLS FIRST], false, 0
         :           :                                   :  +- Exchange hashpartitioning(sr_returned_date_sk#136, 200), ENSURE_REQUIREMENTS, [id=#224]
         :           :                                   :     +- Filter (isnotnull(sr_returned_date_sk#136) AND isnotnull(sr_store_sk#143))
         :           :                                   :        +- FileScan parquet [sr_returned_date_sk#136,sr_customer_sk#139,sr_store_sk#143,sr_fee#150] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#136), isnotnull(sr_store_sk#143)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>
         :           :                                   +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :           :                                      +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#225]
         :           :                                         +- Project [d_date_sk#612]
         :           :                                            +- Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
         :           :                                               +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :           +- Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
         :              +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#248]
         :                 +- Project [s_store_sk#712]
         :                    +- Filter ((isnotnull(s_state#736) AND (s_state#736 = SD)) AND isnotnull(s_store_sk#712))
         :                       +- FileScan parquet [s_store_sk#712,s_state#736] Batched: true, DataFilters: [isnotnull(s_state#736), (s_state#736 = SD), isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,SD), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
         +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#255]
               +- Filter isnotnull(c_customer_sk#400)
                  +- FileScan parquet [c_customer_sk#400,c_customer_id#401] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>
