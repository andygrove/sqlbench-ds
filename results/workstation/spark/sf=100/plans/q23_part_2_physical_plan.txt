AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_last_name#7645 ASC NULLS FIRST,c_first_name#7644 ASC NULLS FIRST,sales#7530 ASC NULLS FIRST], output=[c_last_name#7645,c_first_name#7644,sales#7530])
   +- Union
      :- *(65) HashAggregate(keys=[c_last_name#7645, c_first_name#7644], functions=[sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#562 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#564 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7645, c_first_name#7644, sales#7530])
      :  +- AQEShuffleRead coalesced
      :     +- ShuffleQueryStage 38
      :        +- Exchange hashpartitioning(c_last_name#7645, c_first_name#7644, 200), ENSURE_REQUIREMENTS, [id=#99334]
      :           +- *(61) HashAggregate(keys=[c_last_name#7645, c_first_name#7644], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#562 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#564 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7645, c_first_name#7644, sum#7748, isEmpty#7749])
      :              +- *(61) Project [cs_quantity#562, cs_list_price#564, c_first_name#7644, c_last_name#7645]
      :                 +- *(61) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#7654], Inner
      :                    :- *(59) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
      :                    :  +- AQEShuffleRead coalesced
      :                    :     +- ShuffleQueryStage 36
      :                    :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#98423]
      :                    :           +- *(47) Project [cs_sold_date_sk#544, cs_quantity#562, cs_list_price#564, c_first_name#7644, c_last_name#7645]
      :                    :              +- *(47) SortMergeJoin [cs_bill_customer_sk#547], [c_customer_sk#7636], Inner
      :                    :                 :- *(41) SortMergeJoin [cs_bill_customer_sk#547], [c_customer_sk#7618], LeftSemi
      :                    :                 :  :- *(37) Sort [cs_bill_customer_sk#547 ASC NULLS FIRST], false, 0
      :                    :                 :  :  +- ShuffleQueryStage 34
      :                    :                 :  :     +- Exchange hashpartitioning(cs_bill_customer_sk#547, 200), ENSURE_REQUIREMENTS, [id=#97944]
      :                    :                 :  :        +- *(31) Project [cs_sold_date_sk#544, cs_bill_customer_sk#547, cs_quantity#562, cs_list_price#564]
      :                    :                 :  :           +- *(31) SortMergeJoin [cs_item_sk#559], [item_sk#7537], LeftSemi
      :                    :                 :  :              :- *(27) Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
      :                    :                 :  :              :  +- AQEShuffleRead coalesced
      :                    :                 :  :              :     +- ShuffleQueryStage 0
      :                    :                 :  :              :        +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#91553]
      :                    :                 :  :              :           +- *(1) Filter (isnotnull(cs_bill_customer_sk#547) AND isnotnull(cs_sold_date_sk#544))
      :                    :                 :  :              :              +- *(1) ColumnarToRow
      :                    :                 :  :              :                 +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559,cs_quantity#562,cs_list_price#564] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#547), isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
      :                    :                 :  :              +- *(30) Sort [item_sk#7537 ASC NULLS FIRST], false, 0
      :                    :                 :  :                 +- *(30) Project [item_sk#7537]
      :                    :                 :  :                    +- *(30) Filter (cnt#7539L > 4)
      :                    :                 :  :                       +- *(30) HashAggregate(keys=[_groupingexpression#7744, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7537, cnt#7539L])
      :                    :                 :  :                          +- *(30) HashAggregate(keys=[_groupingexpression#7744, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7744, i_item_sk#668, d_date#614, count#7751L])
      :                    :                 :  :                             +- *(30) Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7744]
      :                    :                 :  :                                +- *(30) SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
      :                    :                 :  :                                   :- *(28) Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
      :                    :                 :  :                                   :  +- AQEShuffleRead coalesced
      :                    :                 :  :                                   :     +- ShuffleQueryStage 31
      :                    :                 :  :                                   :        +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#94616]
      :                    :                 :  :                                   :           +- *(23) Project [ss_item_sk#254, d_date#614]
      :                    :                 :  :                                   :              +- *(23) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
      :                    :                 :  :                                   :                 :- *(21) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
      :                    :                 :  :                                   :                 :  +- AQEShuffleRead coalesced
      :                    :                 :  :                                   :                 :     +- ShuffleQueryStage 1
      :                    :                 :  :                                   :                 :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#91570]
      :                    :                 :  :                                   :                 :           +- *(2) Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_item_sk#254))
      :                    :                 :  :                                   :                 :              +- *(2) ColumnarToRow
      :                    :                 :  :                                   :                 :                 +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_item_sk#254)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
      :                    :                 :  :                                   :                 +- *(22) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
      :                    :                 :  :                                   :                    +- AQEShuffleRead coalesced
      :                    :                 :  :                                   :                       +- ShuffleQueryStage 2
      :                    :                 :  :                                   :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#91589]
      :                    :                 :  :                                   :                             +- *(3) Project [d_date_sk#612, d_date#614]
      :                    :                 :  :                                   :                                +- *(3) Filter (d_year#618 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#612))
      :                    :                 :  :                                   :                                   +- *(3) ColumnarToRow
      :                    :                 :  :                                   :                                      +- FileScan parquet [d_date_sk#612,d_date#614,d_year#618] Batched: true, DataFilters: [d_year#618 IN (2000,2001,2002,2003), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
      :                    :                 :  :                                   +- *(29) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
      :                    :                 :  :                                      +- AQEShuffleRead coalesced
      :                    :                 :  :                                         +- ShuffleQueryStage 3
      :                    :                 :  :                                            +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#91612]
      :                    :                 :  :                                               +- *(4) Filter isnotnull(i_item_sk#668)
      :                    :                 :  :                                                  +- *(4) ColumnarToRow
      :                    :                 :  :                                                     +- FileScan parquet [i_item_sk#668,i_item_desc#672] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
      :                    :                 :  +- *(40) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :                    :                 :     +- *(40) Project [c_customer_sk#7618]
      :                    :                 :        +- *(40) Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
      :                    :                 :           :  +- Subquery subquery#7543, [id=#91120]
      :                    :                 :           :     +- AdaptiveSparkPlan isFinalPlan=true
                                                               +- == Final Plan ==
                                                                  *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- ShuffleQueryStage 6
                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                                        +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                           +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                              +- AQEShuffleRead coalesced
                                                                                 +- ShuffleQueryStage 5
                                                                                    +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                                       +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                          +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                             +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                                :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                                :  +- AQEShuffleRead coalesced
                                                                                                :     +- ShuffleQueryStage 4
                                                                                                :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                                :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                                :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                                :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                                :                 :  +- AQEShuffleRead coalesced
                                                                                                :                 :     +- ShuffleQueryStage 0
                                                                                                :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                                :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                                :                 :              +- *(1) ColumnarToRow
                                                                                                :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                                :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                                :                    +- AQEShuffleRead coalesced
                                                                                                :                       +- ShuffleQueryStage 2
                                                                                                :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                                +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                                   +- AQEShuffleRead coalesced
                                                                                                      +- ShuffleQueryStage 3
                                                                                                         +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                            +- *(3) Project [d_date_sk#7567]
                                                                                                               +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                                  +- *(3) ColumnarToRow
                                                                                                                     +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                               +- == Initial Plan ==
                                                                  HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                                     +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                        +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                           +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                              +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                 +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                       :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                       :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                                       :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                       :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                       :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                       :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                                       :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                       :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                       :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                                       :                 +- Filter isnotnull(c_customer_sk#400)
                                                                                       :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                                       +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                          +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                             +- Project [d_date_sk#7567]
                                                                                                +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                   +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :                    :                 :           +- *(40) HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
      :                    :                 :              +- *(40) HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
      :                    :                 :                 +- *(40) Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
      :                    :                 :                    +- *(40) SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
      :                    :                 :                       :- *(38) Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
      :                    :                 :                       :  +- ShuffleQueryStage 4
      :                    :                 :                       :     +- Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91640]
      :                    :                 :                       :        +- *(5) Filter isnotnull(ss_customer_sk#7598)
      :                    :                 :                       :           +- *(5) ColumnarToRow
      :                    :                 :                       :              +- FileScan parquet [ss_customer_sk#7598,ss_quantity#7605,ss_sales_price#7608] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
      :                    :                 :                       +- *(39) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :                    :                 :                          +- ShuffleQueryStage 5
      :                    :                 :                             +- Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
      :                    :                 :                                +- *(6) Filter isnotnull(c_customer_sk#7618)
      :                    :                 :                                   +- *(6) ColumnarToRow
      :                    :                 :                                      +- FileScan parquet [c_customer_sk#7618] Batched: true, DataFilters: [isnotnull(c_customer_sk#7618)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
      :                    :                 +- *(46) SortMergeJoin [c_customer_sk#7636], [c_customer_sk#7618], LeftSemi
      :                    :                    :- *(42) Sort [c_customer_sk#7636 ASC NULLS FIRST], false, 0
      :                    :                    :  +- ShuffleQueryStage 6
      :                    :                    :     +- Exchange hashpartitioning(c_customer_sk#7636, 200), ENSURE_REQUIREMENTS, [id=#91682]
      :                    :                    :        +- *(7) Filter isnotnull(c_customer_sk#7636)
      :                    :                    :           +- *(7) ColumnarToRow
      :                    :                    :              +- FileScan parquet [c_customer_sk#7636,c_first_name#7644,c_last_name#7645] Batched: true, DataFilters: [isnotnull(c_customer_sk#7636)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
      :                    :                    +- *(45) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :                    :                       +- *(45) Project [c_customer_sk#7618]
      :                    :                          +- *(45) Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
      :                    :                             :  +- Subquery subquery#7543, [id=#91120]
      :                    :                             :     +- AdaptiveSparkPlan isFinalPlan=true
                                                               +- == Final Plan ==
                                                                  *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- ShuffleQueryStage 6
                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                                        +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                           +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                              +- AQEShuffleRead coalesced
                                                                                 +- ShuffleQueryStage 5
                                                                                    +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                                       +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                          +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                             +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                                :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                                :  +- AQEShuffleRead coalesced
                                                                                                :     +- ShuffleQueryStage 4
                                                                                                :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                                :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                                :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                                :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                                :                 :  +- AQEShuffleRead coalesced
                                                                                                :                 :     +- ShuffleQueryStage 0
                                                                                                :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                                :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                                :                 :              +- *(1) ColumnarToRow
                                                                                                :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                                :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                                :                    +- AQEShuffleRead coalesced
                                                                                                :                       +- ShuffleQueryStage 2
                                                                                                :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                                +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                                   +- AQEShuffleRead coalesced
                                                                                                      +- ShuffleQueryStage 3
                                                                                                         +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                            +- *(3) Project [d_date_sk#7567]
                                                                                                               +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                                  +- *(3) ColumnarToRow
                                                                                                                     +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                               +- == Initial Plan ==
                                                                  HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                                     +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                        +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                           +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                              +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                 +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                       :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                       :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                                       :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                       :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                       :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                       :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                                       :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                       :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                       :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                                       :                 +- Filter isnotnull(c_customer_sk#400)
                                                                                       :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                                       +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                          +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                             +- Project [d_date_sk#7567]
                                                                                                +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                   +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :                    :                             +- *(45) HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
      :                    :                                +- *(45) HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
      :                    :                                   +- *(45) Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
      :                    :                                      +- *(45) SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
      :                    :                                         :- *(43) Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
      :                    :                                         :  +- ShuffleQueryStage 8
      :                    :                                         :     +- ReusedExchange [ss_customer_sk#7598, ss_quantity#7605, ss_sales_price#7608], Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91640]
      :                    :                                         +- *(44) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :                    :                                            +- ShuffleQueryStage 10
      :                    :                                               +- ReusedExchange [c_customer_sk#7618], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
      :                    +- *(60) Sort [d_date_sk#7654 ASC NULLS FIRST], false, 0
      :                       +- AQEShuffleRead coalesced
      :                          +- ShuffleQueryStage 11
      :                             +- Exchange hashpartitioning(d_date_sk#7654, 200), ENSURE_REQUIREMENTS, [id=#91751]
      :                                +- *(10) Project [d_date_sk#7654]
      :                                   +- *(10) Filter ((((isnotnull(d_year#7660) AND isnotnull(d_moy#7662)) AND (d_year#7660 = 2000)) AND (d_moy#7662 = 7)) AND isnotnull(d_date_sk#7654))
      :                                      +- *(10) ColumnarToRow
      :                                         +- FileScan parquet [d_date_sk#7654,d_year#7660,d_moy#7662] Batched: true, DataFilters: [isnotnull(d_year#7660), isnotnull(d_moy#7662), (d_year#7660 = 2000), (d_moy#7662 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
      +- *(66) HashAggregate(keys=[c_last_name#7691, c_first_name#7690], functions=[sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#494 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#496 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7691, c_first_name#7690, sales#7533])
         +- AQEShuffleRead coalesced
            +- ShuffleQueryStage 39
               +- Exchange hashpartitioning(c_last_name#7691, c_first_name#7690, 200), ENSURE_REQUIREMENTS, [id=#99454]
                  +- *(64) HashAggregate(keys=[c_last_name#7691, c_first_name#7690], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#494 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#496 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7691, c_first_name#7690, sum#7758, isEmpty#7759])
                     +- *(64) Project [ws_quantity#494, ws_list_price#496, c_first_name#7690, c_last_name#7691]
                        +- *(64) SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#7700], Inner
                           :- *(62) Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                           :  +- AQEShuffleRead coalesced
                           :     +- ShuffleQueryStage 37
                           :        +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#99173]
                           :           +- *(58) Project [ws_sold_date_sk#476, ws_quantity#494, ws_list_price#496, c_first_name#7690, c_last_name#7691]
                           :              +- *(58) SortMergeJoin [ws_bill_customer_sk#480], [c_customer_sk#7682], Inner
                           :                 :- *(52) SortMergeJoin [ws_bill_customer_sk#480], [c_customer_sk#7618], LeftSemi
                           :                 :  :- *(48) Sort [ws_bill_customer_sk#480 ASC NULLS FIRST], false, 0
                           :                 :  :  +- ShuffleQueryStage 35
                           :                 :  :     +- Exchange hashpartitioning(ws_bill_customer_sk#480, 200), ENSURE_REQUIREMENTS, [id=#98038]
                           :                 :  :        +- *(36) Project [ws_sold_date_sk#476, ws_bill_customer_sk#480, ws_quantity#494, ws_list_price#496]
                           :                 :  :           +- *(36) SortMergeJoin [ws_item_sk#479], [item_sk#7537], LeftSemi
                           :                 :  :              :- *(32) Sort [ws_item_sk#479 ASC NULLS FIRST], false, 0
                           :                 :  :              :  +- AQEShuffleRead coalesced
                           :                 :  :              :     +- ShuffleQueryStage 12
                           :                 :  :              :        +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#91927]
                           :                 :  :              :           +- *(11) Filter (isnotnull(ws_bill_customer_sk#480) AND isnotnull(ws_sold_date_sk#476))
                           :                 :  :              :              +- *(11) ColumnarToRow
                           :                 :  :              :                 +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_bill_customer_sk#480,ws_quantity#494,ws_list_price#496] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#480), isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                           :                 :  :              +- *(35) Sort [item_sk#7537 ASC NULLS FIRST], false, 0
                           :                 :  :                 +- *(35) Project [item_sk#7537]
                           :                 :  :                    +- *(35) Filter (cnt#7539L > 4)
                           :                 :  :                       +- *(35) HashAggregate(keys=[_groupingexpression#7745, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7537, cnt#7539L])
                           :                 :  :                          +- *(35) HashAggregate(keys=[_groupingexpression#7745, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7745, i_item_sk#668, d_date#614, count#7751L])
                           :                 :  :                             +- *(35) Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7745]
                           :                 :  :                                +- *(35) SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
                           :                 :  :                                   :- *(33) Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
                           :                 :  :                                   :  +- AQEShuffleRead coalesced
                           :                 :  :                                   :     +- ShuffleQueryStage 33
                           :                 :  :                                   :        +- ReusedExchange [ss_item_sk#254, d_date#614], Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#94616]
                           :                 :  :                                   +- *(34) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                           :                 :  :                                      +- AQEShuffleRead coalesced
                           :                 :  :                                         +- ShuffleQueryStage 18
                           :                 :  :                                            +- ReusedExchange [i_item_sk#668, i_item_desc#672], Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#91612]
                           :                 :  +- *(51) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                           :                 :     +- *(51) Project [c_customer_sk#7618]
                           :                 :        +- *(51) Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
                           :                 :           :  +- Subquery subquery#7543, [id=#91120]
                           :                 :           :     +- AdaptiveSparkPlan isFinalPlan=true
                                                               +- == Final Plan ==
                                                                  *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- ShuffleQueryStage 6
                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                                        +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                           +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                              +- AQEShuffleRead coalesced
                                                                                 +- ShuffleQueryStage 5
                                                                                    +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                                       +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                          +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                             +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                                :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                                :  +- AQEShuffleRead coalesced
                                                                                                :     +- ShuffleQueryStage 4
                                                                                                :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                                :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                                :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                                :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                                :                 :  +- AQEShuffleRead coalesced
                                                                                                :                 :     +- ShuffleQueryStage 0
                                                                                                :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                                :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                                :                 :              +- *(1) ColumnarToRow
                                                                                                :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                                :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                                :                    +- AQEShuffleRead coalesced
                                                                                                :                       +- ShuffleQueryStage 2
                                                                                                :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                                +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                                   +- AQEShuffleRead coalesced
                                                                                                      +- ShuffleQueryStage 3
                                                                                                         +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                            +- *(3) Project [d_date_sk#7567]
                                                                                                               +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                                  +- *(3) ColumnarToRow
                                                                                                                     +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                               +- == Initial Plan ==
                                                                  HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                                     +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                        +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                           +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                              +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                 +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                       :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                       :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                                       :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                       :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                       :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                       :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                                       :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                       :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                       :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                                       :                 +- Filter isnotnull(c_customer_sk#400)
                                                                                       :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                                       +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                          +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                             +- Project [d_date_sk#7567]
                                                                                                +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                   +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                           :                 :           +- *(51) HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
                           :                 :              +- *(51) HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
                           :                 :                 +- *(51) Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
                           :                 :                    +- *(51) SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
                           :                 :                       :- *(49) Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
                           :                 :                       :  +- ShuffleQueryStage 20
                           :                 :                       :     +- ReusedExchange [ss_customer_sk#7598, ss_quantity#7605, ss_sales_price#7608], Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91640]
                           :                 :                       +- *(50) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                           :                 :                          +- ShuffleQueryStage 22
                           :                 :                             +- ReusedExchange [c_customer_sk#7618], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                           :                 +- *(57) SortMergeJoin [c_customer_sk#7682], [c_customer_sk#7618], LeftSemi
                           :                    :- *(53) Sort [c_customer_sk#7682 ASC NULLS FIRST], false, 0
                           :                    :  +- ShuffleQueryStage 24
                           :                    :     +- ReusedExchange [c_customer_sk#7682, c_first_name#7690, c_last_name#7691], Exchange hashpartitioning(c_customer_sk#7636, 200), ENSURE_REQUIREMENTS, [id=#91682]
                           :                    +- *(56) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                           :                       +- *(56) Project [c_customer_sk#7618]
                           :                          +- *(56) Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
                           :                             :  +- Subquery subquery#7543, [id=#91120]
                           :                             :     +- AdaptiveSparkPlan isFinalPlan=true
                                                               +- == Final Plan ==
                                                                  *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- ShuffleQueryStage 6
                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                                        +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                           +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                              +- AQEShuffleRead coalesced
                                                                                 +- ShuffleQueryStage 5
                                                                                    +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                                       +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                          +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                             +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                                :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                                :  +- AQEShuffleRead coalesced
                                                                                                :     +- ShuffleQueryStage 4
                                                                                                :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                                :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                                :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                                :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                                :                 :  +- AQEShuffleRead coalesced
                                                                                                :                 :     +- ShuffleQueryStage 0
                                                                                                :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                                :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                                :                 :              +- *(1) ColumnarToRow
                                                                                                :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                                :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                                :                    +- AQEShuffleRead coalesced
                                                                                                :                       +- ShuffleQueryStage 2
                                                                                                :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                                +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                                   +- AQEShuffleRead coalesced
                                                                                                      +- ShuffleQueryStage 3
                                                                                                         +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                            +- *(3) Project [d_date_sk#7567]
                                                                                                               +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                                  +- *(3) ColumnarToRow
                                                                                                                     +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                               +- == Initial Plan ==
                                                                  HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                                     +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                                        +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                           +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                              +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                                 +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                       :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                       :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                                       :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                       :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                       :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                       :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                                       :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                       :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                       :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                                       :                 +- Filter isnotnull(c_customer_sk#400)
                                                                                       :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                                       +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                          +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                             +- Project [d_date_sk#7567]
                                                                                                +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                   +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                           :                             +- *(56) HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
                           :                                +- *(56) HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
                           :                                   +- *(56) Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
                           :                                      +- *(56) SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
                           :                                         :- *(54) Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
                           :                                         :  +- ShuffleQueryStage 26
                           :                                         :     +- ReusedExchange [ss_customer_sk#7598, ss_quantity#7605, ss_sales_price#7608], Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91640]
                           :                                         +- *(55) Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                           :                                            +- ShuffleQueryStage 28
                           :                                               +- ReusedExchange [c_customer_sk#7618], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                           +- *(63) Sort [d_date_sk#7700 ASC NULLS FIRST], false, 0
                              +- AQEShuffleRead coalesced
                                 +- ShuffleQueryStage 30
                                    +- ReusedExchange [d_date_sk#7700], Exchange hashpartitioning(d_date_sk#7654, 200), ENSURE_REQUIREMENTS, [id=#91751]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_last_name#7645 ASC NULLS FIRST,c_first_name#7644 ASC NULLS FIRST,sales#7530 ASC NULLS FIRST], output=[c_last_name#7645,c_first_name#7644,sales#7530])
   +- Union
      :- HashAggregate(keys=[c_last_name#7645, c_first_name#7644], functions=[sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#562 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#564 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7645, c_first_name#7644, sales#7530])
      :  +- Exchange hashpartitioning(c_last_name#7645, c_first_name#7644, 200), ENSURE_REQUIREMENTS, [id=#91283]
      :     +- HashAggregate(keys=[c_last_name#7645, c_first_name#7644], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#562 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#564 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7645, c_first_name#7644, sum#7748, isEmpty#7749])
      :        +- Project [cs_quantity#562, cs_list_price#564, c_first_name#7644, c_last_name#7645]
      :           +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#7654], Inner
      :              :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
      :              :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#91275]
      :              :     +- Project [cs_sold_date_sk#544, cs_quantity#562, cs_list_price#564, c_first_name#7644, c_last_name#7645]
      :              :        +- SortMergeJoin [cs_bill_customer_sk#547], [c_customer_sk#7636], Inner
      :              :           :- SortMergeJoin [cs_bill_customer_sk#547], [c_customer_sk#7618], LeftSemi
      :              :           :  :- Sort [cs_bill_customer_sk#547 ASC NULLS FIRST], false, 0
      :              :           :  :  +- Exchange hashpartitioning(cs_bill_customer_sk#547, 200), ENSURE_REQUIREMENTS, [id=#91249]
      :              :           :  :     +- Project [cs_sold_date_sk#544, cs_bill_customer_sk#547, cs_quantity#562, cs_list_price#564]
      :              :           :  :        +- SortMergeJoin [cs_item_sk#559], [item_sk#7537], LeftSemi
      :              :           :  :           :- Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
      :              :           :  :           :  +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#91231]
      :              :           :  :           :     +- Filter (isnotnull(cs_bill_customer_sk#547) AND isnotnull(cs_sold_date_sk#544))
      :              :           :  :           :        +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559,cs_quantity#562,cs_list_price#564] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#547), isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
      :              :           :  :           +- Sort [item_sk#7537 ASC NULLS FIRST], false, 0
      :              :           :  :              +- Project [item_sk#7537]
      :              :           :  :                 +- Filter (cnt#7539L > 4)
      :              :           :  :                    +- HashAggregate(keys=[_groupingexpression#7744, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7537, cnt#7539L])
      :              :           :  :                       +- HashAggregate(keys=[_groupingexpression#7744, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7744, i_item_sk#668, d_date#614, count#7751L])
      :              :           :  :                          +- Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7744]
      :              :           :  :                             +- SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
      :              :           :  :                                :- Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
      :              :           :  :                                :  +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#91219]
      :              :           :  :                                :     +- Project [ss_item_sk#254, d_date#614]
      :              :           :  :                                :        +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
      :              :           :  :                                :           :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
      :              :           :  :                                :           :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#91211]
      :              :           :  :                                :           :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_item_sk#254))
      :              :           :  :                                :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_item_sk#254)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
      :              :           :  :                                :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
      :              :           :  :                                :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#91212]
      :              :           :  :                                :                 +- Project [d_date_sk#612, d_date#614]
      :              :           :  :                                :                    +- Filter (d_year#618 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#612))
      :              :           :  :                                :                       +- FileScan parquet [d_date_sk#612,d_date#614,d_year#618] Batched: true, DataFilters: [d_year#618 IN (2000,2001,2002,2003), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
      :              :           :  :                                +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
      :              :           :  :                                   +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#91220]
      :              :           :  :                                      +- Filter isnotnull(i_item_sk#668)
      :              :           :  :                                         +- FileScan parquet [i_item_sk#668,i_item_desc#672] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
      :              :           :  +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :              :           :     +- Project [c_customer_sk#7618]
      :              :           :        +- Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
      :              :           :           :  +- Subquery subquery#7543, [id=#91120]
      :              :           :           :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- ShuffleQueryStage 6
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                            +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                               +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                  +- AQEShuffleRead coalesced
                                                                     +- ShuffleQueryStage 5
                                                                        +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                           +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                              +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                 +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                    :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                    :  +- AQEShuffleRead coalesced
                                                                                    :     +- ShuffleQueryStage 4
                                                                                    :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                    :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                    :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                    :                 :  +- AQEShuffleRead coalesced
                                                                                    :                 :     +- ShuffleQueryStage 0
                                                                                    :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                    :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                    :                 :              +- *(1) ColumnarToRow
                                                                                    :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                    :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                    :                    +- AQEShuffleRead coalesced
                                                                                    :                       +- ShuffleQueryStage 2
                                                                                    :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                    +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                       +- AQEShuffleRead coalesced
                                                                                          +- ShuffleQueryStage 3
                                                                                             +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                +- *(3) Project [d_date_sk#7567]
                                                                                                   +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                      +- *(3) ColumnarToRow
                                                                                                         +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                   +- == Initial Plan ==
                                                      HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                         +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                            +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                               +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                  +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                     +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                        +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                           :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                           :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                           :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                           :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                           :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                           :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                           :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                           :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                           :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                           :                 +- Filter isnotnull(c_customer_sk#400)
                                                                           :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                           +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                              +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                 +- Project [d_date_sk#7567]
                                                                                    +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                       +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :              :           :           +- HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
      :              :           :              +- HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
      :              :           :                 +- Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
      :              :           :                    +- SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
      :              :           :                       :- Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
      :              :           :                       :  +- Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91237]
      :              :           :                       :     +- Filter isnotnull(ss_customer_sk#7598)
      :              :           :                       :        +- FileScan parquet [ss_customer_sk#7598,ss_quantity#7605,ss_sales_price#7608] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
      :              :           :                       +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :              :           :                          +- Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91238]
      :              :           :                             +- Filter isnotnull(c_customer_sk#7618)
      :              :           :                                +- FileScan parquet [c_customer_sk#7618] Batched: true, DataFilters: [isnotnull(c_customer_sk#7618)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
      :              :           +- SortMergeJoin [c_customer_sk#7636], [c_customer_sk#7618], LeftSemi
      :              :              :- Sort [c_customer_sk#7636 ASC NULLS FIRST], false, 0
      :              :              :  +- Exchange hashpartitioning(c_customer_sk#7636, 200), ENSURE_REQUIREMENTS, [id=#91266]
      :              :              :     +- Filter isnotnull(c_customer_sk#7636)
      :              :              :        +- FileScan parquet [c_customer_sk#7636,c_first_name#7644,c_last_name#7645] Batched: true, DataFilters: [isnotnull(c_customer_sk#7636)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
      :              :              +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :              :                 +- Project [c_customer_sk#7618]
      :              :                    +- Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
      :              :                       :  +- Subquery subquery#7543, [id=#91120]
      :              :                       :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- ShuffleQueryStage 6
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                            +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                               +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                  +- AQEShuffleRead coalesced
                                                                     +- ShuffleQueryStage 5
                                                                        +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                           +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                              +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                 +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                    :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                    :  +- AQEShuffleRead coalesced
                                                                                    :     +- ShuffleQueryStage 4
                                                                                    :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                    :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                    :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                    :                 :  +- AQEShuffleRead coalesced
                                                                                    :                 :     +- ShuffleQueryStage 0
                                                                                    :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                    :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                    :                 :              +- *(1) ColumnarToRow
                                                                                    :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                    :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                    :                    +- AQEShuffleRead coalesced
                                                                                    :                       +- ShuffleQueryStage 2
                                                                                    :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                    +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                       +- AQEShuffleRead coalesced
                                                                                          +- ShuffleQueryStage 3
                                                                                             +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                +- *(3) Project [d_date_sk#7567]
                                                                                                   +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                      +- *(3) ColumnarToRow
                                                                                                         +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                   +- == Initial Plan ==
                                                      HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                         +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                            +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                               +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                  +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                     +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                        +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                           :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                           :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                           :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                           :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                           :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                           :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                           :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                           :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                           :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                           :                 +- Filter isnotnull(c_customer_sk#400)
                                                                           :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                           +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                              +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                 +- Project [d_date_sk#7567]
                                                                                    +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                       +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :              :                       +- HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
      :              :                          +- HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
      :              :                             +- Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
      :              :                                +- SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
      :              :                                   :- Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
      :              :                                   :  +- Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91254]
      :              :                                   :     +- Filter isnotnull(ss_customer_sk#7598)
      :              :                                   :        +- FileScan parquet [ss_customer_sk#7598,ss_quantity#7605,ss_sales_price#7608] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
      :              :                                   +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
      :              :                                      +- Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91255]
      :              :                                         +- Filter isnotnull(c_customer_sk#7618)
      :              :                                            +- FileScan parquet [c_customer_sk#7618] Batched: true, DataFilters: [isnotnull(c_customer_sk#7618)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
      :              +- Sort [d_date_sk#7654 ASC NULLS FIRST], false, 0
      :                 +- Exchange hashpartitioning(d_date_sk#7654, 200), ENSURE_REQUIREMENTS, [id=#91276]
      :                    +- Project [d_date_sk#7654]
      :                       +- Filter ((((isnotnull(d_year#7660) AND isnotnull(d_moy#7662)) AND (d_year#7660 = 2000)) AND (d_moy#7662 = 7)) AND isnotnull(d_date_sk#7654))
      :                          +- FileScan parquet [d_date_sk#7654,d_year#7660,d_moy#7662] Batched: true, DataFilters: [isnotnull(d_year#7660), isnotnull(d_moy#7662), (d_year#7660 = 2000), (d_moy#7662 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
      +- HashAggregate(keys=[c_last_name#7691, c_first_name#7690], functions=[sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#494 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#496 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7691, c_first_name#7690, sales#7533])
         +- Exchange hashpartitioning(c_last_name#7691, c_first_name#7690, 200), ENSURE_REQUIREMENTS, [id=#91358]
            +- HashAggregate(keys=[c_last_name#7691, c_first_name#7690], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#494 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#496 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#7691, c_first_name#7690, sum#7758, isEmpty#7759])
               +- Project [ws_quantity#494, ws_list_price#496, c_first_name#7690, c_last_name#7691]
                  +- SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#7700], Inner
                     :- Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#91350]
                     :     +- Project [ws_sold_date_sk#476, ws_quantity#494, ws_list_price#496, c_first_name#7690, c_last_name#7691]
                     :        +- SortMergeJoin [ws_bill_customer_sk#480], [c_customer_sk#7682], Inner
                     :           :- SortMergeJoin [ws_bill_customer_sk#480], [c_customer_sk#7618], LeftSemi
                     :           :  :- Sort [ws_bill_customer_sk#480 ASC NULLS FIRST], false, 0
                     :           :  :  +- Exchange hashpartitioning(ws_bill_customer_sk#480, 200), ENSURE_REQUIREMENTS, [id=#91324]
                     :           :  :     +- Project [ws_sold_date_sk#476, ws_bill_customer_sk#480, ws_quantity#494, ws_list_price#496]
                     :           :  :        +- SortMergeJoin [ws_item_sk#479], [item_sk#7537], LeftSemi
                     :           :  :           :- Sort [ws_item_sk#479 ASC NULLS FIRST], false, 0
                     :           :  :           :  +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#91306]
                     :           :  :           :     +- Filter (isnotnull(ws_bill_customer_sk#480) AND isnotnull(ws_sold_date_sk#476))
                     :           :  :           :        +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_bill_customer_sk#480,ws_quantity#494,ws_list_price#496] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#480), isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                     :           :  :           +- Sort [item_sk#7537 ASC NULLS FIRST], false, 0
                     :           :  :              +- Project [item_sk#7537]
                     :           :  :                 +- Filter (cnt#7539L > 4)
                     :           :  :                    +- HashAggregate(keys=[_groupingexpression#7745, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7537, cnt#7539L])
                     :           :  :                       +- HashAggregate(keys=[_groupingexpression#7745, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7745, i_item_sk#668, d_date#614, count#7751L])
                     :           :  :                          +- Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7745]
                     :           :  :                             +- SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
                     :           :  :                                :- Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
                     :           :  :                                :  +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#91294]
                     :           :  :                                :     +- Project [ss_item_sk#254, d_date#614]
                     :           :  :                                :        +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                     :           :  :                                :           :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                     :           :  :                                :           :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#91286]
                     :           :  :                                :           :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_item_sk#254))
                     :           :  :                                :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_item_sk#254)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
                     :           :  :                                :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                     :           :  :                                :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#91287]
                     :           :  :                                :                 +- Project [d_date_sk#612, d_date#614]
                     :           :  :                                :                    +- Filter (d_year#618 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#612))
                     :           :  :                                :                       +- FileScan parquet [d_date_sk#612,d_date#614,d_year#618] Batched: true, DataFilters: [d_year#618 IN (2000,2001,2002,2003), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
                     :           :  :                                +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                     :           :  :                                   +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#91295]
                     :           :  :                                      +- Filter isnotnull(i_item_sk#668)
                     :           :  :                                         +- FileScan parquet [i_item_sk#668,i_item_desc#672] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
                     :           :  +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                     :           :     +- Project [c_customer_sk#7618]
                     :           :        +- Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
                     :           :           :  +- Subquery subquery#7543, [id=#91120]
                     :           :           :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- ShuffleQueryStage 6
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                            +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                               +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                  +- AQEShuffleRead coalesced
                                                                     +- ShuffleQueryStage 5
                                                                        +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                           +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                              +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                 +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                    :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                    :  +- AQEShuffleRead coalesced
                                                                                    :     +- ShuffleQueryStage 4
                                                                                    :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                    :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                    :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                    :                 :  +- AQEShuffleRead coalesced
                                                                                    :                 :     +- ShuffleQueryStage 0
                                                                                    :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                    :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                    :                 :              +- *(1) ColumnarToRow
                                                                                    :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                    :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                    :                    +- AQEShuffleRead coalesced
                                                                                    :                       +- ShuffleQueryStage 2
                                                                                    :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                    +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                       +- AQEShuffleRead coalesced
                                                                                          +- ShuffleQueryStage 3
                                                                                             +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                +- *(3) Project [d_date_sk#7567]
                                                                                                   +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                      +- *(3) ColumnarToRow
                                                                                                         +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                   +- == Initial Plan ==
                                                      HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                         +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                            +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                               +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                  +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                     +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                        +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                           :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                           :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                           :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                           :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                           :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                           :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                           :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                           :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                           :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                           :                 +- Filter isnotnull(c_customer_sk#400)
                                                                           :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                           +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                              +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                 +- Project [d_date_sk#7567]
                                                                                    +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                       +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :           :           +- HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
                     :           :              +- HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
                     :           :                 +- Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
                     :           :                    +- SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
                     :           :                       :- Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
                     :           :                       :  +- Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91312]
                     :           :                       :     +- Filter isnotnull(ss_customer_sk#7598)
                     :           :                       :        +- FileScan parquet [ss_customer_sk#7598,ss_quantity#7605,ss_sales_price#7608] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                     :           :                       +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                     :           :                          +- Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91313]
                     :           :                             +- Filter isnotnull(c_customer_sk#7618)
                     :           :                                +- FileScan parquet [c_customer_sk#7618] Batched: true, DataFilters: [isnotnull(c_customer_sk#7618)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                     :           +- SortMergeJoin [c_customer_sk#7682], [c_customer_sk#7618], LeftSemi
                     :              :- Sort [c_customer_sk#7682 ASC NULLS FIRST], false, 0
                     :              :  +- Exchange hashpartitioning(c_customer_sk#7682, 200), ENSURE_REQUIREMENTS, [id=#91341]
                     :              :     +- Filter isnotnull(c_customer_sk#7682)
                     :              :        +- FileScan parquet [c_customer_sk#7682,c_first_name#7690,c_last_name#7691] Batched: true, DataFilters: [isnotnull(c_customer_sk#7682)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                     :              +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                     :                 +- Project [c_customer_sk#7618]
                     :                    +- Filter (isnotnull(ssales#7542) AND (cast(ssales#7542 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7543, [id=#91120] as decimal(32,6)))), DecimalType(38,8), true)))
                     :                       :  +- Subquery subquery#7543, [id=#91120]
                     :                       :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(11) HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- ShuffleQueryStage 6
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#98940]
                                                            +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                               +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                                  +- AQEShuffleRead coalesced
                                                                     +- ShuffleQueryStage 5
                                                                        +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#98892]
                                                                           +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                              +- *(9) Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                 +- *(9) SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                                    :- *(7) Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                                    :  +- AQEShuffleRead coalesced
                                                                                    :     +- ShuffleQueryStage 4
                                                                                    :        +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#98795]
                                                                                    :           +- *(6) Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                                    :              +- *(6) SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                                    :                 :- *(4) Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                                    :                 :  +- AQEShuffleRead coalesced
                                                                                    :                 :     +- ShuffleQueryStage 0
                                                                                    :                 :        +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#98570]
                                                                                    :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                                    :                 :              +- *(1) ColumnarToRow
                                                                                    :                 :                 +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                    :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                    :                    +- AQEShuffleRead coalesced
                                                                                    :                       +- ShuffleQueryStage 2
                                                                                    :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91657]
                                                                                    +- *(8) Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                                       +- AQEShuffleRead coalesced
                                                                                          +- ShuffleQueryStage 3
                                                                                             +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#98612]
                                                                                                +- *(3) Project [d_date_sk#7567]
                                                                                                   +- *(3) Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                                      +- *(3) ColumnarToRow
                                                                                                         +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                   +- == Initial Plan ==
                                                      HashAggregate(keys=[], functions=[max(csales#7540)], output=[tpcds_cmax#7541])
                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#91118]
                                                         +- HashAggregate(keys=[], functions=[partial_max(csales#7540)], output=[max#7761])
                                                            +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7540])
                                                               +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91114]
                                                                  +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7554 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7557 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7764, isEmpty#7765])
                                                                     +- Project [ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                        +- SortMergeJoin [ss_sold_date_sk#7544], [d_date_sk#7567], Inner
                                                                           :- Sort [ss_sold_date_sk#7544 ASC NULLS FIRST], false, 0
                                                                           :  +- Exchange hashpartitioning(ss_sold_date_sk#7544, 200), ENSURE_REQUIREMENTS, [id=#91106]
                                                                           :     +- Project [ss_sold_date_sk#7544, ss_quantity#7554, ss_sales_price#7557, c_customer_sk#400]
                                                                           :        +- SortMergeJoin [ss_customer_sk#7547], [c_customer_sk#400], Inner
                                                                           :           :- Sort [ss_customer_sk#7547 ASC NULLS FIRST], false, 0
                                                                           :           :  +- Exchange hashpartitioning(ss_customer_sk#7547, 200), ENSURE_REQUIREMENTS, [id=#91098]
                                                                           :           :     +- Filter (isnotnull(ss_customer_sk#7547) AND isnotnull(ss_sold_date_sk#7544))
                                                                           :           :        +- FileScan parquet [ss_sold_date_sk#7544,ss_customer_sk#7547,ss_quantity#7554,ss_sales_price#7557] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7547), isnotnull(ss_sold_date_sk#7544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                           :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#91099]
                                                                           :                 +- Filter isnotnull(c_customer_sk#400)
                                                                           :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                           +- Sort [d_date_sk#7567 ASC NULLS FIRST], false, 0
                                                                              +- Exchange hashpartitioning(d_date_sk#7567, 200), ENSURE_REQUIREMENTS, [id=#91107]
                                                                                 +- Project [d_date_sk#7567]
                                                                                    +- Filter (d_year#7573 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7567))
                                                                                       +- FileScan parquet [d_date_sk#7567,d_year#7573] Batched: true, DataFilters: [d_year#7573 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7567)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :                       +- HashAggregate(keys=[c_customer_sk#7618], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, ssales#7542])
                     :                          +- HashAggregate(keys=[c_customer_sk#7618], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7605 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7608 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7618, sum#7754, isEmpty#7755])
                     :                             +- Project [ss_quantity#7605, ss_sales_price#7608, c_customer_sk#7618]
                     :                                +- SortMergeJoin [ss_customer_sk#7598], [c_customer_sk#7618], Inner
                     :                                   :- Sort [ss_customer_sk#7598 ASC NULLS FIRST], false, 0
                     :                                   :  +- Exchange hashpartitioning(ss_customer_sk#7598, 200), ENSURE_REQUIREMENTS, [id=#91329]
                     :                                   :     +- Filter isnotnull(ss_customer_sk#7598)
                     :                                   :        +- FileScan parquet [ss_customer_sk#7598,ss_quantity#7605,ss_sales_price#7608] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                     :                                   +- Sort [c_customer_sk#7618 ASC NULLS FIRST], false, 0
                     :                                      +- Exchange hashpartitioning(c_customer_sk#7618, 200), ENSURE_REQUIREMENTS, [id=#91330]
                     :                                         +- Filter isnotnull(c_customer_sk#7618)
                     :                                            +- FileScan parquet [c_customer_sk#7618] Batched: true, DataFilters: [isnotnull(c_customer_sk#7618)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                     +- Sort [d_date_sk#7700 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(d_date_sk#7700, 200), ENSURE_REQUIREMENTS, [id=#91351]
                           +- Project [d_date_sk#7700]
                              +- Filter ((((isnotnull(d_year#7706) AND isnotnull(d_moy#7708)) AND (d_year#7706 = 2000)) AND (d_moy#7708 = 7)) AND isnotnull(d_date_sk#7700))
                                 +- FileScan parquet [d_date_sk#7700,d_year#7706,d_moy#7708] Batched: true, DataFilters: [isnotnull(d_year#7706), isnotnull(d_moy#7708), (d_year#7706 = 2000), (d_moy#7708 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
