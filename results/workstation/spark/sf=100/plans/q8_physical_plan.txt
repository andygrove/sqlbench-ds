AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#717 ASC NULLS FIRST], output=[s_store_name#717,sum(ss_net_profit)#3233])
   +- *(24) HashAggregate(keys=[s_store_name#717], functions=[sum(UnscaledValue(ss_net_profit#274))], output=[s_store_name#717, sum(ss_net_profit)#3233])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 12
            +- Exchange hashpartitioning(s_store_name#717, 200), ENSURE_REQUIREMENTS, [id=#17642]
               +- *(23) HashAggregate(keys=[s_store_name#717], functions=[partial_sum(UnscaledValue(ss_net_profit#274))], output=[s_store_name#717, sum#3237L])
                  +- *(23) Project [ss_net_profit#274, s_store_name#717]
                     +- *(23) SortMergeJoin [substr(s_zip#737, 1, 2)], [substr(ca_zip#3214, 1, 2)], Inner
                        :- *(21) Sort [substr(s_zip#737, 1, 2) ASC NULLS FIRST], false, 0
                        :  +- AQEShuffleRead coalesced
                        :     +- ShuffleQueryStage 11
                        :        +- Exchange hashpartitioning(substr(s_zip#737, 1, 2), 200), ENSURE_REQUIREMENTS, [id=#17558]
                        :           +- *(20) Project [ss_net_profit#274, s_store_name#717, s_zip#737]
                        :              +- *(20) SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
                        :                 :- *(18) Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                        :                 :  +- AQEShuffleRead coalesced
                        :                 :     +- ShuffleQueryStage 7
                        :                 :        +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#17072]
                        :                 :           +- *(12) Project [ss_store_sk#259, ss_net_profit#274]
                        :                 :              +- *(12) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                        :                 :                 :- *(10) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                        :                 :                 :  +- AQEShuffleRead coalesced
                        :                 :                 :     +- ShuffleQueryStage 0
                        :                 :                 :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#16119]
                        :                 :                 :           +- *(1) Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                        :                 :                 :              +- *(1) ColumnarToRow
                        :                 :                 :                 +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_net_profit#274] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                        :                 :                 +- *(11) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                        :                 :                    +- AQEShuffleRead coalesced
                        :                 :                       +- ShuffleQueryStage 1
                        :                 :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#16138]
                        :                 :                             +- *(2) Project [d_date_sk#612]
                        :                 :                                +- *(2) Filter ((((isnotnull(d_qoy#622) AND isnotnull(d_year#618)) AND (d_qoy#622 = 1)) AND (d_year#618 = 2002)) AND isnotnull(d_date_sk#612))
                        :                 :                                   +- *(2) ColumnarToRow
                        :                 :                                      +- FileScan parquet [d_date_sk#612,d_year#618,d_qoy#622] Batched: true, DataFilters: [isnotnull(d_qoy#622), isnotnull(d_year#618), (d_qoy#622 = 1), (d_year#618 = 2002), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                        :                 +- *(19) Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
                        :                    +- AQEShuffleRead coalesced
                        :                       +- ShuffleQueryStage 2
                        :                          +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#16161]
                        :                             +- *(3) Filter (isnotnull(s_store_sk#712) AND isnotnull(s_zip#737))
                        :                                +- *(3) ColumnarToRow
                        :                                   +- FileScan parquet [s_store_sk#712,s_store_name#717,s_zip#737] Batched: true, DataFilters: [isnotnull(s_store_sk#712), isnotnull(s_zip#737)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>
                        +- *(22) Sort [substr(ca_zip#3214, 1, 2) ASC NULLS FIRST], false, 0
                           +- AQEShuffleRead coalesced
                              +- ShuffleQueryStage 10
                                 +- Exchange hashpartitioning(substr(ca_zip#3214, 1, 2), 200), ENSURE_REQUIREMENTS, [id=#17432]
                                    +- *(17) HashAggregate(keys=[ca_zip#3214], functions=[], output=[ca_zip#3214])
                                       +- AQEShuffleRead coalesced
                                          +- ShuffleQueryStage 9
                                             +- Exchange hashpartitioning(ca_zip#3214, 200), ENSURE_REQUIREMENTS, [id=#17338]
                                                +- *(16) HashAggregate(keys=[ca_zip#3214], functions=[], output=[ca_zip#3214])
                                                   +- *(16) Project [substr(ca_zip#71, 1, 5) AS ca_zip#3214]
                                                      +- *(16) SortMergeJoin [coalesce(substr(ca_zip#71, 1, 5), ), isnull(substr(ca_zip#71, 1, 5))], [coalesce(ca_zip#3215, ), isnull(ca_zip#3215)], LeftSemi
                                                         :- *(14) Sort [coalesce(substr(ca_zip#71, 1, 5), ) ASC NULLS FIRST, isnull(substr(ca_zip#71, 1, 5)) ASC NULLS FIRST], false, 0
                                                         :  +- AQEShuffleRead coalesced
                                                         :     +- ShuffleQueryStage 3
                                                         :        +- Exchange hashpartitioning(coalesce(substr(ca_zip#71, 1, 5), ), isnull(substr(ca_zip#71, 1, 5)), 200), ENSURE_REQUIREMENTS, [id=#16182]
                                                         :           +- *(4) Filter (substr(ca_zip#71, 1, 5) INSET 10206, 10324, 10424, 10828, 11000, 11486, 11666, 11734, 12037, 12215, 12413, 12727, 12778, 13068, 13091, 13188, 13224, 13505, 13763, 13878, 13888, 14108, 14174, 14230, 14438, 14687, 15025, 15412, 15444, 15809, 15934, 16179, 16536, 16581, 17024, 17168, 17712, 17839, 18003, 18079, 18161, 18260, 18301, 18569, 18589, 18764, 18820, 19407, 19530, 19531, 19669, 19744, 19898, 19901, 19932, 20034, 20144, 20185, 20333, 20345, 20453, 20579, 20699, 20729, 20746, 20832, 20956, 21438, 21462, 21508, 21537, 22550, 22939, 23064, 23410, 23562, 23618, 23995, 24194, 24349, 24357, 24549, 24749, 24812, 25000, 25110, 25114, 25482, 25520, 25580, 26172, 26731, 27165, 27682, 27968, 28067, 28073, 28477, 28635, 28801, 28986, 29036, 29354, 29470, 29734, 30247, 30317, 30808, 30861, 30895, 31133, 31142, 31236, 31301, 31386, 31602, 31918, 31941, 32074, 32330, 32675, 32986, 33414, 34106, 34716, 35290, 35480, 35622, 35696, 35730, 35753, 35955, 36167, 36428, 36501, 36719, 36777, 36980, 37323, 37642, 38102, 38110, 38412, 38751, 39130, 39164, 39666, 39697, 39808, 39877, 40222, 40241, 40464, 41100, 41507, 42190, 42240, 42650, 42771, 42892, 43324, 43726, 43786, 43949, 44184, 44204, 44644, 44703, 44728, 44955, 45226, 45235, 45262, 45344, 46324, 46413, 46725, 46840, 47058, 47201, 47351, 47457, 47686, 47826, 47927, 48867, 49104, 49672, 49699, 49710, 50013, 50476, 50576, 50908, 51114, 51296, 51793, 52014, 52406, 52520, 52567, 52595, 52908, 53003, 53245, 53267, 53474, 53600, 53878, 53902, 53924, 54246, 54784, 55156, 55184, 55608, 55804, 55936, 56391, 56593, 56683, 56685, 56701, 56713, 56783, 56990, 57621, 57921, 58122, 58398, 58463, 58733, 58830, 58977, 58997, 59447, 59547, 59705, 60574, 60671, 60743, 61016, 61101, 61358, 61399, 61608, 61636, 61679, 61768, 62068, 62381, 62589, 62687, 63305, 63333, 63629, 63790, 64410, 64526, 64542, 64570, 64581, 64634, 65036, 65165, 65439, 65803, 66160, 66884, 67439, 67793, 67828, 67914, 68034, 68089, 68560, 68627, 68877, 68894, 68943, 69269, 69284, 69675, 69800, 69959, 69979, 70798, 70973, 71087, 71103, 71402, 71644, 71759, 72046, 72450, 72486, 72521, 72648, 73172, 73486, 73582, 73630, 73650, 74270, 74397, 74515, 74685, 74689, 74899, 75080, 75171, 75357, 75524, 75749, 75796, 76142, 76678, 76693, 76741, 77454, 77931, 78527, 78811, 79055, 79654, 79785, 79993, 80897, 80990, 81303, 81614, 81688, 81822, 82170, 82304, 82673, 82679, 83123, 83246, 83368, 83885, 85076, 85150, 85389, 85427, 85608, 85957, 86914, 87099, 87179, 87326, 87377, 87417, 87558, 87996, 88362, 88422, 88920, 88965, 89012, 89137, 89627, 89647, 89901, 89917, 90992, 91116, 91213, 91309, 91546, 91575, 92398, 92467, 93072, 93783, 94180, 94255, 94296, 94470, 94618, 95391, 95816, 96216, 96381, 97436, 97450, 97475, 97613, 97644, 97683, 97692, 97779, 97884, 98320, 98834, 99094, 99140, 99157, 99799, 99827 AND isnotnull(substr(ca_zip#71, 1, 5)))
                                                         :              +- *(4) ColumnarToRow
                                                         :                 +- FileScan parquet [ca_zip#71] Batched: true, DataFilters: [substr(ca_zip#71, 1, 5) INSET 10206, 10324, 10424, 10828, 11000, 11486, 11666, 11734, 12037, 122..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>
                                                         +- *(15) Sort [coalesce(ca_zip#3215, ) ASC NULLS FIRST, isnull(ca_zip#3215) ASC NULLS FIRST], false, 0
                                                            +- AQEShuffleRead coalesced
                                                               +- ShuffleQueryStage 8
                                                                  +- Exchange hashpartitioning(coalesce(ca_zip#3215, ), isnull(ca_zip#3215), 200), ENSURE_REQUIREMENTS, [id=#17203]
                                                                     +- *(13) Project [ca_zip#3215]
                                                                        +- *(13) Filter (cnt#3216L > 10)
                                                                           +- *(13) HashAggregate(keys=[ca_zip#3226], functions=[count(1)], output=[ca_zip#3215, cnt#3216L])
                                                                              +- AQEShuffleRead coalesced
                                                                                 +- ShuffleQueryStage 6
                                                                                    +- Exchange hashpartitioning(ca_zip#3226, 200), ENSURE_REQUIREMENTS, [id=#16895]
                                                                                       +- *(9) HashAggregate(keys=[ca_zip#3226], functions=[partial_count(1)], output=[ca_zip#3226, count#3239L])
                                                                                          +- *(9) Project [ca_zip#3226]
                                                                                             +- *(9) SortMergeJoin [ca_address_sk#3217], [c_current_addr_sk#404], Inner
                                                                                                :- *(7) Sort [ca_address_sk#3217 ASC NULLS FIRST], false, 0
                                                                                                :  +- AQEShuffleRead coalesced
                                                                                                :     +- ShuffleQueryStage 4
                                                                                                :        +- Exchange hashpartitioning(ca_address_sk#3217, 200), ENSURE_REQUIREMENTS, [id=#16199]
                                                                                                :           +- *(5) Filter isnotnull(ca_address_sk#3217)
                                                                                                :              +- *(5) ColumnarToRow
                                                                                                :                 +- FileScan parquet [ca_address_sk#3217,ca_zip#3226] Batched: true, DataFilters: [isnotnull(ca_address_sk#3217)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                                                                                                +- *(8) Sort [c_current_addr_sk#404 ASC NULLS FIRST], false, 0
                                                                                                   +- AQEShuffleRead coalesced
                                                                                                      +- ShuffleQueryStage 5
                                                                                                         +- Exchange hashpartitioning(c_current_addr_sk#404, 200), ENSURE_REQUIREMENTS, [id=#16218]
                                                                                                            +- *(6) Project [c_current_addr_sk#404]
                                                                                                               +- *(6) Filter ((isnotnull(c_preferred_cust_flag#410) AND (c_preferred_cust_flag#410 = Y)) AND isnotnull(c_current_addr_sk#404))
                                                                                                                  +- *(6) ColumnarToRow
                                                                                                                     +- FileScan parquet [c_current_addr_sk#404,c_preferred_cust_flag#410] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#410), (c_preferred_cust_flag#410 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#717 ASC NULLS FIRST], output=[s_store_name#717,sum(ss_net_profit)#3233])
   +- HashAggregate(keys=[s_store_name#717], functions=[sum(UnscaledValue(ss_net_profit#274))], output=[s_store_name#717, sum(ss_net_profit)#3233])
      +- Exchange hashpartitioning(s_store_name#717, 200), ENSURE_REQUIREMENTS, [id=#16007]
         +- HashAggregate(keys=[s_store_name#717], functions=[partial_sum(UnscaledValue(ss_net_profit#274))], output=[s_store_name#717, sum#3237L])
            +- Project [ss_net_profit#274, s_store_name#717]
               +- SortMergeJoin [substr(s_zip#737, 1, 2)], [substr(ca_zip#3214, 1, 2)], Inner
                  :- Sort [substr(s_zip#737, 1, 2) ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(substr(s_zip#737, 1, 2), 200), ENSURE_REQUIREMENTS, [id=#15999]
                  :     +- Project [ss_net_profit#274, s_store_name#717, s_zip#737]
                  :        +- SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
                  :           :- Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                  :           :  +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#15966]
                  :           :     +- Project [ss_store_sk#259, ss_net_profit#274]
                  :           :        +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                  :           :           :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                  :           :           :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#15958]
                  :           :           :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                  :           :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_net_profit#274] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                  :           :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :           :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#15959]
                  :           :                 +- Project [d_date_sk#612]
                  :           :                    +- Filter ((((isnotnull(d_qoy#622) AND isnotnull(d_year#618)) AND (d_qoy#622 = 1)) AND (d_year#618 = 2002)) AND isnotnull(d_date_sk#612))
                  :           :                       +- FileScan parquet [d_date_sk#612,d_year#618,d_qoy#622] Batched: true, DataFilters: [isnotnull(d_qoy#622), isnotnull(d_year#618), (d_qoy#622 = 1), (d_year#618 = 2002), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                  :           +- Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
                  :              +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#15967]
                  :                 +- Filter (isnotnull(s_store_sk#712) AND isnotnull(s_zip#737))
                  :                    +- FileScan parquet [s_store_sk#712,s_store_name#717,s_zip#737] Batched: true, DataFilters: [isnotnull(s_store_sk#712), isnotnull(s_zip#737)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>
                  +- Sort [substr(ca_zip#3214, 1, 2) ASC NULLS FIRST], false, 0
                     +- Exchange hashpartitioning(substr(ca_zip#3214, 1, 2), 200), ENSURE_REQUIREMENTS, [id=#16000]
                        +- HashAggregate(keys=[ca_zip#3214], functions=[], output=[ca_zip#3214])
                           +- Exchange hashpartitioning(ca_zip#3214, 200), ENSURE_REQUIREMENTS, [id=#15995]
                              +- HashAggregate(keys=[ca_zip#3214], functions=[], output=[ca_zip#3214])
                                 +- Project [substr(ca_zip#71, 1, 5) AS ca_zip#3214]
                                    +- SortMergeJoin [coalesce(substr(ca_zip#71, 1, 5), ), isnull(substr(ca_zip#71, 1, 5))], [coalesce(ca_zip#3215, ), isnull(ca_zip#3215)], LeftSemi
                                       :- Sort [coalesce(substr(ca_zip#71, 1, 5), ) ASC NULLS FIRST, isnull(substr(ca_zip#71, 1, 5)) ASC NULLS FIRST], false, 0
                                       :  +- Exchange hashpartitioning(coalesce(substr(ca_zip#71, 1, 5), ), isnull(substr(ca_zip#71, 1, 5)), 200), ENSURE_REQUIREMENTS, [id=#15987]
                                       :     +- Filter (substr(ca_zip#71, 1, 5) INSET 10206, 10324, 10424, 10828, 11000, 11486, 11666, 11734, 12037, 12215, 12413, 12727, 12778, 13068, 13091, 13188, 13224, 13505, 13763, 13878, 13888, 14108, 14174, 14230, 14438, 14687, 15025, 15412, 15444, 15809, 15934, 16179, 16536, 16581, 17024, 17168, 17712, 17839, 18003, 18079, 18161, 18260, 18301, 18569, 18589, 18764, 18820, 19407, 19530, 19531, 19669, 19744, 19898, 19901, 19932, 20034, 20144, 20185, 20333, 20345, 20453, 20579, 20699, 20729, 20746, 20832, 20956, 21438, 21462, 21508, 21537, 22550, 22939, 23064, 23410, 23562, 23618, 23995, 24194, 24349, 24357, 24549, 24749, 24812, 25000, 25110, 25114, 25482, 25520, 25580, 26172, 26731, 27165, 27682, 27968, 28067, 28073, 28477, 28635, 28801, 28986, 29036, 29354, 29470, 29734, 30247, 30317, 30808, 30861, 30895, 31133, 31142, 31236, 31301, 31386, 31602, 31918, 31941, 32074, 32330, 32675, 32986, 33414, 34106, 34716, 35290, 35480, 35622, 35696, 35730, 35753, 35955, 36167, 36428, 36501, 36719, 36777, 36980, 37323, 37642, 38102, 38110, 38412, 38751, 39130, 39164, 39666, 39697, 39808, 39877, 40222, 40241, 40464, 41100, 41507, 42190, 42240, 42650, 42771, 42892, 43324, 43726, 43786, 43949, 44184, 44204, 44644, 44703, 44728, 44955, 45226, 45235, 45262, 45344, 46324, 46413, 46725, 46840, 47058, 47201, 47351, 47457, 47686, 47826, 47927, 48867, 49104, 49672, 49699, 49710, 50013, 50476, 50576, 50908, 51114, 51296, 51793, 52014, 52406, 52520, 52567, 52595, 52908, 53003, 53245, 53267, 53474, 53600, 53878, 53902, 53924, 54246, 54784, 55156, 55184, 55608, 55804, 55936, 56391, 56593, 56683, 56685, 56701, 56713, 56783, 56990, 57621, 57921, 58122, 58398, 58463, 58733, 58830, 58977, 58997, 59447, 59547, 59705, 60574, 60671, 60743, 61016, 61101, 61358, 61399, 61608, 61636, 61679, 61768, 62068, 62381, 62589, 62687, 63305, 63333, 63629, 63790, 64410, 64526, 64542, 64570, 64581, 64634, 65036, 65165, 65439, 65803, 66160, 66884, 67439, 67793, 67828, 67914, 68034, 68089, 68560, 68627, 68877, 68894, 68943, 69269, 69284, 69675, 69800, 69959, 69979, 70798, 70973, 71087, 71103, 71402, 71644, 71759, 72046, 72450, 72486, 72521, 72648, 73172, 73486, 73582, 73630, 73650, 74270, 74397, 74515, 74685, 74689, 74899, 75080, 75171, 75357, 75524, 75749, 75796, 76142, 76678, 76693, 76741, 77454, 77931, 78527, 78811, 79055, 79654, 79785, 79993, 80897, 80990, 81303, 81614, 81688, 81822, 82170, 82304, 82673, 82679, 83123, 83246, 83368, 83885, 85076, 85150, 85389, 85427, 85608, 85957, 86914, 87099, 87179, 87326, 87377, 87417, 87558, 87996, 88362, 88422, 88920, 88965, 89012, 89137, 89627, 89647, 89901, 89917, 90992, 91116, 91213, 91309, 91546, 91575, 92398, 92467, 93072, 93783, 94180, 94255, 94296, 94470, 94618, 95391, 95816, 96216, 96381, 97436, 97450, 97475, 97613, 97644, 97683, 97692, 97779, 97884, 98320, 98834, 99094, 99140, 99157, 99799, 99827 AND isnotnull(substr(ca_zip#71, 1, 5)))
                                       :        +- FileScan parquet [ca_zip#71] Batched: true, DataFilters: [substr(ca_zip#71, 1, 5) INSET 10206, 10324, 10424, 10828, 11000, 11486, 11666, 11734, 12037, 122..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>
                                       +- Sort [coalesce(ca_zip#3215, ) ASC NULLS FIRST, isnull(ca_zip#3215) ASC NULLS FIRST], false, 0
                                          +- Exchange hashpartitioning(coalesce(ca_zip#3215, ), isnull(ca_zip#3215), 200), ENSURE_REQUIREMENTS, [id=#15988]
                                             +- Project [ca_zip#3215]
                                                +- Filter (cnt#3216L > 10)
                                                   +- HashAggregate(keys=[ca_zip#3226], functions=[count(1)], output=[ca_zip#3215, cnt#3216L])
                                                      +- Exchange hashpartitioning(ca_zip#3226, 200), ENSURE_REQUIREMENTS, [id=#15981]
                                                         +- HashAggregate(keys=[ca_zip#3226], functions=[partial_count(1)], output=[ca_zip#3226, count#3239L])
                                                            +- Project [ca_zip#3226]
                                                               +- SortMergeJoin [ca_address_sk#3217], [c_current_addr_sk#404], Inner
                                                                  :- Sort [ca_address_sk#3217 ASC NULLS FIRST], false, 0
                                                                  :  +- Exchange hashpartitioning(ca_address_sk#3217, 200), ENSURE_REQUIREMENTS, [id=#15973]
                                                                  :     +- Filter isnotnull(ca_address_sk#3217)
                                                                  :        +- FileScan parquet [ca_address_sk#3217,ca_zip#3226] Batched: true, DataFilters: [isnotnull(ca_address_sk#3217)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                                                                  +- Sort [c_current_addr_sk#404 ASC NULLS FIRST], false, 0
                                                                     +- Exchange hashpartitioning(c_current_addr_sk#404, 200), ENSURE_REQUIREMENTS, [id=#15974]
                                                                        +- Project [c_current_addr_sk#404]
                                                                           +- Filter ((isnotnull(c_preferred_cust_flag#410) AND (c_preferred_cust_flag#410 = Y)) AND isnotnull(c_current_addr_sk#404))
                                                                              +- FileScan parquet [c_current_addr_sk#404,c_preferred_cust_flag#410] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#410), (c_preferred_cust_flag#410 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>
