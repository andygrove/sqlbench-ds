AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#11843 ASC NULLS FIRST,return_rank#11841 ASC NULLS FIRST,currency_rank#11842 ASC NULLS FIRST,item#11838 ASC NULLS FIRST], output=[channel#11843,item#11838,return_ratio#11839,return_rank#11841,currency_rank#11842])
   +- *(41) HashAggregate(keys=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842], functions=[], output=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 20
            +- Exchange hashpartitioning(channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842, 200), ENSURE_REQUIREMENTS, [id=#153690]
               +- *(40) HashAggregate(keys=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842], functions=[], output=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842])
                  +- Union
                     :- *(33) Project [web AS channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842]
                     :  +- *(33) Filter ((return_rank#11841 <= 10) OR (currency_rank#11842 <= 10))
                     :     +- Window [rank(currency_ratio#11840) windowspecdefinition(currency_ratio#11840 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#11842], [currency_ratio#11840 ASC NULLS FIRST]
                     :        +- *(32) Sort [currency_ratio#11840 ASC NULLS FIRST], false, 0
                     :           +- Window [rank(return_ratio#11839) windowspecdefinition(return_ratio#11839 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#11841], [return_ratio#11839 ASC NULLS FIRST]
                     :              +- *(31) Sort [return_ratio#11839 ASC NULLS FIRST], false, 0
                     :                 +- ShuffleQueryStage 16
                     :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#152888]
                     :                       +- *(25) HashAggregate(keys=[ws_item_sk#479], functions=[sum(coalesce(wr_return_quantity#312, 0)), sum(coalesce(ws_quantity#494, 0)), sum(coalesce(cast(wr_return_amt#313 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#505 as decimal(12,2)), 0.00))], output=[item#11838, return_ratio#11839, currency_ratio#11840])
                     :                          +- AQEShuffleRead coalesced
                     :                             +- ShuffleQueryStage 14
                     :                                +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#152519]
                     :                                   +- *(21) HashAggregate(keys=[ws_item_sk#479], functions=[partial_sum(coalesce(wr_return_quantity#312, 0)), partial_sum(coalesce(ws_quantity#494, 0)), partial_sum(coalesce(cast(wr_return_amt#313 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#505 as decimal(12,2)), 0.00))], output=[ws_item_sk#479, sum#12019L, sum#12020L, sum#12021, isEmpty#12022, sum#12023, isEmpty#12024])
                     :                                      +- *(21) Project [ws_item_sk#479, ws_quantity#494, ws_net_paid#505, wr_return_quantity#312, wr_return_amt#313]
                     :                                         +- *(21) SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#612], Inner
                     :                                            :- *(19) Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                     :                                            :  +- AQEShuffleRead coalesced
                     :                                            :     +- ShuffleQueryStage 11
                     :                                            :        +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#151416]
                     :                                            :           +- *(12) Project [ws_sold_date_sk#476, ws_item_sk#479, ws_quantity#494, ws_net_paid#505, wr_return_quantity#312, wr_return_amt#313]
                     :                                            :              +- *(12) SortMergeJoin [ws_order_number#493L, ws_item_sk#479], [wr_order_number#311L, wr_item_sk#300], Inner
                     :                                            :                 :- *(10) Sort [ws_order_number#493L ASC NULLS FIRST, ws_item_sk#479 ASC NULLS FIRST], false, 0
                     :                                            :                 :  +- AQEShuffleRead coalesced
                     :                                            :                 :     +- ShuffleQueryStage 0
                     :                                            :                 :        +- Exchange hashpartitioning(ws_order_number#493L, ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#150472]
                     :                                            :                 :           +- *(1) Project [ws_sold_date_sk#476, ws_item_sk#479, ws_order_number#493L, ws_quantity#494, ws_net_paid#505]
                     :                                            :                 :              +- *(1) Filter ((((((((isnotnull(ws_net_profit#509) AND isnotnull(ws_net_paid#505)) AND isnotnull(ws_quantity#494)) AND (ws_net_profit#509 > 1.00)) AND (ws_net_paid#505 > 0.00)) AND (ws_quantity#494 > 0)) AND isnotnull(ws_order_number#493L)) AND isnotnull(ws_item_sk#479)) AND isnotnull(ws_sold_date_sk#476))
                     :                                            :                 :                 +- *(1) ColumnarToRow
                     :                                            :                 :                    +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_order_number#493L,ws_quantity#494,ws_net_paid#505,ws_net_profit#509] Batched: true, DataFilters: [isnotnull(ws_net_profit#509), isnotnull(ws_net_paid#505), isnotnull(ws_quantity#494), (ws_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:deci...
                     :                                            :                 +- *(11) Sort [wr_order_number#311L ASC NULLS FIRST, wr_item_sk#300 ASC NULLS FIRST], false, 0
                     :                                            :                    +- AQEShuffleRead coalesced
                     :                                            :                       +- ShuffleQueryStage 1
                     :                                            :                          +- Exchange hashpartitioning(wr_order_number#311L, wr_item_sk#300, 200), ENSURE_REQUIREMENTS, [id=#150491]
                     :                                            :                             +- *(2) Filter (((isnotnull(wr_return_amt#313) AND (wr_return_amt#313 > 10000.00)) AND isnotnull(wr_order_number#311L)) AND isnotnull(wr_item_sk#300))
                     :                                            :                                +- *(2) ColumnarToRow
                     :                                            :                                   +- FileScan parquet [wr_item_sk#300,wr_order_number#311L,wr_return_quantity#312,wr_return_amt#313] Batched: true, DataFilters: [isnotnull(wr_return_amt#313), (wr_return_amt#313 > 10000.00), isnotnull(wr_order_number#311L), i..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>
                     :                                            +- *(20) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                     :                                               +- AQEShuffleRead coalesced
                     :                                                  +- ShuffleQueryStage 2
                     :                                                     +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#150514]
                     :                                                        +- *(3) Project [d_date_sk#612]
                     :                                                           +- *(3) Filter ((((isnotnull(d_year#618) AND isnotnull(d_moy#620)) AND (d_year#618 = 2000)) AND (d_moy#620 = 11)) AND isnotnull(d_date_sk#612))
                     :                                                              +- *(3) ColumnarToRow
                     :                                                                 +- FileScan parquet [d_date_sk#612,d_year#618,d_moy#620] Batched: true, DataFilters: [isnotnull(d_year#618), isnotnull(d_moy#620), (d_year#618 = 2000), (d_moy#620 = 11), isnotnull(d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :- *(36) Project [catalog AS channel#11849, item#11844, return_ratio#11845, return_rank#11847, currency_rank#11848]
                     :  +- *(36) Filter ((return_rank#11847 <= 10) OR (currency_rank#11848 <= 10))
                     :     +- Window [rank(currency_ratio#11846) windowspecdefinition(currency_ratio#11846 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#11848], [currency_ratio#11846 ASC NULLS FIRST]
                     :        +- *(35) Sort [currency_ratio#11846 ASC NULLS FIRST], false, 0
                     :           +- Window [rank(return_ratio#11845) windowspecdefinition(return_ratio#11845 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#11847], [return_ratio#11845 ASC NULLS FIRST]
                     :              +- *(34) Sort [return_ratio#11845 ASC NULLS FIRST], false, 0
                     :                 +- ShuffleQueryStage 17
                     :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#153033]
                     :                       +- *(26) HashAggregate(keys=[cs_item_sk#559], functions=[sum(coalesce(cr_return_quantity#363, 0)), sum(coalesce(cs_quantity#562, 0)), sum(coalesce(cast(cr_return_amount#364 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#573 as decimal(12,2)), 0.00))], output=[item#11844, return_ratio#11845, currency_ratio#11846])
                     :                          +- AQEShuffleRead coalesced
                     :                             +- ShuffleQueryStage 15
                     :                                +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#152722]
                     :                                   +- *(24) HashAggregate(keys=[cs_item_sk#559], functions=[partial_sum(coalesce(cr_return_quantity#363, 0)), partial_sum(coalesce(cs_quantity#562, 0)), partial_sum(coalesce(cast(cr_return_amount#364 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#573 as decimal(12,2)), 0.00))], output=[cs_item_sk#559, sum#12031L, sum#12032L, sum#12033, isEmpty#12034, sum#12035, isEmpty#12036])
                     :                                      +- *(24) Project [cs_item_sk#559, cs_quantity#562, cs_net_paid#573, cr_return_quantity#363, cr_return_amount#364]
                     :                                         +- *(24) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#11856], Inner
                     :                                            :- *(22) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                     :                                            :  +- AQEShuffleRead coalesced
                     :                                            :     +- ShuffleQueryStage 12
                     :                                            :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#151863]
                     :                                            :           +- *(15) Project [cs_sold_date_sk#544, cs_item_sk#559, cs_quantity#562, cs_net_paid#573, cr_return_quantity#363, cr_return_amount#364]
                     :                                            :              +- *(15) SortMergeJoin [cs_order_number#561L, cs_item_sk#559], [cr_order_number#362L, cr_item_sk#348], Inner
                     :                                            :                 :- *(13) Sort [cs_order_number#561L ASC NULLS FIRST, cs_item_sk#559 ASC NULLS FIRST], false, 0
                     :                                            :                 :  +- AQEShuffleRead coalesced
                     :                                            :                 :     +- ShuffleQueryStage 3
                     :                                            :                 :        +- Exchange hashpartitioning(cs_order_number#561L, cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#150547]
                     :                                            :                 :           +- *(4) Project [cs_sold_date_sk#544, cs_item_sk#559, cs_order_number#561L, cs_quantity#562, cs_net_paid#573]
                     :                                            :                 :              +- *(4) Filter ((((((((isnotnull(cs_net_profit#577) AND isnotnull(cs_net_paid#573)) AND isnotnull(cs_quantity#562)) AND (cs_net_profit#577 > 1.00)) AND (cs_net_paid#573 > 0.00)) AND (cs_quantity#562 > 0)) AND isnotnull(cs_order_number#561L)) AND isnotnull(cs_item_sk#559)) AND isnotnull(cs_sold_date_sk#544))
                     :                                            :                 :                 +- *(4) ColumnarToRow
                     :                                            :                 :                    +- FileScan parquet [cs_sold_date_sk#544,cs_item_sk#559,cs_order_number#561L,cs_quantity#562,cs_net_paid#573,cs_net_profit#577] Batched: true, DataFilters: [isnotnull(cs_net_profit#577), isnotnull(cs_net_paid#573), isnotnull(cs_quantity#562), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:deci...
                     :                                            :                 +- *(14) Sort [cr_order_number#362L ASC NULLS FIRST, cr_item_sk#348 ASC NULLS FIRST], false, 0
                     :                                            :                    +- AQEShuffleRead coalesced
                     :                                            :                       +- ShuffleQueryStage 4
                     :                                            :                          +- Exchange hashpartitioning(cr_order_number#362L, cr_item_sk#348, 200), ENSURE_REQUIREMENTS, [id=#150566]
                     :                                            :                             +- *(5) Filter (((isnotnull(cr_return_amount#364) AND (cr_return_amount#364 > 10000.00)) AND isnotnull(cr_order_number#362L)) AND isnotnull(cr_item_sk#348))
                     :                                            :                                +- *(5) ColumnarToRow
                     :                                            :                                   +- FileScan parquet [cr_item_sk#348,cr_order_number#362L,cr_return_quantity#363,cr_return_amount#364] Batched: true, DataFilters: [isnotnull(cr_return_amount#364), (cr_return_amount#364 > 10000.00), isnotnull(cr_order_number#36..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>
                     :                                            +- *(23) Sort [d_date_sk#11856 ASC NULLS FIRST], false, 0
                     :                                               +- AQEShuffleRead coalesced
                     :                                                  +- ShuffleQueryStage 6
                     :                                                     +- ReusedExchange [d_date_sk#11856], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#150514]
                     +- *(39) Project [store AS channel#11855, item#11850, return_ratio#11851, return_rank#11853, currency_rank#11854]
                        +- *(39) Filter ((return_rank#11853 <= 10) OR (currency_rank#11854 <= 10))
                           +- Window [rank(currency_ratio#11852) windowspecdefinition(currency_ratio#11852 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#11854], [currency_ratio#11852 ASC NULLS FIRST]
                              +- *(38) Sort [currency_ratio#11852 ASC NULLS FIRST], false, 0
                                 +- Window [rank(return_ratio#11851) windowspecdefinition(return_ratio#11851 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#11853], [return_ratio#11851 ASC NULLS FIRST]
                                    +- *(37) Sort [return_ratio#11851 ASC NULLS FIRST], false, 0
                                       +- ShuffleQueryStage 19
                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#153536]
                                             +- *(30) HashAggregate(keys=[ss_item_sk#254], functions=[sum(coalesce(sr_return_quantity#146, 0)), sum(coalesce(ss_quantity#262, 0)), sum(coalesce(cast(sr_return_amt#147 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#272 as decimal(12,2)), 0.00))], output=[item#11850, return_ratio#11851, currency_ratio#11852])
                                                +- AQEShuffleRead coalesced
                                                   +- ShuffleQueryStage 18
                                                      +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#153395]
                                                         +- *(29) HashAggregate(keys=[ss_item_sk#254], functions=[partial_sum(coalesce(sr_return_quantity#146, 0)), partial_sum(coalesce(ss_quantity#262, 0)), partial_sum(coalesce(cast(sr_return_amt#147 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#272 as decimal(12,2)), 0.00))], output=[ss_item_sk#254, sum#12043L, sum#12044L, sum#12045, isEmpty#12046, sum#12047, isEmpty#12048])
                                                            +- *(29) Project [ss_item_sk#254, ss_quantity#262, ss_net_paid#272, sr_return_quantity#146, sr_return_amt#147]
                                                               +- *(29) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#11884], Inner
                                                                  :- *(27) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                                                                  :  +- AQEShuffleRead coalesced
                                                                  :     +- ShuffleQueryStage 13
                                                                  :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#152280]
                                                                  :           +- *(18) Project [ss_sold_date_sk#252, ss_item_sk#254, ss_quantity#262, ss_net_paid#272, sr_return_quantity#146, sr_return_amt#147]
                                                                  :              +- *(18) SortMergeJoin [ss_ticket_number#261L, ss_item_sk#254], [sr_ticket_number#145L, sr_item_sk#138], Inner
                                                                  :                 :- *(16) Sort [ss_ticket_number#261L ASC NULLS FIRST, ss_item_sk#254 ASC NULLS FIRST], false, 0
                                                                  :                 :  +- AQEShuffleRead coalesced
                                                                  :                 :     +- ShuffleQueryStage 7
                                                                  :                 :        +- Exchange hashpartitioning(ss_ticket_number#261L, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#150624]
                                                                  :                 :           +- *(7) Project [ss_sold_date_sk#252, ss_item_sk#254, ss_ticket_number#261L, ss_quantity#262, ss_net_paid#272]
                                                                  :                 :              +- *(7) Filter ((((((((isnotnull(ss_net_profit#274) AND isnotnull(ss_net_paid#272)) AND isnotnull(ss_quantity#262)) AND (ss_net_profit#274 > 1.00)) AND (ss_net_paid#272 > 0.00)) AND (ss_quantity#262 > 0)) AND isnotnull(ss_ticket_number#261L)) AND isnotnull(ss_item_sk#254)) AND isnotnull(ss_sold_date_sk#252))
                                                                  :                 :                 +- *(7) ColumnarToRow
                                                                  :                 :                    +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_ticket_number#261L,ss_quantity#262,ss_net_paid#272,ss_net_profit#274] Batched: true, DataFilters: [isnotnull(ss_net_profit#274), isnotnull(ss_net_paid#272), isnotnull(ss_quantity#262), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:dec...
                                                                  :                 +- *(17) Sort [sr_ticket_number#145L ASC NULLS FIRST, sr_item_sk#138 ASC NULLS FIRST], false, 0
                                                                  :                    +- AQEShuffleRead coalesced
                                                                  :                       +- ShuffleQueryStage 8
                                                                  :                          +- Exchange hashpartitioning(sr_ticket_number#145L, sr_item_sk#138, 200), ENSURE_REQUIREMENTS, [id=#150643]
                                                                  :                             +- *(8) Filter (((isnotnull(sr_return_amt#147) AND (sr_return_amt#147 > 10000.00)) AND isnotnull(sr_ticket_number#145L)) AND isnotnull(sr_item_sk#138))
                                                                  :                                +- *(8) ColumnarToRow
                                                                  :                                   +- FileScan parquet [sr_item_sk#138,sr_ticket_number#145L,sr_return_quantity#146,sr_return_amt#147] Batched: true, DataFilters: [isnotnull(sr_return_amt#147), (sr_return_amt#147 > 10000.00), isnotnull(sr_ticket_number#145L), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>
                                                                  +- *(28) Sort [d_date_sk#11884 ASC NULLS FIRST], false, 0
                                                                     +- AQEShuffleRead coalesced
                                                                        +- ShuffleQueryStage 10
                                                                           +- ReusedExchange [d_date_sk#11884], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#150514]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#11843 ASC NULLS FIRST,return_rank#11841 ASC NULLS FIRST,currency_rank#11842 ASC NULLS FIRST,item#11838 ASC NULLS FIRST], output=[channel#11843,item#11838,return_ratio#11839,return_rank#11841,currency_rank#11842])
   +- HashAggregate(keys=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842], functions=[], output=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842])
      +- Exchange hashpartitioning(channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842, 200), ENSURE_REQUIREMENTS, [id=#150287]
         +- HashAggregate(keys=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842], functions=[], output=[channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842])
            +- Union
               :- Project [web AS channel#11843, item#11838, return_ratio#11839, return_rank#11841, currency_rank#11842]
               :  +- Filter ((return_rank#11841 <= 10) OR (currency_rank#11842 <= 10))
               :     +- Window [rank(currency_ratio#11840) windowspecdefinition(currency_ratio#11840 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#11842], [currency_ratio#11840 ASC NULLS FIRST]
               :        +- Sort [currency_ratio#11840 ASC NULLS FIRST], false, 0
               :           +- Window [rank(return_ratio#11839) windowspecdefinition(return_ratio#11839 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#11841], [return_ratio#11839 ASC NULLS FIRST]
               :              +- Sort [return_ratio#11839 ASC NULLS FIRST], false, 0
               :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#150220]
               :                    +- HashAggregate(keys=[ws_item_sk#479], functions=[sum(coalesce(wr_return_quantity#312, 0)), sum(coalesce(ws_quantity#494, 0)), sum(coalesce(cast(wr_return_amt#313 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#505 as decimal(12,2)), 0.00))], output=[item#11838, return_ratio#11839, currency_ratio#11840])
               :                       +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#150217]
               :                          +- HashAggregate(keys=[ws_item_sk#479], functions=[partial_sum(coalesce(wr_return_quantity#312, 0)), partial_sum(coalesce(ws_quantity#494, 0)), partial_sum(coalesce(cast(wr_return_amt#313 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#505 as decimal(12,2)), 0.00))], output=[ws_item_sk#479, sum#12019L, sum#12020L, sum#12021, isEmpty#12022, sum#12023, isEmpty#12024])
               :                             +- Project [ws_item_sk#479, ws_quantity#494, ws_net_paid#505, wr_return_quantity#312, wr_return_amt#313]
               :                                +- SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#612], Inner
               :                                   :- Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
               :                                   :  +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#150209]
               :                                   :     +- Project [ws_sold_date_sk#476, ws_item_sk#479, ws_quantity#494, ws_net_paid#505, wr_return_quantity#312, wr_return_amt#313]
               :                                   :        +- SortMergeJoin [ws_order_number#493L, ws_item_sk#479], [wr_order_number#311L, wr_item_sk#300], Inner
               :                                   :           :- Sort [ws_order_number#493L ASC NULLS FIRST, ws_item_sk#479 ASC NULLS FIRST], false, 0
               :                                   :           :  +- Exchange hashpartitioning(ws_order_number#493L, ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#150201]
               :                                   :           :     +- Project [ws_sold_date_sk#476, ws_item_sk#479, ws_order_number#493L, ws_quantity#494, ws_net_paid#505]
               :                                   :           :        +- Filter ((((((((isnotnull(ws_net_profit#509) AND isnotnull(ws_net_paid#505)) AND isnotnull(ws_quantity#494)) AND (ws_net_profit#509 > 1.00)) AND (ws_net_paid#505 > 0.00)) AND (ws_quantity#494 > 0)) AND isnotnull(ws_order_number#493L)) AND isnotnull(ws_item_sk#479)) AND isnotnull(ws_sold_date_sk#476))
               :                                   :           :           +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_order_number#493L,ws_quantity#494,ws_net_paid#505,ws_net_profit#509] Batched: true, DataFilters: [isnotnull(ws_net_profit#509), isnotnull(ws_net_paid#505), isnotnull(ws_quantity#494), (ws_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:deci...
               :                                   :           +- Sort [wr_order_number#311L ASC NULLS FIRST, wr_item_sk#300 ASC NULLS FIRST], false, 0
               :                                   :              +- Exchange hashpartitioning(wr_order_number#311L, wr_item_sk#300, 200), ENSURE_REQUIREMENTS, [id=#150202]
               :                                   :                 +- Filter (((isnotnull(wr_return_amt#313) AND (wr_return_amt#313 > 10000.00)) AND isnotnull(wr_order_number#311L)) AND isnotnull(wr_item_sk#300))
               :                                   :                    +- FileScan parquet [wr_item_sk#300,wr_order_number#311L,wr_return_quantity#312,wr_return_amt#313] Batched: true, DataFilters: [isnotnull(wr_return_amt#313), (wr_return_amt#313 > 10000.00), isnotnull(wr_order_number#311L), i..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>
               :                                   +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
               :                                      +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#150210]
               :                                         +- Project [d_date_sk#612]
               :                                            +- Filter ((((isnotnull(d_year#618) AND isnotnull(d_moy#620)) AND (d_year#618 = 2000)) AND (d_moy#620 = 11)) AND isnotnull(d_date_sk#612))
               :                                               +- FileScan parquet [d_date_sk#612,d_year#618,d_moy#620] Batched: true, DataFilters: [isnotnull(d_year#618), isnotnull(d_moy#620), (d_year#618 = 2000), (d_moy#620 = 11), isnotnull(d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               :- Project [catalog AS channel#11849, item#11844, return_ratio#11845, return_rank#11847, currency_rank#11848]
               :  +- Filter ((return_rank#11847 <= 10) OR (currency_rank#11848 <= 10))
               :     +- Window [rank(currency_ratio#11846) windowspecdefinition(currency_ratio#11846 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#11848], [currency_ratio#11846 ASC NULLS FIRST]
               :        +- Sort [currency_ratio#11846 ASC NULLS FIRST], false, 0
               :           +- Window [rank(return_ratio#11845) windowspecdefinition(return_ratio#11845 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#11847], [return_ratio#11845 ASC NULLS FIRST]
               :              +- Sort [return_ratio#11845 ASC NULLS FIRST], false, 0
               :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#150248]
               :                    +- HashAggregate(keys=[cs_item_sk#559], functions=[sum(coalesce(cr_return_quantity#363, 0)), sum(coalesce(cs_quantity#562, 0)), sum(coalesce(cast(cr_return_amount#364 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#573 as decimal(12,2)), 0.00))], output=[item#11844, return_ratio#11845, currency_ratio#11846])
               :                       +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#150245]
               :                          +- HashAggregate(keys=[cs_item_sk#559], functions=[partial_sum(coalesce(cr_return_quantity#363, 0)), partial_sum(coalesce(cs_quantity#562, 0)), partial_sum(coalesce(cast(cr_return_amount#364 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#573 as decimal(12,2)), 0.00))], output=[cs_item_sk#559, sum#12031L, sum#12032L, sum#12033, isEmpty#12034, sum#12035, isEmpty#12036])
               :                             +- Project [cs_item_sk#559, cs_quantity#562, cs_net_paid#573, cr_return_quantity#363, cr_return_amount#364]
               :                                +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#11856], Inner
               :                                   :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
               :                                   :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#150237]
               :                                   :     +- Project [cs_sold_date_sk#544, cs_item_sk#559, cs_quantity#562, cs_net_paid#573, cr_return_quantity#363, cr_return_amount#364]
               :                                   :        +- SortMergeJoin [cs_order_number#561L, cs_item_sk#559], [cr_order_number#362L, cr_item_sk#348], Inner
               :                                   :           :- Sort [cs_order_number#561L ASC NULLS FIRST, cs_item_sk#559 ASC NULLS FIRST], false, 0
               :                                   :           :  +- Exchange hashpartitioning(cs_order_number#561L, cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#150229]
               :                                   :           :     +- Project [cs_sold_date_sk#544, cs_item_sk#559, cs_order_number#561L, cs_quantity#562, cs_net_paid#573]
               :                                   :           :        +- Filter ((((((((isnotnull(cs_net_profit#577) AND isnotnull(cs_net_paid#573)) AND isnotnull(cs_quantity#562)) AND (cs_net_profit#577 > 1.00)) AND (cs_net_paid#573 > 0.00)) AND (cs_quantity#562 > 0)) AND isnotnull(cs_order_number#561L)) AND isnotnull(cs_item_sk#559)) AND isnotnull(cs_sold_date_sk#544))
               :                                   :           :           +- FileScan parquet [cs_sold_date_sk#544,cs_item_sk#559,cs_order_number#561L,cs_quantity#562,cs_net_paid#573,cs_net_profit#577] Batched: true, DataFilters: [isnotnull(cs_net_profit#577), isnotnull(cs_net_paid#573), isnotnull(cs_quantity#562), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:deci...
               :                                   :           +- Sort [cr_order_number#362L ASC NULLS FIRST, cr_item_sk#348 ASC NULLS FIRST], false, 0
               :                                   :              +- Exchange hashpartitioning(cr_order_number#362L, cr_item_sk#348, 200), ENSURE_REQUIREMENTS, [id=#150230]
               :                                   :                 +- Filter (((isnotnull(cr_return_amount#364) AND (cr_return_amount#364 > 10000.00)) AND isnotnull(cr_order_number#362L)) AND isnotnull(cr_item_sk#348))
               :                                   :                    +- FileScan parquet [cr_item_sk#348,cr_order_number#362L,cr_return_quantity#363,cr_return_amount#364] Batched: true, DataFilters: [isnotnull(cr_return_amount#364), (cr_return_amount#364 > 10000.00), isnotnull(cr_order_number#36..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>
               :                                   +- Sort [d_date_sk#11856 ASC NULLS FIRST], false, 0
               :                                      +- Exchange hashpartitioning(d_date_sk#11856, 200), ENSURE_REQUIREMENTS, [id=#150238]
               :                                         +- Project [d_date_sk#11856]
               :                                            +- Filter ((((isnotnull(d_year#11862) AND isnotnull(d_moy#11864)) AND (d_year#11862 = 2000)) AND (d_moy#11864 = 11)) AND isnotnull(d_date_sk#11856))
               :                                               +- FileScan parquet [d_date_sk#11856,d_year#11862,d_moy#11864] Batched: true, DataFilters: [isnotnull(d_year#11862), isnotnull(d_moy#11864), (d_year#11862 = 2000), (d_moy#11864 = 11), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               +- Project [store AS channel#11855, item#11850, return_ratio#11851, return_rank#11853, currency_rank#11854]
                  +- Filter ((return_rank#11853 <= 10) OR (currency_rank#11854 <= 10))
                     +- Window [rank(currency_ratio#11852) windowspecdefinition(currency_ratio#11852 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#11854], [currency_ratio#11852 ASC NULLS FIRST]
                        +- Sort [currency_ratio#11852 ASC NULLS FIRST], false, 0
                           +- Window [rank(return_ratio#11851) windowspecdefinition(return_ratio#11851 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#11853], [return_ratio#11851 ASC NULLS FIRST]
                              +- Sort [return_ratio#11851 ASC NULLS FIRST], false, 0
                                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#150276]
                                    +- HashAggregate(keys=[ss_item_sk#254], functions=[sum(coalesce(sr_return_quantity#146, 0)), sum(coalesce(ss_quantity#262, 0)), sum(coalesce(cast(sr_return_amt#147 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#272 as decimal(12,2)), 0.00))], output=[item#11850, return_ratio#11851, currency_ratio#11852])
                                       +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#150273]
                                          +- HashAggregate(keys=[ss_item_sk#254], functions=[partial_sum(coalesce(sr_return_quantity#146, 0)), partial_sum(coalesce(ss_quantity#262, 0)), partial_sum(coalesce(cast(sr_return_amt#147 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#272 as decimal(12,2)), 0.00))], output=[ss_item_sk#254, sum#12043L, sum#12044L, sum#12045, isEmpty#12046, sum#12047, isEmpty#12048])
                                             +- Project [ss_item_sk#254, ss_quantity#262, ss_net_paid#272, sr_return_quantity#146, sr_return_amt#147]
                                                +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#11884], Inner
                                                   :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                                                   :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#150265]
                                                   :     +- Project [ss_sold_date_sk#252, ss_item_sk#254, ss_quantity#262, ss_net_paid#272, sr_return_quantity#146, sr_return_amt#147]
                                                   :        +- SortMergeJoin [ss_ticket_number#261L, ss_item_sk#254], [sr_ticket_number#145L, sr_item_sk#138], Inner
                                                   :           :- Sort [ss_ticket_number#261L ASC NULLS FIRST, ss_item_sk#254 ASC NULLS FIRST], false, 0
                                                   :           :  +- Exchange hashpartitioning(ss_ticket_number#261L, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#150257]
                                                   :           :     +- Project [ss_sold_date_sk#252, ss_item_sk#254, ss_ticket_number#261L, ss_quantity#262, ss_net_paid#272]
                                                   :           :        +- Filter ((((((((isnotnull(ss_net_profit#274) AND isnotnull(ss_net_paid#272)) AND isnotnull(ss_quantity#262)) AND (ss_net_profit#274 > 1.00)) AND (ss_net_paid#272 > 0.00)) AND (ss_quantity#262 > 0)) AND isnotnull(ss_ticket_number#261L)) AND isnotnull(ss_item_sk#254)) AND isnotnull(ss_sold_date_sk#252))
                                                   :           :           +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_ticket_number#261L,ss_quantity#262,ss_net_paid#272,ss_net_profit#274] Batched: true, DataFilters: [isnotnull(ss_net_profit#274), isnotnull(ss_net_paid#272), isnotnull(ss_quantity#262), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:dec...
                                                   :           +- Sort [sr_ticket_number#145L ASC NULLS FIRST, sr_item_sk#138 ASC NULLS FIRST], false, 0
                                                   :              +- Exchange hashpartitioning(sr_ticket_number#145L, sr_item_sk#138, 200), ENSURE_REQUIREMENTS, [id=#150258]
                                                   :                 +- Filter (((isnotnull(sr_return_amt#147) AND (sr_return_amt#147 > 10000.00)) AND isnotnull(sr_ticket_number#145L)) AND isnotnull(sr_item_sk#138))
                                                   :                    +- FileScan parquet [sr_item_sk#138,sr_ticket_number#145L,sr_return_quantity#146,sr_return_amt#147] Batched: true, DataFilters: [isnotnull(sr_return_amt#147), (sr_return_amt#147 > 10000.00), isnotnull(sr_ticket_number#145L), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>
                                                   +- Sort [d_date_sk#11884 ASC NULLS FIRST], false, 0
                                                      +- Exchange hashpartitioning(d_date_sk#11884, 200), ENSURE_REQUIREMENTS, [id=#150266]
                                                         +- Project [d_date_sk#11884]
                                                            +- Filter ((((isnotnull(d_year#11890) AND isnotnull(d_moy#11892)) AND (d_year#11890 = 2000)) AND (d_moy#11892 = 11)) AND isnotnull(d_date_sk#11884))
                                                               +- FileScan parquet [d_date_sk#11884,d_year#11890,d_moy#11892] Batched: true, DataFilters: [isnotnull(d_year#11890), isnotnull(d_moy#11892), (d_year#11890 = 2000), (d_moy#11892 = 11), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
