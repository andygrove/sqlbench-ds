AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#8237 ASC NULLS FIRST,s_state#8238 ASC NULLS FIRST], output=[i_item_id#8237,s_state#8238,g_state#8225,agg1#8226,agg2#8227,agg3#8228,agg4#8229])
   +- *(18) HashAggregate(keys=[i_item_id#8237, s_state#8238, spark_grouping_id#8236L], functions=[avg(ss_quantity#262), avg(UnscaledValue(ss_list_price#264)), avg(UnscaledValue(ss_coupon_amt#271)), avg(UnscaledValue(ss_sales_price#265))], output=[i_item_id#8237, s_state#8238, g_state#8225, agg1#8226, agg2#8227, agg3#8228, agg4#8229])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 8
            +- Exchange hashpartitioning(i_item_id#8237, s_state#8238, spark_grouping_id#8236L, 200), ENSURE_REQUIREMENTS, [id=#109655]
               +- *(17) HashAggregate(keys=[i_item_id#8237, s_state#8238, spark_grouping_id#8236L], functions=[partial_avg(ss_quantity#262), partial_avg(UnscaledValue(ss_list_price#264)), partial_avg(UnscaledValue(ss_coupon_amt#271)), partial_avg(UnscaledValue(ss_sales_price#265))], output=[i_item_id#8237, s_state#8238, spark_grouping_id#8236L, sum#8255, count#8256L, sum#8257, count#8258L, sum#8259, count#8260L, sum#8261, count#8262L])
                  +- *(17) Expand [[ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#669, s_state#736, 0], [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#669, null, 1], [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, null, null, 3]], [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#8237, s_state#8238, spark_grouping_id#8236L]
                     +- *(17) Project [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#669, s_state#736]
                        +- *(17) SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
                           :- *(15) Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
                           :  +- AQEShuffleRead coalesced
                           :     +- ShuffleQueryStage 7
                           :        +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#109562]
                           :           +- *(14) Project [ss_item_sk#254, ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, s_state#736]
                           :              +- *(14) SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
                           :                 :- *(12) Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                           :                 :  +- AQEShuffleRead coalesced
                           :                 :     +- ShuffleQueryStage 6
                           :                 :        +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#109446]
                           :                 :           +- *(11) Project [ss_item_sk#254, ss_store_sk#259, ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271]
                           :                 :              +- *(11) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                           :                 :                 :- *(9) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                           :                 :                 :  +- AQEShuffleRead coalesced
                           :                 :                 :     +- ShuffleQueryStage 5
                           :                 :                 :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#109305]
                           :                 :                 :           +- *(8) Project [ss_sold_date_sk#252, ss_item_sk#254, ss_store_sk#259, ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271]
                           :                 :                 :              +- *(8) SortMergeJoin [ss_cdemo_sk#256], [cd_demo_sk#222], Inner
                           :                 :                 :                 :- *(6) Sort [ss_cdemo_sk#256 ASC NULLS FIRST], false, 0
                           :                 :                 :                 :  +- ShuffleQueryStage 0
                           :                 :                 :                 :     +- Exchange hashpartitioning(ss_cdemo_sk#256, 200), ENSURE_REQUIREMENTS, [id=#108770]
                           :                 :                 :                 :        +- *(1) Filter (((isnotnull(ss_cdemo_sk#256) AND isnotnull(ss_sold_date_sk#252)) AND isnotnull(ss_store_sk#259)) AND isnotnull(ss_item_sk#254))
                           :                 :                 :                 :           +- *(1) ColumnarToRow
                           :                 :                 :                 :              +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_cdemo_sk#256,ss_store_sk#259,ss_quantity#262,ss_list_price#264,ss_sales_price#265,ss_coupon_amt#271] Batched: true, DataFilters: [isnotnull(ss_cdemo_sk#256), isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list...
                           :                 :                 :                 +- *(7) Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
                           :                 :                 :                    +- ShuffleQueryStage 1
                           :                 :                 :                       +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#108789]
                           :                 :                 :                          +- *(2) Project [cd_demo_sk#222]
                           :                 :                 :                             +- *(2) Filter ((((((isnotnull(cd_gender#223) AND isnotnull(cd_marital_status#224)) AND isnotnull(cd_education_status#225)) AND (cd_gender#223 = M)) AND (cd_marital_status#224 = M)) AND (cd_education_status#225 = College)) AND isnotnull(cd_demo_sk#222))
                           :                 :                 :                                +- *(2) ColumnarToRow
                           :                 :                 :                                   +- FileScan parquet [cd_demo_sk#222,cd_gender#223,cd_marital_status#224,cd_education_status#225] Batched: true, DataFilters: [isnotnull(cd_gender#223), isnotnull(cd_marital_status#224), isnotnull(cd_education_status#225), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                           :                 :                 +- *(10) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                           :                 :                    +- AQEShuffleRead coalesced
                           :                 :                       +- ShuffleQueryStage 2
                           :                 :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#108814]
                           :                 :                             +- *(3) Project [d_date_sk#612]
                           :                 :                                +- *(3) Filter ((isnotnull(d_year#618) AND (d_year#618 = 1999)) AND isnotnull(d_date_sk#612))
                           :                 :                                   +- *(3) ColumnarToRow
                           :                 :                                      +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 1999), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                           :                 +- *(13) Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
                           :                    +- AQEShuffleRead coalesced
                           :                       +- ShuffleQueryStage 3
                           :                          +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#108837]
                           :                             +- *(4) Filter (s_state#736 IN (GA,MI,SD,OH,MO,SC) AND isnotnull(s_store_sk#712))
                           :                                +- *(4) ColumnarToRow
                           :                                   +- FileScan parquet [s_store_sk#712,s_state#736] Batched: true, DataFilters: [s_state#736 IN (GA,MI,SD,OH,MO,SC), isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [In(s_state, [GA,MI,MO,OH,SC,SD]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                           +- *(16) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                              +- AQEShuffleRead coalesced
                                 +- ShuffleQueryStage 4
                                    +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#108858]
                                       +- *(5) Filter isnotnull(i_item_sk#668)
                                          +- *(5) ColumnarToRow
                                             +- FileScan parquet [i_item_sk#668,i_item_id#669] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#8237 ASC NULLS FIRST,s_state#8238 ASC NULLS FIRST], output=[i_item_id#8237,s_state#8238,g_state#8225,agg1#8226,agg2#8227,agg3#8228,agg4#8229])
   +- HashAggregate(keys=[i_item_id#8237, s_state#8238, spark_grouping_id#8236L], functions=[avg(ss_quantity#262), avg(UnscaledValue(ss_list_price#264)), avg(UnscaledValue(ss_coupon_amt#271)), avg(UnscaledValue(ss_sales_price#265))], output=[i_item_id#8237, s_state#8238, g_state#8225, agg1#8226, agg2#8227, agg3#8228, agg4#8229])
      +- Exchange hashpartitioning(i_item_id#8237, s_state#8238, spark_grouping_id#8236L, 200), ENSURE_REQUIREMENTS, [id=#108687]
         +- HashAggregate(keys=[i_item_id#8237, s_state#8238, spark_grouping_id#8236L], functions=[partial_avg(ss_quantity#262), partial_avg(UnscaledValue(ss_list_price#264)), partial_avg(UnscaledValue(ss_coupon_amt#271)), partial_avg(UnscaledValue(ss_sales_price#265))], output=[i_item_id#8237, s_state#8238, spark_grouping_id#8236L, sum#8255, count#8256L, sum#8257, count#8258L, sum#8259, count#8260L, sum#8261, count#8262L])
            +- Expand [[ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#669, s_state#736, 0], [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#669, null, 1], [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, null, null, 3]], [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#8237, s_state#8238, spark_grouping_id#8236L]
               +- Project [ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, i_item_id#669, s_state#736]
                  +- SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
                     :- Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#108678]
                     :     +- Project [ss_item_sk#254, ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271, s_state#736]
                     :        +- SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
                     :           :- Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                     :           :  +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#108670]
                     :           :     +- Project [ss_item_sk#254, ss_store_sk#259, ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271]
                     :           :        +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                     :           :           :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                     :           :           :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#108662]
                     :           :           :     +- Project [ss_sold_date_sk#252, ss_item_sk#254, ss_store_sk#259, ss_quantity#262, ss_list_price#264, ss_sales_price#265, ss_coupon_amt#271]
                     :           :           :        +- SortMergeJoin [ss_cdemo_sk#256], [cd_demo_sk#222], Inner
                     :           :           :           :- Sort [ss_cdemo_sk#256 ASC NULLS FIRST], false, 0
                     :           :           :           :  +- Exchange hashpartitioning(ss_cdemo_sk#256, 200), ENSURE_REQUIREMENTS, [id=#108654]
                     :           :           :           :     +- Filter (((isnotnull(ss_cdemo_sk#256) AND isnotnull(ss_sold_date_sk#252)) AND isnotnull(ss_store_sk#259)) AND isnotnull(ss_item_sk#254))
                     :           :           :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_cdemo_sk#256,ss_store_sk#259,ss_quantity#262,ss_list_price#264,ss_sales_price#265,ss_coupon_amt#271] Batched: true, DataFilters: [isnotnull(ss_cdemo_sk#256), isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list...
                     :           :           :           +- Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
                     :           :           :              +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#108655]
                     :           :           :                 +- Project [cd_demo_sk#222]
                     :           :           :                    +- Filter ((((((isnotnull(cd_gender#223) AND isnotnull(cd_marital_status#224)) AND isnotnull(cd_education_status#225)) AND (cd_gender#223 = M)) AND (cd_marital_status#224 = M)) AND (cd_education_status#225 = College)) AND isnotnull(cd_demo_sk#222))
                     :           :           :                       +- FileScan parquet [cd_demo_sk#222,cd_gender#223,cd_marital_status#224,cd_education_status#225] Batched: true, DataFilters: [isnotnull(cd_gender#223), isnotnull(cd_marital_status#224), isnotnull(cd_education_status#225), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                     :           :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                     :           :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#108663]
                     :           :                 +- Project [d_date_sk#612]
                     :           :                    +- Filter ((isnotnull(d_year#618) AND (d_year#618 = 1999)) AND isnotnull(d_date_sk#612))
                     :           :                       +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 1999), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :           +- Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
                     :              +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#108671]
                     :                 +- Filter (s_state#736 IN (GA,MI,SD,OH,MO,SC) AND isnotnull(s_store_sk#712))
                     :                    +- FileScan parquet [s_store_sk#712,s_state#736] Batched: true, DataFilters: [s_state#736 IN (GA,MI,SD,OH,MO,SC), isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [In(s_state, [GA,MI,MO,OH,SC,SD]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                     +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#108679]
                           +- Filter isnotnull(i_item_sk#668)
                              +- FileScan parquet [i_item_sk#668,i_item_id#669] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
