AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(48) HashAggregate(keys=[], functions=[sum(sales#7278)], output=[sum(sales)#7452])
   +- ShuffleQueryStage 27
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#90607]
         +- *(47) HashAggregate(keys=[], functions=[partial_sum(sales#7278)], output=[sum#7458, isEmpty#7459])
            +- Union
               :- *(43) Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#562 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#564 as decimal(12,2)))), DecimalType(18,2), true) AS sales#7278]
               :  +- *(43) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#7384], Inner
               :     :- *(41) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
               :     :  +- AQEShuffleRead coalesced
               :     :     +- ShuffleQueryStage 25
               :     :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#89805]
               :     :           +- *(35) Project [cs_sold_date_sk#544, cs_quantity#562, cs_list_price#564]
               :     :              +- *(35) SortMergeJoin [cs_bill_customer_sk#547], [c_customer_sk#7366], LeftSemi
               :     :                 :- *(31) Sort [cs_bill_customer_sk#547 ASC NULLS FIRST], false, 0
               :     :                 :  +- ShuffleQueryStage 23
               :     :                 :     +- Exchange hashpartitioning(cs_bill_customer_sk#547, 200), ENSURE_REQUIREMENTS, [id=#89315]
               :     :                 :        +- *(25) Project [cs_sold_date_sk#544, cs_bill_customer_sk#547, cs_quantity#562, cs_list_price#564]
               :     :                 :           +- *(25) SortMergeJoin [cs_item_sk#559], [item_sk#7285], LeftSemi
               :     :                 :              :- *(21) Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
               :     :                 :              :  +- AQEShuffleRead coalesced
               :     :                 :              :     +- ShuffleQueryStage 0
               :     :                 :              :        +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#85202]
               :     :                 :              :           +- *(1) Filter isnotnull(cs_sold_date_sk#544)
               :     :                 :              :              +- *(1) ColumnarToRow
               :     :                 :              :                 +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559,cs_quantity#562,cs_list_price#564] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
               :     :                 :              +- *(24) Sort [item_sk#7285 ASC NULLS FIRST], false, 0
               :     :                 :                 +- *(24) Project [item_sk#7285]
               :     :                 :                    +- *(24) Filter (cnt#7287L > 4)
               :     :                 :                       +- *(24) HashAggregate(keys=[_groupingexpression#7454, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7285, cnt#7287L])
               :     :                 :                          +- *(24) HashAggregate(keys=[_groupingexpression#7454, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7454, i_item_sk#668, d_date#614, count#7461L])
               :     :                 :                             +- *(24) Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7454]
               :     :                 :                                +- *(24) SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
               :     :                 :                                   :- *(22) Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
               :     :                 :                                   :  +- AQEShuffleRead coalesced
               :     :                 :                                   :     +- ShuffleQueryStage 20
               :     :                 :                                   :        +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#87249]
               :     :                 :                                   :           +- *(17) Project [ss_item_sk#254, d_date#614]
               :     :                 :                                   :              +- *(17) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
               :     :                 :                                   :                 :- *(15) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
               :     :                 :                                   :                 :  +- AQEShuffleRead coalesced
               :     :                 :                                   :                 :     +- ShuffleQueryStage 1
               :     :                 :                                   :                 :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#85219]
               :     :                 :                                   :                 :           +- *(2) Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_item_sk#254))
               :     :                 :                                   :                 :              +- *(2) ColumnarToRow
               :     :                 :                                   :                 :                 +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_item_sk#254)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
               :     :                 :                                   :                 +- *(16) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
               :     :                 :                                   :                    +- AQEShuffleRead coalesced
               :     :                 :                                   :                       +- ShuffleQueryStage 2
               :     :                 :                                   :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#85238]
               :     :                 :                                   :                             +- *(3) Project [d_date_sk#612, d_date#614]
               :     :                 :                                   :                                +- *(3) Filter (d_year#618 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#612))
               :     :                 :                                   :                                   +- *(3) ColumnarToRow
               :     :                 :                                   :                                      +- FileScan parquet [d_date_sk#612,d_date#614,d_year#618] Batched: true, DataFilters: [d_year#618 IN (2000,2001,2002,2003), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
               :     :                 :                                   +- *(23) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
               :     :                 :                                      +- AQEShuffleRead coalesced
               :     :                 :                                         +- ShuffleQueryStage 3
               :     :                 :                                            +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#85261]
               :     :                 :                                               +- *(4) Filter isnotnull(i_item_sk#668)
               :     :                 :                                                  +- *(4) ColumnarToRow
               :     :                 :                                                     +- FileScan parquet [i_item_sk#668,i_item_desc#672] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
               :     :                 +- *(34) Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
               :     :                    +- *(34) Project [c_customer_sk#7366]
               :     :                       +- *(34) Filter (isnotnull(ssales#7290) AND (cast(ssales#7290 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7291, [id=#84772] as decimal(32,6)))), DecimalType(38,8), true)))
               :     :                          :  +- Subquery subquery#7291, [id=#84772]
               :     :                          :     +- AdaptiveSparkPlan isFinalPlan=true
                                                      +- == Final Plan ==
                                                         *(11) HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                         +- ShuffleQueryStage 6
                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#90262]
                                                               +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                                  +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                                     +- AQEShuffleRead coalesced
                                                                        +- ShuffleQueryStage 5
                                                                           +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#90214]
                                                                              +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                                                 +- *(9) Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                                    +- *(9) SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                                       :- *(7) Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                                       :  +- AQEShuffleRead coalesced
                                                                                       :     +- ShuffleQueryStage 4
                                                                                       :        +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#90117]
                                                                                       :           +- *(6) Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                                       :              +- *(6) SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                                       :                 :- *(4) Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                                       :                 :  +- AQEShuffleRead coalesced
                                                                                       :                 :     +- ShuffleQueryStage 0
                                                                                       :                 :        +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#89892]
                                                                                       :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                                       :                 :              +- *(1) ColumnarToRow
                                                                                       :                 :                 +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                       :                    +- AQEShuffleRead coalesced
                                                                                       :                       +- ShuffleQueryStage 2
                                                                                       :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#85306]
                                                                                       +- *(8) Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                                          +- AQEShuffleRead coalesced
                                                                                             +- ShuffleQueryStage 3
                                                                                                +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#89934]
                                                                                                   +- *(3) Project [d_date_sk#7315]
                                                                                                      +- *(3) Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                                         +- *(3) ColumnarToRow
                                                                                                            +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                      +- == Initial Plan ==
                                                         HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#84770]
                                                            +- HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                               +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                                  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84766]
                                                                     +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                                        +- Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                           +- SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                              :- Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                              :  +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#84758]
                                                                              :     +- Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                              :        +- SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                              :           :- Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                              :           :  +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#84750]
                                                                              :           :     +- Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                              :           :        +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                              :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84751]
                                                                              :                 +- Filter isnotnull(c_customer_sk#400)
                                                                              :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                              +- Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                                 +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#84759]
                                                                                    +- Project [d_date_sk#7315]
                                                                                       +- Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                          +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
               :     :                          +- *(34) HashAggregate(keys=[c_customer_sk#7366], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, ssales#7290])
               :     :                             +- *(34) HashAggregate(keys=[c_customer_sk#7366], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, sum#7464, isEmpty#7465])
               :     :                                +- *(34) Project [ss_quantity#7353, ss_sales_price#7356, c_customer_sk#7366]
               :     :                                   +- *(34) SortMergeJoin [ss_customer_sk#7346], [c_customer_sk#7366], Inner
               :     :                                      :- *(32) Sort [ss_customer_sk#7346 ASC NULLS FIRST], false, 0
               :     :                                      :  +- ShuffleQueryStage 4
               :     :                                      :     +- Exchange hashpartitioning(ss_customer_sk#7346, 200), ENSURE_REQUIREMENTS, [id=#85289]
               :     :                                      :        +- *(5) Filter isnotnull(ss_customer_sk#7346)
               :     :                                      :           +- *(5) ColumnarToRow
               :     :                                      :              +- FileScan parquet [ss_customer_sk#7346,ss_quantity#7353,ss_sales_price#7356] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7346)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
               :     :                                      +- *(33) Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
               :     :                                         +- ShuffleQueryStage 5
               :     :                                            +- Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#85306]
               :     :                                               +- *(6) Filter isnotnull(c_customer_sk#7366)
               :     :                                                  +- *(6) ColumnarToRow
               :     :                                                     +- FileScan parquet [c_customer_sk#7366] Batched: true, DataFilters: [isnotnull(c_customer_sk#7366)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
               :     +- *(42) Sort [d_date_sk#7384 ASC NULLS FIRST], false, 0
               :        +- AQEShuffleRead coalesced
               :           +- ShuffleQueryStage 6
               :              +- Exchange hashpartitioning(d_date_sk#7384, 200), ENSURE_REQUIREMENTS, [id=#85336]
               :                 +- *(7) Project [d_date_sk#7384]
               :                    +- *(7) Filter ((((isnotnull(d_year#7390) AND isnotnull(d_moy#7392)) AND (d_year#7390 = 2000)) AND (d_moy#7392 = 7)) AND isnotnull(d_date_sk#7384))
               :                       +- *(7) ColumnarToRow
               :                          +- FileScan parquet [d_date_sk#7384,d_year#7390,d_moy#7392] Batched: true, DataFilters: [isnotnull(d_year#7390), isnotnull(d_moy#7392), (d_year#7390 = 2000), (d_moy#7392 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               +- *(46) Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#494 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#496 as decimal(12,2)))), DecimalType(18,2), true) AS sales#7281]
                  +- *(46) SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#7412], Inner
                     :- *(44) Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                     :  +- AQEShuffleRead coalesced
                     :     +- ShuffleQueryStage 26
                     :        +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#90422]
                     :           +- *(40) Project [ws_sold_date_sk#476, ws_quantity#494, ws_list_price#496]
                     :              +- *(40) SortMergeJoin [ws_bill_customer_sk#480], [c_customer_sk#7366], LeftSemi
                     :                 :- *(36) Sort [ws_bill_customer_sk#480 ASC NULLS FIRST], false, 0
                     :                 :  +- AQEShuffleRead coalesced
                     :                 :     +- ShuffleQueryStage 24
                     :                 :        +- Exchange hashpartitioning(ws_bill_customer_sk#480, 200), ENSURE_REQUIREMENTS, [id=#89405]
                     :                 :           +- *(30) Project [ws_sold_date_sk#476, ws_bill_customer_sk#480, ws_quantity#494, ws_list_price#496]
                     :                 :              +- *(30) SortMergeJoin [ws_item_sk#479], [item_sk#7285], LeftSemi
                     :                 :                 :- *(26) Sort [ws_item_sk#479 ASC NULLS FIRST], false, 0
                     :                 :                 :  +- AQEShuffleRead coalesced
                     :                 :                 :     +- ShuffleQueryStage 7
                     :                 :                 :        +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#85357]
                     :                 :                 :           +- *(8) Filter isnotnull(ws_sold_date_sk#476)
                     :                 :                 :              +- *(8) ColumnarToRow
                     :                 :                 :                 +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_bill_customer_sk#480,ws_quantity#494,ws_list_price#496] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                     :                 :                 +- *(29) Sort [item_sk#7285 ASC NULLS FIRST], false, 0
                     :                 :                    +- *(29) Project [item_sk#7285]
                     :                 :                       +- *(29) Filter (cnt#7287L > 4)
                     :                 :                          +- *(29) HashAggregate(keys=[_groupingexpression#7455, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7285, cnt#7287L])
                     :                 :                             +- *(29) HashAggregate(keys=[_groupingexpression#7455, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7455, i_item_sk#668, d_date#614, count#7461L])
                     :                 :                                +- *(29) Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7455]
                     :                 :                                   +- *(29) SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
                     :                 :                                      :- *(27) Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
                     :                 :                                      :  +- AQEShuffleRead coalesced
                     :                 :                                      :     +- ShuffleQueryStage 22
                     :                 :                                      :        +- ReusedExchange [ss_item_sk#254, d_date#614], Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#87249]
                     :                 :                                      +- *(28) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                     :                 :                                         +- AQEShuffleRead coalesced
                     :                 :                                            +- ShuffleQueryStage 13
                     :                 :                                               +- ReusedExchange [i_item_sk#668, i_item_desc#672], Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#85261]
                     :                 +- *(39) Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
                     :                    +- *(39) Project [c_customer_sk#7366]
                     :                       +- *(39) Filter (isnotnull(ssales#7290) AND (cast(ssales#7290 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7291, [id=#84772] as decimal(32,6)))), DecimalType(38,8), true)))
                     :                          :  +- Subquery subquery#7291, [id=#84772]
                     :                          :     +- AdaptiveSparkPlan isFinalPlan=true
                                                      +- == Final Plan ==
                                                         *(11) HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                         +- ShuffleQueryStage 6
                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#90262]
                                                               +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                                  +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                                     +- AQEShuffleRead coalesced
                                                                        +- ShuffleQueryStage 5
                                                                           +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#90214]
                                                                              +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                                                 +- *(9) Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                                    +- *(9) SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                                       :- *(7) Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                                       :  +- AQEShuffleRead coalesced
                                                                                       :     +- ShuffleQueryStage 4
                                                                                       :        +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#90117]
                                                                                       :           +- *(6) Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                                       :              +- *(6) SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                                       :                 :- *(4) Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                                       :                 :  +- AQEShuffleRead coalesced
                                                                                       :                 :     +- ShuffleQueryStage 0
                                                                                       :                 :        +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#89892]
                                                                                       :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                                       :                 :              +- *(1) ColumnarToRow
                                                                                       :                 :                 +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                                       :                    +- AQEShuffleRead coalesced
                                                                                       :                       +- ShuffleQueryStage 2
                                                                                       :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#85306]
                                                                                       +- *(8) Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                                          +- AQEShuffleRead coalesced
                                                                                             +- ShuffleQueryStage 3
                                                                                                +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#89934]
                                                                                                   +- *(3) Project [d_date_sk#7315]
                                                                                                      +- *(3) Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                                         +- *(3) ColumnarToRow
                                                                                                            +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                      +- == Initial Plan ==
                                                         HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#84770]
                                                            +- HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                               +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                                  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84766]
                                                                     +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                                        +- Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                           +- SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                              :- Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                              :  +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#84758]
                                                                              :     +- Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                              :        +- SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                              :           :- Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                              :           :  +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#84750]
                                                                              :           :     +- Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                              :           :        +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                              :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84751]
                                                                              :                 +- Filter isnotnull(c_customer_sk#400)
                                                                              :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                              +- Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                                 +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#84759]
                                                                                    +- Project [d_date_sk#7315]
                                                                                       +- Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                          +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :                          +- *(39) HashAggregate(keys=[c_customer_sk#7366], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, ssales#7290])
                     :                             +- *(39) HashAggregate(keys=[c_customer_sk#7366], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, sum#7464, isEmpty#7465])
                     :                                +- *(39) Project [ss_quantity#7353, ss_sales_price#7356, c_customer_sk#7366]
                     :                                   +- *(39) SortMergeJoin [ss_customer_sk#7346], [c_customer_sk#7366], Inner
                     :                                      :- *(37) Sort [ss_customer_sk#7346 ASC NULLS FIRST], false, 0
                     :                                      :  +- AQEShuffleRead coalesced
                     :                                      :     +- ShuffleQueryStage 15
                     :                                      :        +- ReusedExchange [ss_customer_sk#7346, ss_quantity#7353, ss_sales_price#7356], Exchange hashpartitioning(ss_customer_sk#7346, 200), ENSURE_REQUIREMENTS, [id=#85289]
                     :                                      +- *(38) Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
                     :                                         +- AQEShuffleRead coalesced
                     :                                            +- ShuffleQueryStage 17
                     :                                               +- ReusedExchange [c_customer_sk#7366], Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#85306]
                     +- *(45) Sort [d_date_sk#7412 ASC NULLS FIRST], false, 0
                        +- AQEShuffleRead coalesced
                           +- ShuffleQueryStage 19
                              +- ReusedExchange [d_date_sk#7412], Exchange hashpartitioning(d_date_sk#7384, 200), ENSURE_REQUIREMENTS, [id=#85336]
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[sum(sales#7278)], output=[sum(sales)#7452])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#84939]
      +- HashAggregate(keys=[], functions=[partial_sum(sales#7278)], output=[sum#7458, isEmpty#7459])
         +- Union
            :- Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#562 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#564 as decimal(12,2)))), DecimalType(18,2), true) AS sales#7278]
            :  +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#7384], Inner
            :     :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
            :     :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#84878]
            :     :     +- Project [cs_sold_date_sk#544, cs_quantity#562, cs_list_price#564]
            :     :        +- SortMergeJoin [cs_bill_customer_sk#547], [c_customer_sk#7366], LeftSemi
            :     :           :- Sort [cs_bill_customer_sk#547 ASC NULLS FIRST], false, 0
            :     :           :  +- Exchange hashpartitioning(cs_bill_customer_sk#547, 200), ENSURE_REQUIREMENTS, [id=#84871]
            :     :           :     +- Project [cs_sold_date_sk#544, cs_bill_customer_sk#547, cs_quantity#562, cs_list_price#564]
            :     :           :        +- SortMergeJoin [cs_item_sk#559], [item_sk#7285], LeftSemi
            :     :           :           :- Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
            :     :           :           :  +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#84853]
            :     :           :           :     +- Filter isnotnull(cs_sold_date_sk#544)
            :     :           :           :        +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559,cs_quantity#562,cs_list_price#564] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
            :     :           :           +- Sort [item_sk#7285 ASC NULLS FIRST], false, 0
            :     :           :              +- Project [item_sk#7285]
            :     :           :                 +- Filter (cnt#7287L > 4)
            :     :           :                    +- HashAggregate(keys=[_groupingexpression#7454, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7285, cnt#7287L])
            :     :           :                       +- HashAggregate(keys=[_groupingexpression#7454, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7454, i_item_sk#668, d_date#614, count#7461L])
            :     :           :                          +- Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7454]
            :     :           :                             +- SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
            :     :           :                                :- Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
            :     :           :                                :  +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#84841]
            :     :           :                                :     +- Project [ss_item_sk#254, d_date#614]
            :     :           :                                :        +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
            :     :           :                                :           :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
            :     :           :                                :           :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#84833]
            :     :           :                                :           :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_item_sk#254))
            :     :           :                                :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_item_sk#254)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
            :     :           :                                :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
            :     :           :                                :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#84834]
            :     :           :                                :                 +- Project [d_date_sk#612, d_date#614]
            :     :           :                                :                    +- Filter (d_year#618 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#612))
            :     :           :                                :                       +- FileScan parquet [d_date_sk#612,d_date#614,d_year#618] Batched: true, DataFilters: [d_year#618 IN (2000,2001,2002,2003), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
            :     :           :                                +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
            :     :           :                                   +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#84842]
            :     :           :                                      +- Filter isnotnull(i_item_sk#668)
            :     :           :                                         +- FileScan parquet [i_item_sk#668,i_item_desc#672] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
            :     :           +- Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
            :     :              +- Project [c_customer_sk#7366]
            :     :                 +- Filter (isnotnull(ssales#7290) AND (cast(ssales#7290 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7291, [id=#84772] as decimal(32,6)))), DecimalType(38,8), true)))
            :     :                    :  +- Subquery subquery#7291, [id=#84772]
            :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true
                                             +- == Final Plan ==
                                                *(11) HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                +- ShuffleQueryStage 6
                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#90262]
                                                      +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                         +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                            +- AQEShuffleRead coalesced
                                                               +- ShuffleQueryStage 5
                                                                  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#90214]
                                                                     +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                                        +- *(9) Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                           +- *(9) SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                              :- *(7) Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                              :  +- AQEShuffleRead coalesced
                                                                              :     +- ShuffleQueryStage 4
                                                                              :        +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#90117]
                                                                              :           +- *(6) Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                              :              +- *(6) SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                              :                 :- *(4) Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                              :                 :  +- AQEShuffleRead coalesced
                                                                              :                 :     +- ShuffleQueryStage 0
                                                                              :                 :        +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#89892]
                                                                              :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                              :                 :              +- *(1) ColumnarToRow
                                                                              :                 :                 +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                              :                    +- AQEShuffleRead coalesced
                                                                              :                       +- ShuffleQueryStage 2
                                                                              :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#85306]
                                                                              +- *(8) Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                                 +- AQEShuffleRead coalesced
                                                                                    +- ShuffleQueryStage 3
                                                                                       +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#89934]
                                                                                          +- *(3) Project [d_date_sk#7315]
                                                                                             +- *(3) Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                                +- *(3) ColumnarToRow
                                                                                                   +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                             +- == Initial Plan ==
                                                HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#84770]
                                                   +- HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                      +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                         +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84766]
                                                            +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                               +- Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                  +- SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                     :- Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                     :  +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#84758]
                                                                     :     +- Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                     :        +- SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                     :           :- Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                     :           :  +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#84750]
                                                                     :           :     +- Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                     :           :        +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                     :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                     :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84751]
                                                                     :                 +- Filter isnotnull(c_customer_sk#400)
                                                                     :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                     +- Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                        +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#84759]
                                                                           +- Project [d_date_sk#7315]
                                                                              +- Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                 +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
            :     :                    +- HashAggregate(keys=[c_customer_sk#7366], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, ssales#7290])
            :     :                       +- HashAggregate(keys=[c_customer_sk#7366], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, sum#7464, isEmpty#7465])
            :     :                          +- Project [ss_quantity#7353, ss_sales_price#7356, c_customer_sk#7366]
            :     :                             +- SortMergeJoin [ss_customer_sk#7346], [c_customer_sk#7366], Inner
            :     :                                :- Sort [ss_customer_sk#7346 ASC NULLS FIRST], false, 0
            :     :                                :  +- Exchange hashpartitioning(ss_customer_sk#7346, 200), ENSURE_REQUIREMENTS, [id=#84859]
            :     :                                :     +- Filter isnotnull(ss_customer_sk#7346)
            :     :                                :        +- FileScan parquet [ss_customer_sk#7346,ss_quantity#7353,ss_sales_price#7356] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7346)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
            :     :                                +- Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
            :     :                                   +- Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#84860]
            :     :                                      +- Filter isnotnull(c_customer_sk#7366)
            :     :                                         +- FileScan parquet [c_customer_sk#7366] Batched: true, DataFilters: [isnotnull(c_customer_sk#7366)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
            :     +- Sort [d_date_sk#7384 ASC NULLS FIRST], false, 0
            :        +- Exchange hashpartitioning(d_date_sk#7384, 200), ENSURE_REQUIREMENTS, [id=#84879]
            :           +- Project [d_date_sk#7384]
            :              +- Filter ((((isnotnull(d_year#7390) AND isnotnull(d_moy#7392)) AND (d_year#7390 = 2000)) AND (d_moy#7392 = 7)) AND isnotnull(d_date_sk#7384))
            :                 +- FileScan parquet [d_date_sk#7384,d_year#7390,d_moy#7392] Batched: true, DataFilters: [isnotnull(d_year#7390), isnotnull(d_moy#7392), (d_year#7390 = 2000), (d_moy#7392 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
            +- Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#494 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#496 as decimal(12,2)))), DecimalType(18,2), true) AS sales#7281]
               +- SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#7412], Inner
                  :- Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#84930]
                  :     +- Project [ws_sold_date_sk#476, ws_quantity#494, ws_list_price#496]
                  :        +- SortMergeJoin [ws_bill_customer_sk#480], [c_customer_sk#7366], LeftSemi
                  :           :- Sort [ws_bill_customer_sk#480 ASC NULLS FIRST], false, 0
                  :           :  +- Exchange hashpartitioning(ws_bill_customer_sk#480, 200), ENSURE_REQUIREMENTS, [id=#84923]
                  :           :     +- Project [ws_sold_date_sk#476, ws_bill_customer_sk#480, ws_quantity#494, ws_list_price#496]
                  :           :        +- SortMergeJoin [ws_item_sk#479], [item_sk#7285], LeftSemi
                  :           :           :- Sort [ws_item_sk#479 ASC NULLS FIRST], false, 0
                  :           :           :  +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#84905]
                  :           :           :     +- Filter isnotnull(ws_sold_date_sk#476)
                  :           :           :        +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_bill_customer_sk#480,ws_quantity#494,ws_list_price#496] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                  :           :           +- Sort [item_sk#7285 ASC NULLS FIRST], false, 0
                  :           :              +- Project [item_sk#7285]
                  :           :                 +- Filter (cnt#7287L > 4)
                  :           :                    +- HashAggregate(keys=[_groupingexpression#7455, i_item_sk#668, d_date#614], functions=[count(1)], output=[item_sk#7285, cnt#7287L])
                  :           :                       +- HashAggregate(keys=[_groupingexpression#7455, i_item_sk#668, d_date#614], functions=[partial_count(1)], output=[_groupingexpression#7455, i_item_sk#668, d_date#614, count#7461L])
                  :           :                          +- Project [d_date#614, i_item_sk#668, substr(i_item_desc#672, 1, 30) AS _groupingexpression#7455]
                  :           :                             +- SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
                  :           :                                :- Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
                  :           :                                :  +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#84893]
                  :           :                                :     +- Project [ss_item_sk#254, d_date#614]
                  :           :                                :        +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                  :           :                                :           :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                  :           :                                :           :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#84885]
                  :           :                                :           :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_item_sk#254))
                  :           :                                :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_item_sk#254)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
                  :           :                                :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :           :                                :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#84886]
                  :           :                                :                 +- Project [d_date_sk#612, d_date#614]
                  :           :                                :                    +- Filter (d_year#618 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#612))
                  :           :                                :                       +- FileScan parquet [d_date_sk#612,d_date#614,d_year#618] Batched: true, DataFilters: [d_year#618 IN (2000,2001,2002,2003), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
                  :           :                                +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                  :           :                                   +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#84894]
                  :           :                                      +- Filter isnotnull(i_item_sk#668)
                  :           :                                         +- FileScan parquet [i_item_sk#668,i_item_desc#672] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
                  :           +- Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
                  :              +- Project [c_customer_sk#7366]
                  :                 +- Filter (isnotnull(ssales#7290) AND (cast(ssales#7290 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#7291, [id=#84772] as decimal(32,6)))), DecimalType(38,8), true)))
                  :                    :  +- Subquery subquery#7291, [id=#84772]
                  :                    :     +- AdaptiveSparkPlan isFinalPlan=true
                                             +- == Final Plan ==
                                                *(11) HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                +- ShuffleQueryStage 6
                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#90262]
                                                      +- *(10) HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                         +- *(10) HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                            +- AQEShuffleRead coalesced
                                                               +- ShuffleQueryStage 5
                                                                  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#90214]
                                                                     +- *(9) HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                                        +- *(9) Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                           +- *(9) SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                              :- *(7) Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                              :  +- AQEShuffleRead coalesced
                                                                              :     +- ShuffleQueryStage 4
                                                                              :        +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#90117]
                                                                              :           +- *(6) Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                              :              +- *(6) SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                              :                 :- *(4) Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                              :                 :  +- AQEShuffleRead coalesced
                                                                              :                 :     +- ShuffleQueryStage 0
                                                                              :                 :        +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#89892]
                                                                              :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                              :                 :              +- *(1) ColumnarToRow
                                                                              :                 :                 +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :                 +- *(5) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                              :                    +- AQEShuffleRead coalesced
                                                                              :                       +- ShuffleQueryStage 2
                                                                              :                          +- ReusedExchange [c_customer_sk#400], Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#85306]
                                                                              +- *(8) Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                                 +- AQEShuffleRead coalesced
                                                                                    +- ShuffleQueryStage 3
                                                                                       +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#89934]
                                                                                          +- *(3) Project [d_date_sk#7315]
                                                                                             +- *(3) Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                                +- *(3) ColumnarToRow
                                                                                                   +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                             +- == Initial Plan ==
                                                HashAggregate(keys=[], functions=[max(csales#7288)], output=[tpcds_cmax#7289])
                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#84770]
                                                   +- HashAggregate(keys=[], functions=[partial_max(csales#7288)], output=[max#7467])
                                                      +- HashAggregate(keys=[c_customer_sk#400], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#7288])
                                                         +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84766]
                                                            +- HashAggregate(keys=[c_customer_sk#400], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7302 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7305 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#400, sum#7470, isEmpty#7471])
                                                               +- Project [ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                  +- SortMergeJoin [ss_sold_date_sk#7292], [d_date_sk#7315], Inner
                                                                     :- Sort [ss_sold_date_sk#7292 ASC NULLS FIRST], false, 0
                                                                     :  +- Exchange hashpartitioning(ss_sold_date_sk#7292, 200), ENSURE_REQUIREMENTS, [id=#84758]
                                                                     :     +- Project [ss_sold_date_sk#7292, ss_quantity#7302, ss_sales_price#7305, c_customer_sk#400]
                                                                     :        +- SortMergeJoin [ss_customer_sk#7295], [c_customer_sk#400], Inner
                                                                     :           :- Sort [ss_customer_sk#7295 ASC NULLS FIRST], false, 0
                                                                     :           :  +- Exchange hashpartitioning(ss_customer_sk#7295, 200), ENSURE_REQUIREMENTS, [id=#84750]
                                                                     :           :     +- Filter (isnotnull(ss_customer_sk#7295) AND isnotnull(ss_sold_date_sk#7292))
                                                                     :           :        +- FileScan parquet [ss_sold_date_sk#7292,ss_customer_sk#7295,ss_quantity#7302,ss_sales_price#7305] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7295), isnotnull(ss_sold_date_sk#7292)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                     :           +- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
                                                                     :              +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#84751]
                                                                     :                 +- Filter isnotnull(c_customer_sk#400)
                                                                     :                    +- FileScan parquet [c_customer_sk#400] Batched: true, DataFilters: [isnotnull(c_customer_sk#400)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                     +- Sort [d_date_sk#7315 ASC NULLS FIRST], false, 0
                                                                        +- Exchange hashpartitioning(d_date_sk#7315, 200), ENSURE_REQUIREMENTS, [id=#84759]
                                                                           +- Project [d_date_sk#7315]
                                                                              +- Filter (d_year#7321 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#7315))
                                                                                 +- FileScan parquet [d_date_sk#7315,d_year#7321] Batched: true, DataFilters: [d_year#7321 IN (2000,2001,2002,2003), isnotnull(d_date_sk#7315)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                  :                    +- HashAggregate(keys=[c_customer_sk#7366], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, ssales#7290])
                  :                       +- HashAggregate(keys=[c_customer_sk#7366], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7353 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#7356 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#7366, sum#7464, isEmpty#7465])
                  :                          +- Project [ss_quantity#7353, ss_sales_price#7356, c_customer_sk#7366]
                  :                             +- SortMergeJoin [ss_customer_sk#7346], [c_customer_sk#7366], Inner
                  :                                :- Sort [ss_customer_sk#7346 ASC NULLS FIRST], false, 0
                  :                                :  +- Exchange hashpartitioning(ss_customer_sk#7346, 200), ENSURE_REQUIREMENTS, [id=#84911]
                  :                                :     +- Filter isnotnull(ss_customer_sk#7346)
                  :                                :        +- FileScan parquet [ss_customer_sk#7346,ss_quantity#7353,ss_sales_price#7356] Batched: true, DataFilters: [isnotnull(ss_customer_sk#7346)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                  :                                +- Sort [c_customer_sk#7366 ASC NULLS FIRST], false, 0
                  :                                   +- Exchange hashpartitioning(c_customer_sk#7366, 200), ENSURE_REQUIREMENTS, [id=#84912]
                  :                                      +- Filter isnotnull(c_customer_sk#7366)
                  :                                         +- FileScan parquet [c_customer_sk#7366] Batched: true, DataFilters: [isnotnull(c_customer_sk#7366)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                  +- Sort [d_date_sk#7412 ASC NULLS FIRST], false, 0
                     +- Exchange hashpartitioning(d_date_sk#7412, 200), ENSURE_REQUIREMENTS, [id=#84931]
                        +- Project [d_date_sk#7412]
                           +- Filter ((((isnotnull(d_year#7418) AND isnotnull(d_moy#7420)) AND (d_year#7418 = 2000)) AND (d_moy#7420 = 7)) AND isnotnull(d_date_sk#7412))
                              +- FileScan parquet [d_date_sk#7412,d_year#7418,d_moy#7420] Batched: true, DataFilters: [isnotnull(d_year#7418), isnotnull(d_moy#7420), (d_year#7418 = 2000), (d_moy#7420 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
