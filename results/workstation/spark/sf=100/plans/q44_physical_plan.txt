AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   LocalTableScan <empty>, [rnk#11037, best_performing#11043, worst_performing#11044]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[rnk#11037 ASC NULLS FIRST], output=[rnk#11037,best_performing#11043,worst_performing#11044])
   +- Project [rnk#11037, i_product_name#689 AS best_performing#11043, i_product_name#11089 AS worst_performing#11044]
      +- SortMergeJoin [item_sk#11038], [i_item_sk#11068], Inner
         :- Sort [item_sk#11038 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(item_sk#11038, 200), ENSURE_REQUIREMENTS, [id=#141234]
         :     +- Project [rnk#11037, item_sk#11038, i_product_name#689]
         :        +- SortMergeJoin [item_sk#11033], [i_item_sk#668], Inner
         :           :- Sort [item_sk#11033 ASC NULLS FIRST], false, 0
         :           :  +- Exchange hashpartitioning(item_sk#11033, 200), ENSURE_REQUIREMENTS, [id=#141227]
         :           :     +- Project [item_sk#11033, rnk#11037, item_sk#11038]
         :           :        +- SortMergeJoin [rnk#11037], [rnk#11042], Inner
         :           :           :- Sort [rnk#11037 ASC NULLS FIRST], false, 0
         :           :           :  +- Project [item_sk#11033, rnk#11037]
         :           :           :     +- Filter ((rnk#11037 < 11) AND isnotnull(item_sk#11033))
         :           :           :        +- Window [rank(rank_col#11034) windowspecdefinition(rank_col#11034 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#11037], [rank_col#11034 ASC NULLS FIRST]
         :           :           :           +- Sort [rank_col#11034 ASC NULLS FIRST], false, 0
         :           :           :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#141204]
         :           :           :                 +- Filter (isnotnull(rank_col#11034) AND (cast(rank_col#11034 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(Subquery subquery#11036, [id=#141165])), DecimalType(13,7), true)))
         :           :           :                    :  +- Subquery subquery#11036, [id=#141165]
         :           :           :                    :     +- AdaptiveSparkPlan isFinalPlan=true
                                                            +- == Final Plan ==
                                                               *(2) HashAggregate(keys=[ss_store_sk#11107], functions=[avg(UnscaledValue(ss_net_profit#11122))], output=[rank_col#11035])
                                                               +- AQEShuffleRead coalesced
                                                                  +- ShuffleQueryStage 0
                                                                     +- Exchange hashpartitioning(ss_store_sk#11107, 200), ENSURE_REQUIREMENTS, [id=#141665]
                                                                        +- *(1) HashAggregate(keys=[ss_store_sk#11107], functions=[partial_avg(UnscaledValue(ss_net_profit#11122))], output=[ss_store_sk#11107, sum#11179, count#11180L])
                                                                           +- *(1) Project [ss_store_sk#11107, ss_net_profit#11122]
                                                                              +- *(1) Filter ((isnotnull(ss_store_sk#11107) AND (ss_store_sk#11107 = 21)) AND isnull(ss_hdemo_sk#11105))
                                                                                 +- *(1) ColumnarToRow
                                                                                    +- FileScan parquet [ss_hdemo_sk#11105,ss_store_sk#11107,ss_net_profit#11122] Batched: true, DataFilters: [isnotnull(ss_store_sk#11107), (ss_store_sk#11107 = 21), isnull(ss_hdemo_sk#11105)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,21), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                                                            +- == Initial Plan ==
                                                               HashAggregate(keys=[ss_store_sk#11107], functions=[avg(UnscaledValue(ss_net_profit#11122))], output=[rank_col#11035])
                                                               +- Exchange hashpartitioning(ss_store_sk#11107, 200), ENSURE_REQUIREMENTS, [id=#141163]
                                                                  +- HashAggregate(keys=[ss_store_sk#11107], functions=[partial_avg(UnscaledValue(ss_net_profit#11122))], output=[ss_store_sk#11107, sum#11179, count#11180L])
                                                                     +- Project [ss_store_sk#11107, ss_net_profit#11122]
                                                                        +- Filter ((isnotnull(ss_store_sk#11107) AND (ss_store_sk#11107 = 21)) AND isnull(ss_hdemo_sk#11105))
                                                                           +- FileScan parquet [ss_hdemo_sk#11105,ss_store_sk#11107,ss_net_profit#11122] Batched: true, DataFilters: [isnotnull(ss_store_sk#11107), (ss_store_sk#11107 = 21), isnull(ss_hdemo_sk#11105)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,21), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
         :           :           :                    +- HashAggregate(keys=[ss_item_sk#254], functions=[avg(UnscaledValue(ss_net_profit#274))], output=[item_sk#11033, rank_col#11034])
         :           :           :                       +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#141200]
         :           :           :                          +- HashAggregate(keys=[ss_item_sk#254], functions=[partial_avg(UnscaledValue(ss_net_profit#274))], output=[ss_item_sk#254, sum#11171, count#11172L])
         :           :           :                             +- Project [ss_item_sk#254, ss_net_profit#274]
         :           :           :                                +- Filter (isnotnull(ss_store_sk#259) AND (ss_store_sk#259 = 21))
         :           :           :                                   +- FileScan parquet [ss_item_sk#254,ss_store_sk#259,ss_net_profit#274] Batched: true, DataFilters: [isnotnull(ss_store_sk#259), (ss_store_sk#259 = 21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,21)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
         :           :           +- Sort [rnk#11042 ASC NULLS FIRST], false, 0
         :           :              +- Project [item_sk#11038, rnk#11042]
         :           :                 +- Filter ((rnk#11042 < 11) AND isnotnull(item_sk#11038))
         :           :                    +- Window [rank(rank_col#11039) windowspecdefinition(rank_col#11039 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#11042], [rank_col#11039 DESC NULLS LAST]
         :           :                       +- Sort [rank_col#11039 DESC NULLS LAST], false, 0
         :           :                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#141213]
         :           :                             +- Filter (isnotnull(rank_col#11039) AND (cast(rank_col#11039 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(Subquery subquery#11041, [id=#141178])), DecimalType(13,7), true)))
         :           :                                :  +- Subquery subquery#11041, [id=#141178]
         :           :                                :     +- AdaptiveSparkPlan isFinalPlan=false
         :           :                                :        +- HashAggregate(keys=[ss_store_sk#11130], functions=[avg(UnscaledValue(ss_net_profit#11145))], output=[rank_col#11040])
         :           :                                :           +- Exchange hashpartitioning(ss_store_sk#11130, 200), ENSURE_REQUIREMENTS, [id=#141176]
         :           :                                :              +- HashAggregate(keys=[ss_store_sk#11130], functions=[partial_avg(UnscaledValue(ss_net_profit#11145))], output=[ss_store_sk#11130, sum#11183, count#11184L])
         :           :                                :                 +- Project [ss_store_sk#11130, ss_net_profit#11145]
         :           :                                :                    +- Filter ((isnotnull(ss_store_sk#11130) AND (ss_store_sk#11130 = 21)) AND isnull(ss_hdemo_sk#11128))
         :           :                                :                       +- FileScan parquet [ss_hdemo_sk#11128,ss_store_sk#11130,ss_net_profit#11145] Batched: true, DataFilters: [isnotnull(ss_store_sk#11130), (ss_store_sk#11130 = 21), isnull(ss_hdemo_sk#11128)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,21), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
         :           :                                +- HashAggregate(keys=[ss_item_sk#11047], functions=[avg(UnscaledValue(ss_net_profit#11067))], output=[item_sk#11038, rank_col#11039])
         :           :                                   +- Exchange hashpartitioning(ss_item_sk#11047, 200), ENSURE_REQUIREMENTS, [id=#141209]
         :           :                                      +- HashAggregate(keys=[ss_item_sk#11047], functions=[partial_avg(UnscaledValue(ss_net_profit#11067))], output=[ss_item_sk#11047, sum#11175, count#11176L])
         :           :                                         +- Project [ss_item_sk#11047, ss_net_profit#11067]
         :           :                                            +- Filter (isnotnull(ss_store_sk#11052) AND (ss_store_sk#11052 = 21))
         :           :                                               +- FileScan parquet [ss_item_sk#11047,ss_store_sk#11052,ss_net_profit#11067] Batched: true, DataFilters: [isnotnull(ss_store_sk#11052), (ss_store_sk#11052 = 21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,21)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
         :           +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
         :              +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#141226]
         :                 +- Filter isnotnull(i_item_sk#668)
         :                    +- FileScan parquet [i_item_sk#668,i_product_name#689] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>
         +- Sort [i_item_sk#11068 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(i_item_sk#11068, 200), ENSURE_REQUIREMENTS, [id=#141235]
               +- Filter isnotnull(i_item_sk#11068)
                  +- FileScan parquet [i_item_sk#11068,i_product_name#11089] Batched: true, DataFilters: [isnotnull(i_item_sk#11068)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>
