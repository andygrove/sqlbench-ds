AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(23) Sort [d_week_seq1#891 ASC NULLS FIRST], true, 0
   +- AQEShuffleRead coalesced
      +- ShuffleQueryStage 12
         +- Exchange rangepartitioning(d_week_seq1#891 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#2809]
            +- *(22) Project [d_week_seq1#891, round(CheckOverflow((promote_precision(sun_sales1#892) / promote_precision(sun_sales2#900)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#981, round(CheckOverflow((promote_precision(mon_sales1#893) / promote_precision(mon_sales2#901)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#982, round(CheckOverflow((promote_precision(tue_sales1#894) / promote_precision(tue_sales2#902)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#983, round(CheckOverflow((promote_precision(wed_sales1#895) / promote_precision(wed_sales2#903)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#984, round(CheckOverflow((promote_precision(thu_sales1#896) / promote_precision(thu_sales2#904)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#985, round(CheckOverflow((promote_precision(fri_sales1#897) / promote_precision(fri_sales2#905)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#986, round(CheckOverflow((promote_precision(sat_sales1#898) / promote_precision(sat_sales2#906)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#987]
               +- *(22) SortMergeJoin [d_week_seq1#891], [(d_week_seq2#899 - 53)], Inner
                  :- *(20) Project [d_week_seq#616 AS d_week_seq1#891, sun_sales#911 AS sun_sales1#892, mon_sales#912 AS mon_sales1#893, tue_sales#913 AS tue_sales1#894, wed_sales#914 AS wed_sales1#895, thu_sales#915 AS thu_sales1#896, fri_sales#916 AS fri_sales1#897, sat_sales#917 AS sat_sales1#898]
                  :  +- *(20) SortMergeJoin [d_week_seq#616], [d_week_seq#922], Inner
                  :     :- *(18) Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
                  :     :  +- *(18) HashAggregate(keys=[d_week_seq#616], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sun_sales#911, mon_sales#912, tue_sales#913, wed_sales#914, thu_sales#915, fri_sales#916, sat_sales#917])
                  :     :     +- AQEShuffleRead coalesced
                  :     :        +- ShuffleQueryStage 8
                  :     :           +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#2486]
                  :     :              +- *(11) HashAggregate(keys=[d_week_seq#616], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sum#1003L, sum#1004L, sum#1005L, sum#1006L, sum#1007L, sum#1008L, sum#1009L])
                  :     :                 +- *(11) Project [sales_price#908, d_week_seq#616, d_day_name#626]
                  :     :                    +- *(11) SortMergeJoin [sold_date_sk#907], [d_date_sk#612], Inner
                  :     :                       :- *(9) Sort [sold_date_sk#907 ASC NULLS FIRST], false, 0
                  :     :                       :  +- AQEShuffleRead coalesced
                  :     :                       :     +- ShuffleQueryStage 0
                  :     :                       :        +- Exchange hashpartitioning(sold_date_sk#907, 200), ENSURE_REQUIREMENTS, [id=#1879]
                  :     :                       :           +- Union
                  :     :                       :              :- *(1) Project [ws_sold_date_sk#476 AS sold_date_sk#907, ws_ext_sales_price#499 AS sales_price#908]
                  :     :                       :              :  +- *(1) Filter isnotnull(ws_sold_date_sk#476)
                  :     :                       :              :     +- *(1) ColumnarToRow
                  :     :                       :              :        +- FileScan parquet [ws_sold_date_sk#476,ws_ext_sales_price#499] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_ext_sales_price:decimal(7,2)>
                  :     :                       :              +- *(2) Project [cs_sold_date_sk#544 AS sold_date_sk#909, cs_ext_sales_price#567 AS sales_price#910]
                  :     :                       :                 +- *(2) Filter isnotnull(cs_sold_date_sk#544)
                  :     :                       :                    +- *(2) ColumnarToRow
                  :     :                       :                       +- FileScan parquet [cs_sold_date_sk#544,cs_ext_sales_price#567] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_ext_sales_price:decimal(7,2)>
                  :     :                       +- *(10) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :     :                          +- AQEShuffleRead coalesced
                  :     :                             +- ShuffleQueryStage 1
                  :     :                                +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#1906]
                  :     :                                   +- *(3) Filter (isnotnull(d_date_sk#612) AND isnotnull(d_week_seq#616))
                  :     :                                      +- *(3) ColumnarToRow
                  :     :                                         +- FileScan parquet [d_date_sk#612,d_week_seq#616,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_date_sk#612), isnotnull(d_week_seq#616)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
                  :     +- *(19) Sort [d_week_seq#922 ASC NULLS FIRST], false, 0
                  :        +- AQEShuffleRead coalesced
                  :           +- ShuffleQueryStage 2
                  :              +- Exchange hashpartitioning(d_week_seq#922, 200), ENSURE_REQUIREMENTS, [id=#1931]
                  :                 +- *(4) Project [d_week_seq#922]
                  :                    +- *(4) Filter ((isnotnull(d_year#924) AND (d_year#924 = 2001)) AND isnotnull(d_week_seq#922))
                  :                       +- *(4) ColumnarToRow
                  :                          +- FileScan parquet [d_week_seq#922,d_year#924] Batched: true, DataFilters: [isnotnull(d_year#924), (d_year#924 = 2001), isnotnull(d_week_seq#922)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_week_seq)], ReadSchema: struct<d_week_seq:int,d_year:int>
                  +- *(21) Sort [(d_week_seq2#899 - 53) ASC NULLS FIRST], false, 0
                     +- AQEShuffleRead coalesced
                        +- ShuffleQueryStage 11
                           +- Exchange hashpartitioning((d_week_seq2#899 - 53), 200), ENSURE_REQUIREMENTS, [id=#2708]
                              +- *(17) Project [d_week_seq#616 AS d_week_seq2#899, sun_sales#911 AS sun_sales2#900, mon_sales#912 AS mon_sales2#901, tue_sales#913 AS tue_sales2#902, wed_sales#914 AS wed_sales2#903, thu_sales#915 AS thu_sales2#904, fri_sales#916 AS fri_sales2#905, sat_sales#917 AS sat_sales2#906]
                                 +- *(17) SortMergeJoin [d_week_seq#616], [d_week_seq#950], Inner
                                    :- *(15) Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
                                    :  +- *(15) HashAggregate(keys=[d_week_seq#616], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sun_sales#911, mon_sales#912, tue_sales#913, wed_sales#914, thu_sales#915, fri_sales#916, sat_sales#917])
                                    :     +- AQEShuffleRead coalesced
                                    :        +- ShuffleQueryStage 10
                                    :           +- ReusedExchange [d_week_seq#616, sum#1017L, sum#1018L, sum#1019L, sum#1020L, sum#1021L, sum#1022L, sum#1023L], Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#2486]
                                    +- *(16) Sort [d_week_seq#950 ASC NULLS FIRST], false, 0
                                       +- AQEShuffleRead coalesced
                                          +- ShuffleQueryStage 7
                                             +- Exchange hashpartitioning(d_week_seq#950, 200), ENSURE_REQUIREMENTS, [id=#2020]
                                                +- *(8) Project [d_week_seq#950]
                                                   +- *(8) Filter ((isnotnull(d_year#952) AND (d_year#952 = 2002)) AND isnotnull(d_week_seq#950))
                                                      +- *(8) ColumnarToRow
                                                         +- FileScan parquet [d_week_seq#950,d_year#952] Batched: true, DataFilters: [isnotnull(d_year#952), (d_year#952 = 2002), isnotnull(d_week_seq#950)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_week_seq)], ReadSchema: struct<d_week_seq:int,d_year:int>
+- == Initial Plan ==
   Sort [d_week_seq1#891 ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(d_week_seq1#891 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#1754]
      +- Project [d_week_seq1#891, round(CheckOverflow((promote_precision(sun_sales1#892) / promote_precision(sun_sales2#900)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#981, round(CheckOverflow((promote_precision(mon_sales1#893) / promote_precision(mon_sales2#901)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#982, round(CheckOverflow((promote_precision(tue_sales1#894) / promote_precision(tue_sales2#902)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#983, round(CheckOverflow((promote_precision(wed_sales1#895) / promote_precision(wed_sales2#903)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#984, round(CheckOverflow((promote_precision(thu_sales1#896) / promote_precision(thu_sales2#904)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#985, round(CheckOverflow((promote_precision(fri_sales1#897) / promote_precision(fri_sales2#905)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#986, round(CheckOverflow((promote_precision(sat_sales1#898) / promote_precision(sat_sales2#906)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#987]
         +- SortMergeJoin [d_week_seq1#891], [(d_week_seq2#899 - 53)], Inner
            :- Project [d_week_seq#616 AS d_week_seq1#891, sun_sales#911 AS sun_sales1#892, mon_sales#912 AS mon_sales1#893, tue_sales#913 AS tue_sales1#894, wed_sales#914 AS wed_sales1#895, thu_sales#915 AS thu_sales1#896, fri_sales#916 AS fri_sales1#897, sat_sales#917 AS sat_sales1#898]
            :  +- SortMergeJoin [d_week_seq#616], [d_week_seq#922], Inner
            :     :- Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
            :     :  +- HashAggregate(keys=[d_week_seq#616], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sun_sales#911, mon_sales#912, tue_sales#913, wed_sales#914, thu_sales#915, fri_sales#916, sat_sales#917])
            :     :     +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#1720]
            :     :        +- HashAggregate(keys=[d_week_seq#616], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sum#1003L, sum#1004L, sum#1005L, sum#1006L, sum#1007L, sum#1008L, sum#1009L])
            :     :           +- Project [sales_price#908, d_week_seq#616, d_day_name#626]
            :     :              +- SortMergeJoin [sold_date_sk#907], [d_date_sk#612], Inner
            :     :                 :- Sort [sold_date_sk#907 ASC NULLS FIRST], false, 0
            :     :                 :  +- Exchange hashpartitioning(sold_date_sk#907, 200), ENSURE_REQUIREMENTS, [id=#1712]
            :     :                 :     +- Union
            :     :                 :        :- Project [ws_sold_date_sk#476 AS sold_date_sk#907, ws_ext_sales_price#499 AS sales_price#908]
            :     :                 :        :  +- Filter isnotnull(ws_sold_date_sk#476)
            :     :                 :        :     +- FileScan parquet [ws_sold_date_sk#476,ws_ext_sales_price#499] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_ext_sales_price:decimal(7,2)>
            :     :                 :        +- Project [cs_sold_date_sk#544 AS sold_date_sk#909, cs_ext_sales_price#567 AS sales_price#910]
            :     :                 :           +- Filter isnotnull(cs_sold_date_sk#544)
            :     :                 :              +- FileScan parquet [cs_sold_date_sk#544,cs_ext_sales_price#567] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_ext_sales_price:decimal(7,2)>
            :     :                 +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
            :     :                    +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#1713]
            :     :                       +- Filter (isnotnull(d_date_sk#612) AND isnotnull(d_week_seq#616))
            :     :                          +- FileScan parquet [d_date_sk#612,d_week_seq#616,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_date_sk#612), isnotnull(d_week_seq#616)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
            :     +- Sort [d_week_seq#922 ASC NULLS FIRST], false, 0
            :        +- Exchange hashpartitioning(d_week_seq#922, 200), ENSURE_REQUIREMENTS, [id=#1724]
            :           +- Project [d_week_seq#922]
            :              +- Filter ((isnotnull(d_year#924) AND (d_year#924 = 2001)) AND isnotnull(d_week_seq#922))
            :                 +- FileScan parquet [d_week_seq#922,d_year#924] Batched: true, DataFilters: [isnotnull(d_year#924), (d_year#924 = 2001), isnotnull(d_week_seq#922)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_week_seq)], ReadSchema: struct<d_week_seq:int,d_year:int>
            +- Sort [(d_week_seq2#899 - 53) ASC NULLS FIRST], false, 0
               +- Exchange hashpartitioning((d_week_seq2#899 - 53), 200), ENSURE_REQUIREMENTS, [id=#1749]
                  +- Project [d_week_seq#616 AS d_week_seq2#899, sun_sales#911 AS sun_sales2#900, mon_sales#912 AS mon_sales2#901, tue_sales#913 AS tue_sales2#902, wed_sales#914 AS wed_sales2#903, thu_sales#915 AS thu_sales2#904, fri_sales#916 AS fri_sales2#905, sat_sales#917 AS sat_sales2#906]
                     +- SortMergeJoin [d_week_seq#616], [d_week_seq#950], Inner
                        :- Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
                        :  +- HashAggregate(keys=[d_week_seq#616], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sun_sales#911, mon_sales#912, tue_sales#913, wed_sales#914, thu_sales#915, fri_sales#916, sat_sales#917])
                        :     +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#1738]
                        :        +- HashAggregate(keys=[d_week_seq#616], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN sales_price#908 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN sales_price#908 END))], output=[d_week_seq#616, sum#1017L, sum#1018L, sum#1019L, sum#1020L, sum#1021L, sum#1022L, sum#1023L])
                        :           +- Project [sales_price#908, d_week_seq#616, d_day_name#626]
                        :              +- SortMergeJoin [sold_date_sk#907], [d_date_sk#612], Inner
                        :                 :- Sort [sold_date_sk#907 ASC NULLS FIRST], false, 0
                        :                 :  +- Exchange hashpartitioning(sold_date_sk#907, 200), ENSURE_REQUIREMENTS, [id=#1730]
                        :                 :     +- Union
                        :                 :        :- Project [ws_sold_date_sk#476 AS sold_date_sk#907, ws_ext_sales_price#499 AS sales_price#908]
                        :                 :        :  +- Filter isnotnull(ws_sold_date_sk#476)
                        :                 :        :     +- FileScan parquet [ws_sold_date_sk#476,ws_ext_sales_price#499] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_ext_sales_price:decimal(7,2)>
                        :                 :        +- Project [cs_sold_date_sk#544 AS sold_date_sk#909, cs_ext_sales_price#567 AS sales_price#910]
                        :                 :           +- Filter isnotnull(cs_sold_date_sk#544)
                        :                 :              +- FileScan parquet [cs_sold_date_sk#544,cs_ext_sales_price#567] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_ext_sales_price:decimal(7,2)>
                        :                 +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                        :                    +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#1731]
                        :                       +- Filter (isnotnull(d_date_sk#612) AND isnotnull(d_week_seq#616))
                        :                          +- FileScan parquet [d_date_sk#612,d_week_seq#616,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_date_sk#612), isnotnull(d_week_seq#616)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
                        +- Sort [d_week_seq#950 ASC NULLS FIRST], false, 0
                           +- Exchange hashpartitioning(d_week_seq#950, 200), ENSURE_REQUIREMENTS, [id=#1742]
                              +- Project [d_week_seq#950]
                                 +- Filter ((isnotnull(d_year#952) AND (d_year#952 = 2002)) AND isnotnull(d_week_seq#950))
                                    +- FileScan parquet [d_week_seq#950,d_year#952] Batched: true, DataFilters: [isnotnull(d_year#952), (d_year#952 = 2002), isnotnull(d_week_seq#950)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_week_seq)], ReadSchema: struct<d_week_seq:int,d_year:int>
