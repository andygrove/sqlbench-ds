AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[qoh#7244 ASC NULLS FIRST,i_product_name#7251 ASC NULLS FIRST,i_brand#7252 ASC NULLS FIRST,i_class#7253 ASC NULLS FIRST,i_category#7254 ASC NULLS FIRST], output=[i_product_name#7251,i_brand#7252,i_class#7253,i_category#7254,qoh#7244])
   +- *(10) HashAggregate(keys=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L], functions=[avg(inv_quantity_on_hand#439)], output=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, qoh#7244])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 4
            +- Exchange hashpartitioning(i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L, 200), ENSURE_REQUIREMENTS, [id=#84389]
               +- *(9) HashAggregate(keys=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L], functions=[partial_avg(inv_quantity_on_hand#439)], output=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L, sum#7262, count#7263L])
                  +- *(9) Expand [[inv_quantity_on_hand#439, i_product_name#689, i_brand#676, i_class#678, i_category#680, 0], [inv_quantity_on_hand#439, i_product_name#689, i_brand#676, i_class#678, null, 1], [inv_quantity_on_hand#439, i_product_name#689, i_brand#676, null, null, 3], [inv_quantity_on_hand#439, i_product_name#689, null, null, null, 7], [inv_quantity_on_hand#439, null, null, null, null, 15]], [inv_quantity_on_hand#439, i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L]
                     +- *(9) Project [inv_quantity_on_hand#439, i_product_name#689, i_brand#676, i_class#678, i_category#680]
                        +- *(9) SortMergeJoin [inv_item_sk#437], [i_item_sk#668], Inner
                           :- *(7) Sort [inv_item_sk#437 ASC NULLS FIRST], false, 0
                           :  +- AQEShuffleRead coalesced
                           :     +- ShuffleQueryStage 3
                           :        +- Exchange hashpartitioning(inv_item_sk#437, 200), ENSURE_REQUIREMENTS, [id=#84296]
                           :           +- *(6) Project [inv_item_sk#437, inv_quantity_on_hand#439]
                           :              +- *(6) SortMergeJoin [inv_date_sk#436], [d_date_sk#612], Inner
                           :                 :- *(4) Sort [inv_date_sk#436 ASC NULLS FIRST], false, 0
                           :                 :  +- AQEShuffleRead coalesced
                           :                 :     +- ShuffleQueryStage 0
                           :                 :        +- Exchange hashpartitioning(inv_date_sk#436, 200), ENSURE_REQUIREMENTS, [id=#84060]
                           :                 :           +- *(1) Filter (isnotnull(inv_date_sk#436) AND isnotnull(inv_item_sk#437))
                           :                 :              +- *(1) ColumnarToRow
                           :                 :                 +- FileScan parquet [inv_date_sk#436,inv_item_sk#437,inv_quantity_on_hand#439] Batched: true, DataFilters: [isnotnull(inv_date_sk#436), isnotnull(inv_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/inventory.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>
                           :                 +- *(5) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                           :                    +- AQEShuffleRead coalesced
                           :                       +- ShuffleQueryStage 1
                           :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#84079]
                           :                             +- *(2) Project [d_date_sk#612]
                           :                                +- *(2) Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1204)) AND (d_month_seq#615 <= 1215)) AND isnotnull(d_date_sk#612))
                           :                                   +- *(2) ColumnarToRow
                           :                                      +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1204), (d_month_seq#615 <= 1215), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1204), LessThanOrEqual(d_month_seq,1215),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                           +- *(8) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                              +- AQEShuffleRead coalesced
                                 +- ShuffleQueryStage 2
                                    +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#84102]
                                       +- *(3) Filter isnotnull(i_item_sk#668)
                                          +- *(3) ColumnarToRow
                                             +- FileScan parquet [i_item_sk#668,i_brand#676,i_class#678,i_category#680,i_product_name#689] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[qoh#7244 ASC NULLS FIRST,i_product_name#7251 ASC NULLS FIRST,i_brand#7252 ASC NULLS FIRST,i_class#7253 ASC NULLS FIRST,i_category#7254 ASC NULLS FIRST], output=[i_product_name#7251,i_brand#7252,i_class#7253,i_category#7254,qoh#7244])
   +- HashAggregate(keys=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L], functions=[avg(inv_quantity_on_hand#439)], output=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, qoh#7244])
      +- Exchange hashpartitioning(i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L, 200), ENSURE_REQUIREMENTS, [id=#84009]
         +- HashAggregate(keys=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L], functions=[partial_avg(inv_quantity_on_hand#439)], output=[i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L, sum#7262, count#7263L])
            +- Expand [[inv_quantity_on_hand#439, i_product_name#689, i_brand#676, i_class#678, i_category#680, 0], [inv_quantity_on_hand#439, i_product_name#689, i_brand#676, i_class#678, null, 1], [inv_quantity_on_hand#439, i_product_name#689, i_brand#676, null, null, 3], [inv_quantity_on_hand#439, i_product_name#689, null, null, null, 7], [inv_quantity_on_hand#439, null, null, null, null, 15]], [inv_quantity_on_hand#439, i_product_name#7251, i_brand#7252, i_class#7253, i_category#7254, spark_grouping_id#7250L]
               +- Project [inv_quantity_on_hand#439, i_product_name#689, i_brand#676, i_class#678, i_category#680]
                  +- SortMergeJoin [inv_item_sk#437], [i_item_sk#668], Inner
                     :- Sort [inv_item_sk#437 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(inv_item_sk#437, 200), ENSURE_REQUIREMENTS, [id=#84000]
                     :     +- Project [inv_item_sk#437, inv_quantity_on_hand#439]
                     :        +- SortMergeJoin [inv_date_sk#436], [d_date_sk#612], Inner
                     :           :- Sort [inv_date_sk#436 ASC NULLS FIRST], false, 0
                     :           :  +- Exchange hashpartitioning(inv_date_sk#436, 200), ENSURE_REQUIREMENTS, [id=#83992]
                     :           :     +- Filter (isnotnull(inv_date_sk#436) AND isnotnull(inv_item_sk#437))
                     :           :        +- FileScan parquet [inv_date_sk#436,inv_item_sk#437,inv_quantity_on_hand#439] Batched: true, DataFilters: [isnotnull(inv_date_sk#436), isnotnull(inv_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/inventory.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>
                     :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                     :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#83993]
                     :                 +- Project [d_date_sk#612]
                     :                    +- Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1204)) AND (d_month_seq#615 <= 1215)) AND isnotnull(d_date_sk#612))
                     :                       +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1204), (d_month_seq#615 <= 1215), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1204), LessThanOrEqual(d_month_seq,1215),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                     +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#84001]
                           +- Filter isnotnull(i_item_sk#668)
                              +- FileScan parquet [i_item_sk#668,i_brand#676,i_class#678,i_category#680,i_product_name#689] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>
