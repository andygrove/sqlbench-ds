AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#717 ASC NULLS FIRST,s_store_id#713 ASC NULLS FIRST,sun_sales#10958 ASC NULLS FIRST,mon_sales#10959 ASC NULLS FIRST,tue_sales#10960 ASC NULLS FIRST,wed_sales#10961 ASC NULLS FIRST,thu_sales#10962 ASC NULLS FIRST,fri_sales#10963 ASC NULLS FIRST,sat_sales#10964 ASC NULLS FIRST], output=[s_store_name#717,s_store_id#713,sun_sales#10958,mon_sales#10959,tue_sales#10960,wed_sales#10961,thu_sales#10962,fri_sales#10963,sat_sales#10964])
   +- *(10) HashAggregate(keys=[s_store_name#717, s_store_id#713], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[s_store_name#717, s_store_id#713, sun_sales#10958, mon_sales#10959, tue_sales#10960, wed_sales#10961, thu_sales#10962, fri_sales#10963, sat_sales#10964])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 4
            +- Exchange hashpartitioning(s_store_name#717, s_store_id#713, 200), ENSURE_REQUIREMENTS, [id=#141014]
               +- *(9) HashAggregate(keys=[s_store_name#717, s_store_id#713], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[s_store_name#717, s_store_id#713, sum#10988L, sum#10989L, sum#10990L, sum#10991L, sum#10992L, sum#10993L, sum#10994L])
                  +- *(9) Project [d_day_name#626, ss_sales_price#265, s_store_id#713, s_store_name#717]
                     +- *(9) SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
                        :- *(7) Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                        :  +- AQEShuffleRead coalesced
                        :     +- ShuffleQueryStage 3
                        :        +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#140930]
                        :           +- *(6) Project [d_day_name#626, ss_store_sk#259, ss_sales_price#265]
                        :              +- *(6) SortMergeJoin [d_date_sk#612], [ss_sold_date_sk#252], Inner
                        :                 :- *(4) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                        :                 :  +- AQEShuffleRead coalesced
                        :                 :     +- ShuffleQueryStage 0
                        :                 :        +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#140707]
                        :                 :           +- *(1) Project [d_date_sk#612, d_day_name#626]
                        :                 :              +- *(1) Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
                        :                 :                 +- *(1) ColumnarToRow
                        :                 :                    +- FileScan parquet [d_date_sk#612,d_year#618,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_day_name:string>
                        :                 +- *(5) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                        :                    +- AQEShuffleRead coalesced
                        :                       +- ShuffleQueryStage 1
                        :                          +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#140726]
                        :                             +- *(2) Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                        :                                +- *(2) ColumnarToRow
                        :                                   +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                        +- *(8) Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
                           +- AQEShuffleRead coalesced
                              +- ShuffleQueryStage 2
                                 +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#140749]
                                    +- *(3) Project [s_store_sk#712, s_store_id#713, s_store_name#717]
                                       +- *(3) Filter ((isnotnull(s_gmt_offset#739) AND (s_gmt_offset#739 = -5.00)) AND isnotnull(s_store_sk#712))
                                          +- *(3) ColumnarToRow
                                             +- FileScan parquet [s_store_sk#712,s_store_id#713,s_store_name#717,s_gmt_offset#739] Batched: true, DataFilters: [isnotnull(s_gmt_offset#739), (s_gmt_offset#739 = -5.00), isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string,s_gmt_offset:decimal(5,2)>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#717 ASC NULLS FIRST,s_store_id#713 ASC NULLS FIRST,sun_sales#10958 ASC NULLS FIRST,mon_sales#10959 ASC NULLS FIRST,tue_sales#10960 ASC NULLS FIRST,wed_sales#10961 ASC NULLS FIRST,thu_sales#10962 ASC NULLS FIRST,fri_sales#10963 ASC NULLS FIRST,sat_sales#10964 ASC NULLS FIRST], output=[s_store_name#717,s_store_id#713,sun_sales#10958,mon_sales#10959,tue_sales#10960,wed_sales#10961,thu_sales#10962,fri_sales#10963,sat_sales#10964])
   +- HashAggregate(keys=[s_store_name#717, s_store_id#713], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[s_store_name#717, s_store_id#713, sun_sales#10958, mon_sales#10959, tue_sales#10960, wed_sales#10961, thu_sales#10962, fri_sales#10963, sat_sales#10964])
      +- Exchange hashpartitioning(s_store_name#717, s_store_id#713, 200), ENSURE_REQUIREMENTS, [id=#140654]
         +- HashAggregate(keys=[s_store_name#717, s_store_id#713], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[s_store_name#717, s_store_id#713, sum#10988L, sum#10989L, sum#10990L, sum#10991L, sum#10992L, sum#10993L, sum#10994L])
            +- Project [d_day_name#626, ss_sales_price#265, s_store_id#713, s_store_name#717]
               +- SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
                  :- Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#140646]
                  :     +- Project [d_day_name#626, ss_store_sk#259, ss_sales_price#265]
                  :        +- SortMergeJoin [d_date_sk#612], [ss_sold_date_sk#252], Inner
                  :           :- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :           :  +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#140638]
                  :           :     +- Project [d_date_sk#612, d_day_name#626]
                  :           :        +- Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
                  :           :           +- FileScan parquet [d_date_sk#612,d_year#618,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_day_name:string>
                  :           +- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                  :              +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#140639]
                  :                 +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                  :                    +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                  +- Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
                     +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#140647]
                        +- Project [s_store_sk#712, s_store_id#713, s_store_name#717]
                           +- Filter ((isnotnull(s_gmt_offset#739) AND (s_gmt_offset#739 = -5.00)) AND isnotnull(s_store_sk#712))
                              +- FileScan parquet [s_store_sk#712,s_store_id#713,s_store_name#717,s_gmt_offset#739] Batched: true, DataFilters: [isnotnull(s_gmt_offset#739), (s_gmt_offset#739 = -5.00), isnotnull(s_store_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string,s_gmt_offset:decimal(5,2)>
