AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#18062 ASC NULLS FIRST,customer_last_name#18064 ASC NULLS FIRST,customer_first_name#18063 ASC NULLS FIRST], output=[customer_id#18062,customer_first_name#18063,customer_last_name#18064])
   +- *(47) Project [customer_id#18062, customer_first_name#18063, customer_last_name#18064]
      +- *(47) SortMergeJoin [customer_id#17970], [customer_id#18074], Inner, (CASE WHEN (year_total#18455 > 0.0) THEN (year_total#18078 / year_total#18455) END > CASE WHEN (year_total#17974 > 0.0) THEN (year_total#18066 / year_total#17974) END)
         :- *(45) Project [customer_id#17970, year_total#17974, customer_id#18062, customer_first_name#18063, customer_last_name#18064, year_total#18066, year_total#18455]
         :  +- *(45) SortMergeJoin [customer_id#17970], [customer_id#18451], Inner
         :     :- *(43) SortMergeJoin [customer_id#17970], [customer_id#18062], Inner
         :     :  :- *(41) Sort [customer_id#17970 ASC NULLS FIRST], false, 0
         :     :  :  +- AQEShuffleRead coalesced
         :     :  :     +- ShuffleQueryStage 31
         :     :  :        +- Exchange hashpartitioning(customer_id#17970, 200), ENSURE_REQUIREMENTS, [id=#224359]
         :     :  :           +- *(39) Filter (isnotnull(year_total#17974) AND (year_total#17974 > 0.0))
         :     :  :              +- *(39) HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618], functions=[stddev_samp(cast(ss_net_paid#272 as double))], output=[customer_id#17970, year_total#17974])
         :     :  :                 +- AQEShuffleRead coalesced
         :     :  :                    +- ShuffleQueryStage 27
         :     :  :                       +- Exchange hashpartitioning(c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618, 200), ENSURE_REQUIREMENTS, [id=#224061]
         :     :  :                          +- *(33) HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618], functions=[partial_stddev_samp(cast(ss_net_paid#272 as double))], output=[c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618, n#18085, avg#18086, m2#18087])
         :     :  :                             +- *(33) Project [c_customer_id#401, c_first_name#408, c_last_name#409, ss_net_paid#272, d_year#618]
         :     :  :                                +- *(33) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :     :  :                                   :- *(31) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :     :  :                                   :  +- AQEShuffleRead coalesced
         :     :  :                                   :     +- ShuffleQueryStage 19
         :     :  :                                   :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#223276]
         :     :  :                                   :           +- *(15) Project [c_customer_id#401, c_first_name#408, c_last_name#409, ss_sold_date_sk#252, ss_net_paid#272]
         :     :  :                                   :              +- *(15) SortMergeJoin [c_customer_sk#400], [ss_customer_sk#255], Inner
         :     :  :                                   :                 :- *(13) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
         :     :  :                                   :                 :  +- AQEShuffleRead coalesced
         :     :  :                                   :                 :     +- ShuffleQueryStage 0
         :     :  :                                   :                 :        +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#221941]
         :     :  :                                   :                 :           +- *(1) Filter (isnotnull(c_customer_sk#400) AND isnotnull(c_customer_id#401))
         :     :  :                                   :                 :              +- *(1) ColumnarToRow
         :     :  :                                   :                 :                 +- FileScan parquet [c_customer_sk#400,c_customer_id#401,c_first_name#408,c_last_name#409] Batched: true, DataFilters: [isnotnull(c_customer_sk#400), isnotnull(c_customer_id#401)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :     :  :                                   :                 +- *(14) Sort [ss_customer_sk#255 ASC NULLS FIRST], false, 0
         :     :  :                                   :                    +- AQEShuffleRead coalesced
         :     :  :                                   :                       +- ShuffleQueryStage 1
         :     :  :                                   :                          +- Exchange hashpartitioning(ss_customer_sk#255, 200), ENSURE_REQUIREMENTS, [id=#221958]
         :     :  :                                   :                             +- *(2) Filter (isnotnull(ss_customer_sk#255) AND isnotnull(ss_sold_date_sk#252))
         :     :  :                                   :                                +- *(2) ColumnarToRow
         :     :  :                                   :                                   +- FileScan parquet [ss_sold_date_sk#252,ss_customer_sk#255,ss_net_paid#272] Batched: true, DataFilters: [isnotnull(ss_customer_sk#255), isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:decimal(7,2)>
         :     :  :                                   +- *(32) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :     :  :                                      +- AQEShuffleRead coalesced
         :     :  :                                         +- ShuffleQueryStage 2
         :     :  :                                            +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#221979]
         :     :  :                                               +- *(3) Filter (((isnotnull(d_year#618) AND (d_year#618 = 2001)) AND d_year#618 IN (2001,2002)) AND isnotnull(d_date_sk#612))
         :     :  :                                                  +- *(3) ColumnarToRow
         :     :  :                                                     +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2001), d_year#618 IN (2001,2002), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :  +- *(42) Sort [customer_id#18062 ASC NULLS FIRST], false, 0
         :     :     +- AQEShuffleRead coalesced
         :     :        +- ShuffleQueryStage 32
         :     :           +- Exchange hashpartitioning(customer_id#18062, 200), ENSURE_REQUIREMENTS, [id=#224543]
         :     :              +- *(40) HashAggregate(keys=[c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162], functions=[stddev_samp(cast(ss_net_paid#18153 as double))], output=[customer_id#18062, customer_first_name#18063, customer_last_name#18064, year_total#18066])
         :     :                 +- AQEShuffleRead coalesced
         :     :                    +- ShuffleQueryStage 28
         :     :                       +- Exchange hashpartitioning(c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162, 200), ENSURE_REQUIREMENTS, [id=#224108]
         :     :                          +- *(36) HashAggregate(keys=[c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162], functions=[partial_stddev_samp(cast(ss_net_paid#18153 as double))], output=[c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162, n#18189, avg#18190, m2#18191])
         :     :                             +- *(36) Project [c_customer_id#18116, c_first_name#18123, c_last_name#18124, ss_net_paid#18153, d_year#18162]
         :     :                                +- *(36) SortMergeJoin [ss_sold_date_sk#18133], [d_date_sk#18156], Inner
         :     :                                   :- *(34) Sort [ss_sold_date_sk#18133 ASC NULLS FIRST], false, 0
         :     :                                   :  +- AQEShuffleRead coalesced
         :     :                                   :     +- ShuffleQueryStage 21
         :     :                                   :        +- ReusedExchange [c_customer_id#18116, c_first_name#18123, c_last_name#18124, ss_sold_date_sk#18133, ss_net_paid#18153], Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#223276]
         :     :                                   +- *(35) Sort [d_date_sk#18156 ASC NULLS FIRST], false, 0
         :     :                                      +- AQEShuffleRead coalesced
         :     :                                         +- ShuffleQueryStage 7
         :     :                                            +- Exchange hashpartitioning(d_date_sk#18156, 200), ENSURE_REQUIREMENTS, [id=#222087]
         :     :                                               +- *(6) Filter (((isnotnull(d_year#18162) AND (d_year#18162 = 2002)) AND d_year#18162 IN (2001,2002)) AND isnotnull(d_date_sk#18156))
         :     :                                                  +- *(6) ColumnarToRow
         :     :                                                     +- FileScan parquet [d_date_sk#18156,d_year#18162] Batched: true, DataFilters: [isnotnull(d_year#18162), (d_year#18162 = 2002), d_year#18162 IN (2001,2002), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     +- *(44) Sort [customer_id#18451 ASC NULLS FIRST], false, 0
         :        +- AQEShuffleRead coalesced
         :           +- ShuffleQueryStage 29
         :              +- Exchange hashpartitioning(customer_id#18451, 200), ENSURE_REQUIREMENTS, [id=#224224]
         :                 +- *(37) Project [customer_id#17976 AS customer_id#18451, year_total#17980 AS year_total#18455]
         :                    +- *(37) Filter (isnotnull(year_total#17980) AND (year_total#17980 > 0.0))
         :                       +- *(37) HashAggregate(keys=[c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421], functions=[stddev_samp(cast(ws_net_paid#18410 as double))], output=[customer_id#17976, year_total#17980])
         :                          +- AQEShuffleRead coalesced
         :                             +- ShuffleQueryStage 25
         :                                +- Exchange hashpartitioning(c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421, 200), ENSURE_REQUIREMENTS, [id=#223850]
         :                                   +- *(27) HashAggregate(keys=[c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421], functions=[partial_stddev_samp(cast(ws_net_paid#18410 as double))], output=[c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421, n#18448, avg#18449, m2#18450])
         :                                      +- *(27) Project [c_customer_id#18364, c_first_name#18371, c_last_name#18372, ws_net_paid#18410, d_year#18421]
         :                                         +- *(27) SortMergeJoin [ws_sold_date_sk#18381], [d_date_sk#18415], Inner
         :                                            :- *(25) Sort [ws_sold_date_sk#18381 ASC NULLS FIRST], false, 0
         :                                            :  +- AQEShuffleRead coalesced
         :                                            :     +- ShuffleQueryStage 22
         :                                            :        +- Exchange hashpartitioning(ws_sold_date_sk#18381, 200), ENSURE_REQUIREMENTS, [id=#223583]
         :                                            :           +- *(21) Project [c_customer_id#18364, c_first_name#18371, c_last_name#18372, ws_sold_date_sk#18381, ws_net_paid#18410]
         :                                            :              +- *(21) SortMergeJoin [c_customer_sk#18363], [ws_bill_customer_sk#18385], Inner
         :                                            :                 :- *(19) Sort [c_customer_sk#18363 ASC NULLS FIRST], false, 0
         :                                            :                 :  +- AQEShuffleRead coalesced
         :                                            :                 :     +- ShuffleQueryStage 9
         :                                            :                 :        +- ReusedExchange [c_customer_sk#18363, c_customer_id#18364, c_first_name#18371, c_last_name#18372], Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#221941]
         :                                            :                 +- *(20) Sort [ws_bill_customer_sk#18385 ASC NULLS FIRST], false, 0
         :                                            :                    +- AQEShuffleRead coalesced
         :                                            :                       +- ShuffleQueryStage 10
         :                                            :                          +- Exchange hashpartitioning(ws_bill_customer_sk#18385, 200), ENSURE_REQUIREMENTS, [id=#222176]
         :                                            :                             +- *(8) Filter (isnotnull(ws_bill_customer_sk#18385) AND isnotnull(ws_sold_date_sk#18381))
         :                                            :                                +- *(8) ColumnarToRow
         :                                            :                                   +- FileScan parquet [ws_sold_date_sk#18381,ws_bill_customer_sk#18385,ws_net_paid#18410] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#18385), isnotnull(ws_sold_date_sk#18381)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>
         :                                            +- *(26) Sort [d_date_sk#18415 ASC NULLS FIRST], false, 0
         :                                               +- AQEShuffleRead coalesced
         :                                                  +- ShuffleQueryStage 12
         :                                                     +- ReusedExchange [d_date_sk#18415, d_year#18421], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#221979]
         +- *(46) Sort [customer_id#18074 ASC NULLS FIRST], false, 0
            +- AQEShuffleRead coalesced
               +- ShuffleQueryStage 30
                  +- Exchange hashpartitioning(customer_id#18074, 200), ENSURE_REQUIREMENTS, [id=#224294]
                     +- *(38) HashAggregate(keys=[c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592], functions=[stddev_samp(cast(ws_net_paid#18581 as double))], output=[customer_id#18074, year_total#18078])
                        +- AQEShuffleRead coalesced
                           +- ShuffleQueryStage 26
                              +- Exchange hashpartitioning(c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592, 200), ENSURE_REQUIREMENTS, [id=#223914]
                                 +- *(30) HashAggregate(keys=[c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592], functions=[partial_stddev_samp(cast(ws_net_paid#18581 as double))], output=[c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592, n#18619, avg#18620, m2#18621])
                                    +- *(30) Project [c_customer_id#18535, c_first_name#18542, c_last_name#18543, ws_net_paid#18581, d_year#18592]
                                       +- *(30) SortMergeJoin [ws_sold_date_sk#18552], [d_date_sk#18586], Inner
                                          :- *(28) Sort [ws_sold_date_sk#18552 ASC NULLS FIRST], false, 0
                                          :  +- AQEShuffleRead coalesced
                                          :     +- ShuffleQueryStage 24
                                          :        +- ReusedExchange [c_customer_id#18535, c_first_name#18542, c_last_name#18543, ws_sold_date_sk#18552, ws_net_paid#18581], Exchange hashpartitioning(ws_sold_date_sk#18381, 200), ENSURE_REQUIREMENTS, [id=#223583]
                                          +- *(29) Sort [d_date_sk#18586 ASC NULLS FIRST], false, 0
                                             +- AQEShuffleRead coalesced
                                                +- ShuffleQueryStage 18
                                                   +- ReusedExchange [d_date_sk#18586, d_year#18592], Exchange hashpartitioning(d_date_sk#18156, 200), ENSURE_REQUIREMENTS, [id=#222087]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#18062 ASC NULLS FIRST,customer_last_name#18064 ASC NULLS FIRST,customer_first_name#18063 ASC NULLS FIRST], output=[customer_id#18062,customer_first_name#18063,customer_last_name#18064])
   +- Project [customer_id#18062, customer_first_name#18063, customer_last_name#18064]
      +- SortMergeJoin [customer_id#17970], [customer_id#18074], Inner, (CASE WHEN (year_total#18455 > 0.0) THEN (year_total#18078 / year_total#18455) END > CASE WHEN (year_total#17974 > 0.0) THEN (year_total#18066 / year_total#17974) END)
         :- Project [customer_id#17970, year_total#17974, customer_id#18062, customer_first_name#18063, customer_last_name#18064, year_total#18066, year_total#18455]
         :  +- SortMergeJoin [customer_id#17970], [customer_id#18451], Inner
         :     :- SortMergeJoin [customer_id#17970], [customer_id#18062], Inner
         :     :  :- Sort [customer_id#17970 ASC NULLS FIRST], false, 0
         :     :  :  +- Exchange hashpartitioning(customer_id#17970, 200), ENSURE_REQUIREMENTS, [id=#221833]
         :     :  :     +- Filter (isnotnull(year_total#17974) AND (year_total#17974 > 0.0))
         :     :  :        +- HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618], functions=[stddev_samp(cast(ss_net_paid#272 as double))], output=[customer_id#17970, year_total#17974])
         :     :  :           +- Exchange hashpartitioning(c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618, 200), ENSURE_REQUIREMENTS, [id=#221809]
         :     :  :              +- HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618], functions=[partial_stddev_samp(cast(ss_net_paid#272 as double))], output=[c_customer_id#401, c_first_name#408, c_last_name#409, d_year#618, n#18085, avg#18086, m2#18087])
         :     :  :                 +- Project [c_customer_id#401, c_first_name#408, c_last_name#409, ss_net_paid#272, d_year#618]
         :     :  :                    +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :     :  :                       :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :     :  :                       :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#221801]
         :     :  :                       :     +- Project [c_customer_id#401, c_first_name#408, c_last_name#409, ss_sold_date_sk#252, ss_net_paid#272]
         :     :  :                       :        +- SortMergeJoin [c_customer_sk#400], [ss_customer_sk#255], Inner
         :     :  :                       :           :- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
         :     :  :                       :           :  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#221793]
         :     :  :                       :           :     +- Filter (isnotnull(c_customer_sk#400) AND isnotnull(c_customer_id#401))
         :     :  :                       :           :        +- FileScan parquet [c_customer_sk#400,c_customer_id#401,c_first_name#408,c_last_name#409] Batched: true, DataFilters: [isnotnull(c_customer_sk#400), isnotnull(c_customer_id#401)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :     :  :                       :           +- Sort [ss_customer_sk#255 ASC NULLS FIRST], false, 0
         :     :  :                       :              +- Exchange hashpartitioning(ss_customer_sk#255, 200), ENSURE_REQUIREMENTS, [id=#221794]
         :     :  :                       :                 +- Filter (isnotnull(ss_customer_sk#255) AND isnotnull(ss_sold_date_sk#252))
         :     :  :                       :                    +- FileScan parquet [ss_sold_date_sk#252,ss_customer_sk#255,ss_net_paid#272] Batched: true, DataFilters: [isnotnull(ss_customer_sk#255), isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:decimal(7,2)>
         :     :  :                       +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :     :  :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#221802]
         :     :  :                             +- Filter (((isnotnull(d_year#618) AND (d_year#618 = 2001)) AND d_year#618 IN (2001,2002)) AND isnotnull(d_date_sk#612))
         :     :  :                                +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2001), d_year#618 IN (2001,2002), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :  +- Sort [customer_id#18062 ASC NULLS FIRST], false, 0
         :     :     +- Exchange hashpartitioning(customer_id#18062, 200), ENSURE_REQUIREMENTS, [id=#221834]
         :     :        +- HashAggregate(keys=[c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162], functions=[stddev_samp(cast(ss_net_paid#18153 as double))], output=[customer_id#18062, customer_first_name#18063, customer_last_name#18064, year_total#18066])
         :     :           +- Exchange hashpartitioning(c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162, 200), ENSURE_REQUIREMENTS, [id=#221829]
         :     :              +- HashAggregate(keys=[c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162], functions=[partial_stddev_samp(cast(ss_net_paid#18153 as double))], output=[c_customer_id#18116, c_first_name#18123, c_last_name#18124, d_year#18162, n#18189, avg#18190, m2#18191])
         :     :                 +- Project [c_customer_id#18116, c_first_name#18123, c_last_name#18124, ss_net_paid#18153, d_year#18162]
         :     :                    +- SortMergeJoin [ss_sold_date_sk#18133], [d_date_sk#18156], Inner
         :     :                       :- Sort [ss_sold_date_sk#18133 ASC NULLS FIRST], false, 0
         :     :                       :  +- Exchange hashpartitioning(ss_sold_date_sk#18133, 200), ENSURE_REQUIREMENTS, [id=#221821]
         :     :                       :     +- Project [c_customer_id#18116, c_first_name#18123, c_last_name#18124, ss_sold_date_sk#18133, ss_net_paid#18153]
         :     :                       :        +- SortMergeJoin [c_customer_sk#18115], [ss_customer_sk#18136], Inner
         :     :                       :           :- Sort [c_customer_sk#18115 ASC NULLS FIRST], false, 0
         :     :                       :           :  +- Exchange hashpartitioning(c_customer_sk#18115, 200), ENSURE_REQUIREMENTS, [id=#221813]
         :     :                       :           :     +- Filter (isnotnull(c_customer_sk#18115) AND isnotnull(c_customer_id#18116))
         :     :                       :           :        +- FileScan parquet [c_customer_sk#18115,c_customer_id#18116,c_first_name#18123,c_last_name#18124] Batched: true, DataFilters: [isnotnull(c_customer_sk#18115), isnotnull(c_customer_id#18116)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :     :                       :           +- Sort [ss_customer_sk#18136 ASC NULLS FIRST], false, 0
         :     :                       :              +- Exchange hashpartitioning(ss_customer_sk#18136, 200), ENSURE_REQUIREMENTS, [id=#221814]
         :     :                       :                 +- Filter (isnotnull(ss_customer_sk#18136) AND isnotnull(ss_sold_date_sk#18133))
         :     :                       :                    +- FileScan parquet [ss_sold_date_sk#18133,ss_customer_sk#18136,ss_net_paid#18153] Batched: true, DataFilters: [isnotnull(ss_customer_sk#18136), isnotnull(ss_sold_date_sk#18133)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:decimal(7,2)>
         :     :                       +- Sort [d_date_sk#18156 ASC NULLS FIRST], false, 0
         :     :                          +- Exchange hashpartitioning(d_date_sk#18156, 200), ENSURE_REQUIREMENTS, [id=#221822]
         :     :                             +- Filter (((isnotnull(d_year#18162) AND (d_year#18162 = 2002)) AND d_year#18162 IN (2001,2002)) AND isnotnull(d_date_sk#18156))
         :     :                                +- FileScan parquet [d_date_sk#18156,d_year#18162] Batched: true, DataFilters: [isnotnull(d_year#18162), (d_year#18162 = 2002), d_year#18162 IN (2001,2002), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     +- Sort [customer_id#18451 ASC NULLS FIRST], false, 0
         :        +- Exchange hashpartitioning(customer_id#18451, 200), ENSURE_REQUIREMENTS, [id=#221861]
         :           +- Project [customer_id#17976 AS customer_id#18451, year_total#17980 AS year_total#18455]
         :              +- Filter (isnotnull(year_total#17980) AND (year_total#17980 > 0.0))
         :                 +- HashAggregate(keys=[c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421], functions=[stddev_samp(cast(ws_net_paid#18410 as double))], output=[customer_id#17976, year_total#17980])
         :                    +- Exchange hashpartitioning(c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421, 200), ENSURE_REQUIREMENTS, [id=#221855]
         :                       +- HashAggregate(keys=[c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421], functions=[partial_stddev_samp(cast(ws_net_paid#18410 as double))], output=[c_customer_id#18364, c_first_name#18371, c_last_name#18372, d_year#18421, n#18448, avg#18449, m2#18450])
         :                          +- Project [c_customer_id#18364, c_first_name#18371, c_last_name#18372, ws_net_paid#18410, d_year#18421]
         :                             +- SortMergeJoin [ws_sold_date_sk#18381], [d_date_sk#18415], Inner
         :                                :- Sort [ws_sold_date_sk#18381 ASC NULLS FIRST], false, 0
         :                                :  +- Exchange hashpartitioning(ws_sold_date_sk#18381, 200), ENSURE_REQUIREMENTS, [id=#221847]
         :                                :     +- Project [c_customer_id#18364, c_first_name#18371, c_last_name#18372, ws_sold_date_sk#18381, ws_net_paid#18410]
         :                                :        +- SortMergeJoin [c_customer_sk#18363], [ws_bill_customer_sk#18385], Inner
         :                                :           :- Sort [c_customer_sk#18363 ASC NULLS FIRST], false, 0
         :                                :           :  +- Exchange hashpartitioning(c_customer_sk#18363, 200), ENSURE_REQUIREMENTS, [id=#221839]
         :                                :           :     +- Filter (isnotnull(c_customer_sk#18363) AND isnotnull(c_customer_id#18364))
         :                                :           :        +- FileScan parquet [c_customer_sk#18363,c_customer_id#18364,c_first_name#18371,c_last_name#18372] Batched: true, DataFilters: [isnotnull(c_customer_sk#18363), isnotnull(c_customer_id#18364)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :                                :           +- Sort [ws_bill_customer_sk#18385 ASC NULLS FIRST], false, 0
         :                                :              +- Exchange hashpartitioning(ws_bill_customer_sk#18385, 200), ENSURE_REQUIREMENTS, [id=#221840]
         :                                :                 +- Filter (isnotnull(ws_bill_customer_sk#18385) AND isnotnull(ws_sold_date_sk#18381))
         :                                :                    +- FileScan parquet [ws_sold_date_sk#18381,ws_bill_customer_sk#18385,ws_net_paid#18410] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#18385), isnotnull(ws_sold_date_sk#18381)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>
         :                                +- Sort [d_date_sk#18415 ASC NULLS FIRST], false, 0
         :                                   +- Exchange hashpartitioning(d_date_sk#18415, 200), ENSURE_REQUIREMENTS, [id=#221848]
         :                                      +- Filter (((isnotnull(d_year#18421) AND (d_year#18421 = 2001)) AND d_year#18421 IN (2001,2002)) AND isnotnull(d_date_sk#18415))
         :                                         +- FileScan parquet [d_date_sk#18415,d_year#18421] Batched: true, DataFilters: [isnotnull(d_year#18421), (d_year#18421 = 2001), d_year#18421 IN (2001,2002), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         +- Sort [customer_id#18074 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(customer_id#18074, 200), ENSURE_REQUIREMENTS, [id=#221886]
               +- HashAggregate(keys=[c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592], functions=[stddev_samp(cast(ws_net_paid#18581 as double))], output=[customer_id#18074, year_total#18078])
                  +- Exchange hashpartitioning(c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592, 200), ENSURE_REQUIREMENTS, [id=#221882]
                     +- HashAggregate(keys=[c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592], functions=[partial_stddev_samp(cast(ws_net_paid#18581 as double))], output=[c_customer_id#18535, c_first_name#18542, c_last_name#18543, d_year#18592, n#18619, avg#18620, m2#18621])
                        +- Project [c_customer_id#18535, c_first_name#18542, c_last_name#18543, ws_net_paid#18581, d_year#18592]
                           +- SortMergeJoin [ws_sold_date_sk#18552], [d_date_sk#18586], Inner
                              :- Sort [ws_sold_date_sk#18552 ASC NULLS FIRST], false, 0
                              :  +- Exchange hashpartitioning(ws_sold_date_sk#18552, 200), ENSURE_REQUIREMENTS, [id=#221874]
                              :     +- Project [c_customer_id#18535, c_first_name#18542, c_last_name#18543, ws_sold_date_sk#18552, ws_net_paid#18581]
                              :        +- SortMergeJoin [c_customer_sk#18534], [ws_bill_customer_sk#18556], Inner
                              :           :- Sort [c_customer_sk#18534 ASC NULLS FIRST], false, 0
                              :           :  +- Exchange hashpartitioning(c_customer_sk#18534, 200), ENSURE_REQUIREMENTS, [id=#221866]
                              :           :     +- Filter (isnotnull(c_customer_sk#18534) AND isnotnull(c_customer_id#18535))
                              :           :        +- FileScan parquet [c_customer_sk#18534,c_customer_id#18535,c_first_name#18542,c_last_name#18543] Batched: true, DataFilters: [isnotnull(c_customer_sk#18534), isnotnull(c_customer_id#18535)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
                              :           +- Sort [ws_bill_customer_sk#18556 ASC NULLS FIRST], false, 0
                              :              +- Exchange hashpartitioning(ws_bill_customer_sk#18556, 200), ENSURE_REQUIREMENTS, [id=#221867]
                              :                 +- Filter (isnotnull(ws_bill_customer_sk#18556) AND isnotnull(ws_sold_date_sk#18552))
                              :                    +- FileScan parquet [ws_sold_date_sk#18552,ws_bill_customer_sk#18556,ws_net_paid#18581] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#18556), isnotnull(ws_sold_date_sk#18552)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>
                              +- Sort [d_date_sk#18586 ASC NULLS FIRST], false, 0
                                 +- Exchange hashpartitioning(d_date_sk#18586, 200), ENSURE_REQUIREMENTS, [id=#221875]
                                    +- Filter (((isnotnull(d_year#18592) AND (d_year#18592 = 2002)) AND d_year#18592 IN (2001,2002)) AND isnotnull(d_date_sk#18586))
                                       +- FileScan parquet [d_date_sk#18586,d_year#18592] Batched: true, DataFilters: [isnotnull(d_year#18592), (d_year#18592 = 2002), d_year#18592 IN (2001,2002), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
