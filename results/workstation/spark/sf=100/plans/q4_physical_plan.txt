AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#1247 ASC NULLS FIRST,customer_first_name#1248 ASC NULLS FIRST,customer_last_name#1249 ASC NULLS FIRST,customer_login#1252 ASC NULLS FIRST], output=[customer_id#1247,customer_first_name#1248,customer_last_name#1249,customer_login#1252])
   +- *(71) Project [customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252]
      +- *(71) SortMergeJoin [customer_id#1122], [customer_id#1287], Inner, (CASE WHEN (year_total#1777 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1275) / promote_precision(year_total#1777)), DecimalType(38,14), true) END > CASE WHEN (year_total#2255 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1295) / promote_precision(year_total#2255)), DecimalType(38,14), true) END)
         :- *(69) Project [customer_id#1122, customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1777, year_total#1275, year_total#2255]
         :  +- *(69) SortMergeJoin [customer_id#1122], [customer_id#2247], Inner
         :     :- *(67) Project [customer_id#1122, customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1777, year_total#1275]
         :     :  +- *(67) SortMergeJoin [customer_id#1122], [customer_id#1267], Inner, (CASE WHEN (year_total#1777 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1275) / promote_precision(year_total#1777)), DecimalType(38,14), true) END > CASE WHEN (year_total#1130 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1255) / promote_precision(year_total#1130)), DecimalType(38,14), true) END)
         :     :     :- *(65) Project [customer_id#1122, year_total#1130, customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1255, year_total#1777]
         :     :     :  +- *(65) SortMergeJoin [customer_id#1122], [customer_id#1769], Inner
         :     :     :     :- *(63) SortMergeJoin [customer_id#1122], [customer_id#1247], Inner
         :     :     :     :  :- *(61) Sort [customer_id#1122 ASC NULLS FIRST], false, 0
         :     :     :     :  :  +- AQEShuffleRead coalesced
         :     :     :     :  :     +- ShuffleQueryStage 45
         :     :     :     :  :        +- Exchange hashpartitioning(customer_id#1122, 200), ENSURE_REQUIREMENTS, [id=#9278]
         :     :     :     :  :           +- *(55) Filter (isnotnull(year_total#1130) AND (year_total#1130 > 0.000000))
         :     :     :     :  :              +- *(55) HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#269 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#268 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#266 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#267 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1122, year_total#1130])
         :     :     :     :  :                 +- AQEShuffleRead coalesced
         :     :     :     :  :                    +- ShuffleQueryStage 39
         :     :     :     :  :                       +- Exchange hashpartitioning(c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618, 200), ENSURE_REQUIREMENTS, [id=#8159]
         :     :     :     :  :                          +- *(39) HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#269 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#268 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#266 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#267 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618, sum#2598, isEmpty#2599])
         :     :     :     :  :                             +- *(39) Project [c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, ss_ext_discount_amt#266, ss_ext_sales_price#267, ss_ext_wholesale_cost#268, ss_ext_list_price#269, d_year#618]
         :     :     :     :  :                                +- *(39) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :     :     :     :  :                                   :- *(37) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :     :     :     :  :                                   :  +- AQEShuffleRead coalesced
         :     :     :     :  :                                   :     +- ShuffleQueryStage 30
         :     :     :     :  :                                   :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#6233]
         :     :     :     :  :                                   :           +- *(21) Project [c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, ss_sold_date_sk#252, ss_ext_discount_amt#266, ss_ext_sales_price#267, ss_ext_wholesale_cost#268, ss_ext_list_price#269]
         :     :     :     :  :                                   :              +- *(21) SortMergeJoin [c_customer_sk#400], [ss_customer_sk#255], Inner
         :     :     :     :  :                                   :                 :- *(19) Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
         :     :     :     :  :                                   :                 :  +- ShuffleQueryStage 0
         :     :     :     :  :                                   :                 :     +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#3869]
         :     :     :     :  :                                   :                 :        +- *(1) Filter (isnotnull(c_customer_sk#400) AND isnotnull(c_customer_id#401))
         :     :     :     :  :                                   :                 :           +- *(1) ColumnarToRow
         :     :     :     :  :                                   :                 :              +- FileScan parquet [c_customer_sk#400,c_customer_id#401,c_first_name#408,c_last_name#409,c_preferred_cust_flag#410,c_birth_country#414,c_login#415,c_email_address#416] Batched: true, DataFilters: [isnotnull(c_customer_sk#400), isnotnull(c_customer_id#401)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :  :                                   :                 +- *(20) Sort [ss_customer_sk#255 ASC NULLS FIRST], false, 0
         :     :     :     :  :                                   :                    +- ShuffleQueryStage 1
         :     :     :     :  :                                   :                       +- Exchange hashpartitioning(ss_customer_sk#255, 200), ENSURE_REQUIREMENTS, [id=#3886]
         :     :     :     :  :                                   :                          +- *(2) Filter (isnotnull(ss_customer_sk#255) AND isnotnull(ss_sold_date_sk#252))
         :     :     :     :  :                                   :                             +- *(2) ColumnarToRow
         :     :     :     :  :                                   :                                +- FileScan parquet [ss_sold_date_sk#252,ss_customer_sk#255,ss_ext_discount_amt#266,ss_ext_sales_price#267,ss_ext_wholesale_cost#268,ss_ext_list_price#269] Batched: true, DataFilters: [isnotnull(ss_customer_sk#255), isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :  :                                   +- *(38) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :     :     :     :  :                                      +- AQEShuffleRead coalesced
         :     :     :     :  :                                         +- ShuffleQueryStage 2
         :     :     :     :  :                                            +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#3907]
         :     :     :     :  :                                               +- *(3) Filter ((isnotnull(d_year#618) AND (d_year#618 = 2001)) AND isnotnull(d_date_sk#612))
         :     :     :     :  :                                                  +- *(3) ColumnarToRow
         :     :     :     :  :                                                     +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2001), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     :  +- *(62) Sort [customer_id#1247 ASC NULLS FIRST], false, 0
         :     :     :     :     +- AQEShuffleRead coalesced
         :     :     :     :        +- ShuffleQueryStage 46
         :     :     :     :           +- Exchange hashpartitioning(customer_id#1247, 200), ENSURE_REQUIREMENTS, [id=#9388]
         :     :     :     :              +- *(56) HashAggregate(keys=[c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1336 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1335 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1333 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1334 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1255])
         :     :     :     :                 +- AQEShuffleRead coalesced
         :     :     :     :                    +- ShuffleQueryStage 40
         :     :     :     :                       +- Exchange hashpartitioning(c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348, 200), ENSURE_REQUIREMENTS, [id=#8206]
         :     :     :     :                          +- *(42) HashAggregate(keys=[c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1336 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1335 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1333 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1334 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348, sum#2602, isEmpty#2603])
         :     :     :     :                             +- *(42) Project [c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, ss_ext_discount_amt#1333, ss_ext_sales_price#1334, ss_ext_wholesale_cost#1335, ss_ext_list_price#1336, d_year#1348]
         :     :     :     :                                +- *(42) SortMergeJoin [ss_sold_date_sk#1319], [d_date_sk#1342], Inner
         :     :     :     :                                   :- *(40) Sort [ss_sold_date_sk#1319 ASC NULLS FIRST], false, 0
         :     :     :     :                                   :  +- AQEShuffleRead coalesced
         :     :     :     :                                   :     +- ShuffleQueryStage 32
         :     :     :     :                                   :        +- ReusedExchange [c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, ss_sold_date_sk#1319, ss_ext_discount_amt#1333, ss_ext_sales_price#1334, ss_ext_wholesale_cost#1335, ss_ext_list_price#1336], Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#6233]
         :     :     :     :                                   +- *(41) Sort [d_date_sk#1342 ASC NULLS FIRST], false, 0
         :     :     :     :                                      +- AQEShuffleRead coalesced
         :     :     :     :                                         +- ShuffleQueryStage 7
         :     :     :     :                                            +- Exchange hashpartitioning(d_date_sk#1342, 200), ENSURE_REQUIREMENTS, [id=#4015]
         :     :     :     :                                               +- *(6) Filter ((isnotnull(d_year#1348) AND (d_year#1348 = 2002)) AND isnotnull(d_date_sk#1342))
         :     :     :     :                                                  +- *(6) ColumnarToRow
         :     :     :     :                                                     +- FileScan parquet [d_date_sk#1342,d_year#1348] Batched: true, DataFilters: [isnotnull(d_year#1348), (d_year#1348 = 2002), isnotnull(d_date_sk#1342)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     +- *(64) Sort [customer_id#1769 ASC NULLS FIRST], false, 0
         :     :     :        +- AQEShuffleRead coalesced
         :     :     :           +- ShuffleQueryStage 47
         :     :     :              +- Exchange hashpartitioning(customer_id#1769, 200), ENSURE_REQUIREMENTS, [id=#9499]
         :     :     :                 +- *(57) Project [customer_id#1132 AS customer_id#1769, year_total#1140 AS year_total#1777]
         :     :     :                    +- *(57) Filter (isnotnull(year_total#1140) AND (year_total#1140 > 0.000000))
         :     :     :                       +- *(57) HashAggregate(keys=[c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1652 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1651 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1649 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1650 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1132, year_total#1140])
         :     :     :                          +- AQEShuffleRead coalesced
         :     :     :                             +- ShuffleQueryStage 41
         :     :     :                                +- Exchange hashpartitioning(c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667, 200), ENSURE_REQUIREMENTS, [id=#8628]
         :     :     :                                   +- *(45) HashAggregate(keys=[c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1652 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1651 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1649 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1650 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667, sum#2606, isEmpty#2607])
         :     :     :                                      +- *(45) Project [c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, cs_ext_discount_amt#1649, cs_ext_sales_price#1650, cs_ext_wholesale_cost#1651, cs_ext_list_price#1652, d_year#1667]
         :     :     :                                         +- *(45) SortMergeJoin [cs_sold_date_sk#1627], [d_date_sk#1661], Inner
         :     :     :                                            :- *(43) Sort [cs_sold_date_sk#1627 ASC NULLS FIRST], false, 0
         :     :     :                                            :  +- AQEShuffleRead coalesced
         :     :     :                                            :     +- ShuffleQueryStage 33
         :     :     :                                            :        +- Exchange hashpartitioning(cs_sold_date_sk#1627, 200), ENSURE_REQUIREMENTS, [id=#6927]
         :     :     :                                            :           +- *(27) Project [c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, cs_sold_date_sk#1627, cs_ext_discount_amt#1649, cs_ext_sales_price#1650, cs_ext_wholesale_cost#1651, cs_ext_list_price#1652]
         :     :     :                                            :              +- *(27) SortMergeJoin [c_customer_sk#1609], [cs_bill_customer_sk#1630], Inner
         :     :     :                                            :                 :- *(25) Sort [c_customer_sk#1609 ASC NULLS FIRST], false, 0
         :     :     :                                            :                 :  +- AQEShuffleRead coalesced
         :     :     :                                            :                 :     +- ShuffleQueryStage 9
         :     :     :                                            :                 :        +- ReusedExchange [c_customer_sk#1609, c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625], Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#3869]
         :     :     :                                            :                 +- *(26) Sort [cs_bill_customer_sk#1630 ASC NULLS FIRST], false, 0
         :     :     :                                            :                    +- AQEShuffleRead coalesced
         :     :     :                                            :                       +- ShuffleQueryStage 10
         :     :     :                                            :                          +- Exchange hashpartitioning(cs_bill_customer_sk#1630, 200), ENSURE_REQUIREMENTS, [id=#4104]
         :     :     :                                            :                             +- *(8) Filter (isnotnull(cs_bill_customer_sk#1630) AND isnotnull(cs_sold_date_sk#1627))
         :     :     :                                            :                                +- *(8) ColumnarToRow
         :     :     :                                            :                                   +- FileScan parquet [cs_sold_date_sk#1627,cs_bill_customer_sk#1630,cs_ext_discount_amt#1649,cs_ext_sales_price#1650,cs_ext_wholesale_cost#1651,cs_ext_list_price#1652] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#1630), isnotnull(cs_sold_date_sk#1627)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :     :                                            +- *(44) Sort [d_date_sk#1661 ASC NULLS FIRST], false, 0
         :     :     :                                               +- AQEShuffleRead coalesced
         :     :     :                                                  +- ShuffleQueryStage 12
         :     :     :                                                     +- ReusedExchange [d_date_sk#1661, d_year#1667], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#3907]
         :     :     +- *(66) Sort [customer_id#1267 ASC NULLS FIRST], false, 0
         :     :        +- AQEShuffleRead coalesced
         :     :           +- ShuffleQueryStage 48
         :     :              +- Exchange hashpartitioning(customer_id#1267, 200), ENSURE_REQUIREMENTS, [id=#9602]
         :     :                 +- *(58) HashAggregate(keys=[c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1891 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1890 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1888 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1889 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1267, year_total#1275])
         :     :                    +- AQEShuffleRead coalesced
         :     :                       +- ShuffleQueryStage 42
         :     :                          +- Exchange hashpartitioning(c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906, 200), ENSURE_REQUIREMENTS, [id=#8678]
         :     :                             +- *(48) HashAggregate(keys=[c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1891 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1890 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1888 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1889 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906, sum#2610, isEmpty#2611])
         :     :                                +- *(48) Project [c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, cs_ext_discount_amt#1888, cs_ext_sales_price#1889, cs_ext_wholesale_cost#1890, cs_ext_list_price#1891, d_year#1906]
         :     :                                   +- *(48) SortMergeJoin [cs_sold_date_sk#1866], [d_date_sk#1900], Inner
         :     :                                      :- *(46) Sort [cs_sold_date_sk#1866 ASC NULLS FIRST], false, 0
         :     :                                      :  +- AQEShuffleRead coalesced
         :     :                                      :     +- ShuffleQueryStage 35
         :     :                                      :        +- ReusedExchange [c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, cs_sold_date_sk#1866, cs_ext_discount_amt#1888, cs_ext_sales_price#1889, cs_ext_wholesale_cost#1890, cs_ext_list_price#1891], Exchange hashpartitioning(cs_sold_date_sk#1627, 200), ENSURE_REQUIREMENTS, [id=#6927]
         :     :                                      +- *(47) Sort [d_date_sk#1900 ASC NULLS FIRST], false, 0
         :     :                                         +- AQEShuffleRead coalesced
         :     :                                            +- ShuffleQueryStage 18
         :     :                                               +- ReusedExchange [d_date_sk#1900, d_year#1906], Exchange hashpartitioning(d_date_sk#1342, 200), ENSURE_REQUIREMENTS, [id=#4015]
         :     +- *(68) Sort [customer_id#2247 ASC NULLS FIRST], false, 0
         :        +- AQEShuffleRead coalesced
         :           +- ShuffleQueryStage 49
         :              +- Exchange hashpartitioning(customer_id#2247, 200), ENSURE_REQUIREMENTS, [id=#9702]
         :                 +- *(59) Project [customer_id#1142 AS customer_id#2247, year_total#1150 AS year_total#2255]
         :                    +- *(59) Filter (isnotnull(year_total#1150) AND (year_total#1150 > 0.000000))
         :                       +- *(59) HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2210 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2209 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2207 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2208 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1142, year_total#1150])
         :                          +- AQEShuffleRead coalesced
         :                             +- ShuffleQueryStage 43
         :                                +- Exchange hashpartitioning(c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, 200), ENSURE_REQUIREMENTS, [id=#9007]
         :                                   +- *(51) HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2210 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2209 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2207 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2208 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2614, isEmpty#2615])
         :                                      +- *(51) Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2207, ws_ext_sales_price#2208, ws_ext_wholesale_cost#2209, ws_ext_list_price#2210, d_year#2225]
         :                                         +- *(51) SortMergeJoin [ws_sold_date_sk#2185], [d_date_sk#2219], Inner
         :                                            :- *(49) Sort [ws_sold_date_sk#2185 ASC NULLS FIRST], false, 0
         :                                            :  +- AQEShuffleRead coalesced
         :                                            :     +- ShuffleQueryStage 36
         :                                            :        +- Exchange hashpartitioning(ws_sold_date_sk#2185, 200), ENSURE_REQUIREMENTS, [id=#7574]
         :                                            :           +- *(33) Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_sold_date_sk#2185, ws_ext_discount_amt#2207, ws_ext_sales_price#2208, ws_ext_wholesale_cost#2209, ws_ext_list_price#2210]
         :                                            :              +- *(33) SortMergeJoin [c_customer_sk#2167], [ws_bill_customer_sk#2189], Inner
         :                                            :                 :- *(31) Sort [c_customer_sk#2167 ASC NULLS FIRST], false, 0
         :                                            :                 :  +- AQEShuffleRead coalesced
         :                                            :                 :     +- ShuffleQueryStage 20
         :                                            :                 :        +- ReusedExchange [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#3869]
         :                                            :                 +- *(32) Sort [ws_bill_customer_sk#2189 ASC NULLS FIRST], false, 0
         :                                            :                    +- AQEShuffleRead coalesced
         :                                            :                       +- ShuffleQueryStage 21
         :                                            :                          +- Exchange hashpartitioning(ws_bill_customer_sk#2189, 200), ENSURE_REQUIREMENTS, [id=#4330]
         :                                            :                             +- *(14) Filter (isnotnull(ws_bill_customer_sk#2189) AND isnotnull(ws_sold_date_sk#2185))
         :                                            :                                +- *(14) ColumnarToRow
         :                                            :                                   +- FileScan parquet [ws_sold_date_sk#2185,ws_bill_customer_sk#2189,ws_ext_discount_amt#2207,ws_ext_sales_price#2208,ws_ext_wholesale_cost#2209,ws_ext_list_price#2210] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2189), isnotnull(ws_sold_date_sk#2185)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
         :                                            +- *(50) Sort [d_date_sk#2219 ASC NULLS FIRST], false, 0
         :                                               +- AQEShuffleRead coalesced
         :                                                  +- ShuffleQueryStage 23
         :                                                     +- ReusedExchange [d_date_sk#2219, d_year#2225], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#3907]
         +- *(70) Sort [customer_id#1287 ASC NULLS FIRST], false, 0
            +- AQEShuffleRead coalesced
               +- ShuffleQueryStage 50
                  +- Exchange hashpartitioning(customer_id#1287, 200), ENSURE_REQUIREMENTS, [id=#10123]
                     +- *(60) HashAggregate(keys=[c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2449 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2448 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2446 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2447 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1287, year_total#1295])
                        +- AQEShuffleRead coalesced
                           +- ShuffleQueryStage 44
                              +- Exchange hashpartitioning(c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464, 200), ENSURE_REQUIREMENTS, [id=#9057]
                                 +- *(54) HashAggregate(keys=[c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2449 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2448 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2446 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2447 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464, sum#2618, isEmpty#2619])
                                    +- *(54) Project [c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, ws_ext_discount_amt#2446, ws_ext_sales_price#2447, ws_ext_wholesale_cost#2448, ws_ext_list_price#2449, d_year#2464]
                                       +- *(54) SortMergeJoin [ws_sold_date_sk#2424], [d_date_sk#2458], Inner
                                          :- *(52) Sort [ws_sold_date_sk#2424 ASC NULLS FIRST], false, 0
                                          :  +- AQEShuffleRead coalesced
                                          :     +- ShuffleQueryStage 38
                                          :        +- ReusedExchange [c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, ws_sold_date_sk#2424, ws_ext_discount_amt#2446, ws_ext_sales_price#2447, ws_ext_wholesale_cost#2448, ws_ext_list_price#2449], Exchange hashpartitioning(ws_sold_date_sk#2185, 200), ENSURE_REQUIREMENTS, [id=#7574]
                                          +- *(53) Sort [d_date_sk#2458 ASC NULLS FIRST], false, 0
                                             +- AQEShuffleRead coalesced
                                                +- ShuffleQueryStage 29
                                                   +- ReusedExchange [d_date_sk#2458, d_year#2464], Exchange hashpartitioning(d_date_sk#1342, 200), ENSURE_REQUIREMENTS, [id=#4015]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#1247 ASC NULLS FIRST,customer_first_name#1248 ASC NULLS FIRST,customer_last_name#1249 ASC NULLS FIRST,customer_login#1252 ASC NULLS FIRST], output=[customer_id#1247,customer_first_name#1248,customer_last_name#1249,customer_login#1252])
   +- Project [customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252]
      +- SortMergeJoin [customer_id#1122], [customer_id#1287], Inner, (CASE WHEN (year_total#1777 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1275) / promote_precision(year_total#1777)), DecimalType(38,14), true) END > CASE WHEN (year_total#2255 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1295) / promote_precision(year_total#2255)), DecimalType(38,14), true) END)
         :- Project [customer_id#1122, customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1777, year_total#1275, year_total#2255]
         :  +- SortMergeJoin [customer_id#1122], [customer_id#2247], Inner
         :     :- Project [customer_id#1122, customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1777, year_total#1275]
         :     :  +- SortMergeJoin [customer_id#1122], [customer_id#1267], Inner, (CASE WHEN (year_total#1777 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1275) / promote_precision(year_total#1777)), DecimalType(38,14), true) END > CASE WHEN (year_total#1130 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1255) / promote_precision(year_total#1130)), DecimalType(38,14), true) END)
         :     :     :- Project [customer_id#1122, year_total#1130, customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1255, year_total#1777]
         :     :     :  +- SortMergeJoin [customer_id#1122], [customer_id#1769], Inner
         :     :     :     :- SortMergeJoin [customer_id#1122], [customer_id#1247], Inner
         :     :     :     :  :- Sort [customer_id#1122 ASC NULLS FIRST], false, 0
         :     :     :     :  :  +- Exchange hashpartitioning(customer_id#1122, 200), ENSURE_REQUIREMENTS, [id=#3709]
         :     :     :     :  :     +- Filter (isnotnull(year_total#1130) AND (year_total#1130 > 0.000000))
         :     :     :     :  :        +- HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#269 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#268 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#266 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#267 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1122, year_total#1130])
         :     :     :     :  :           +- Exchange hashpartitioning(c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618, 200), ENSURE_REQUIREMENTS, [id=#3685]
         :     :     :     :  :              +- HashAggregate(keys=[c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#269 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#268 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#266 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#267 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, d_year#618, sum#2598, isEmpty#2599])
         :     :     :     :  :                 +- Project [c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, ss_ext_discount_amt#266, ss_ext_sales_price#267, ss_ext_wholesale_cost#268, ss_ext_list_price#269, d_year#618]
         :     :     :     :  :                    +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :     :     :     :  :                       :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :     :     :     :  :                       :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#3677]
         :     :     :     :  :                       :     +- Project [c_customer_id#401, c_first_name#408, c_last_name#409, c_preferred_cust_flag#410, c_birth_country#414, c_login#415, c_email_address#416, ss_sold_date_sk#252, ss_ext_discount_amt#266, ss_ext_sales_price#267, ss_ext_wholesale_cost#268, ss_ext_list_price#269]
         :     :     :     :  :                       :        +- SortMergeJoin [c_customer_sk#400], [ss_customer_sk#255], Inner
         :     :     :     :  :                       :           :- Sort [c_customer_sk#400 ASC NULLS FIRST], false, 0
         :     :     :     :  :                       :           :  +- Exchange hashpartitioning(c_customer_sk#400, 200), ENSURE_REQUIREMENTS, [id=#3669]
         :     :     :     :  :                       :           :     +- Filter (isnotnull(c_customer_sk#400) AND isnotnull(c_customer_id#401))
         :     :     :     :  :                       :           :        +- FileScan parquet [c_customer_sk#400,c_customer_id#401,c_first_name#408,c_last_name#409,c_preferred_cust_flag#410,c_birth_country#414,c_login#415,c_email_address#416] Batched: true, DataFilters: [isnotnull(c_customer_sk#400), isnotnull(c_customer_id#401)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :  :                       :           +- Sort [ss_customer_sk#255 ASC NULLS FIRST], false, 0
         :     :     :     :  :                       :              +- Exchange hashpartitioning(ss_customer_sk#255, 200), ENSURE_REQUIREMENTS, [id=#3670]
         :     :     :     :  :                       :                 +- Filter (isnotnull(ss_customer_sk#255) AND isnotnull(ss_sold_date_sk#252))
         :     :     :     :  :                       :                    +- FileScan parquet [ss_sold_date_sk#252,ss_customer_sk#255,ss_ext_discount_amt#266,ss_ext_sales_price#267,ss_ext_wholesale_cost#268,ss_ext_list_price#269] Batched: true, DataFilters: [isnotnull(ss_customer_sk#255), isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :  :                       +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :     :     :     :  :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#3678]
         :     :     :     :  :                             +- Filter ((isnotnull(d_year#618) AND (d_year#618 = 2001)) AND isnotnull(d_date_sk#612))
         :     :     :     :  :                                +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2001), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     :  +- Sort [customer_id#1247 ASC NULLS FIRST], false, 0
         :     :     :     :     +- Exchange hashpartitioning(customer_id#1247, 200), ENSURE_REQUIREMENTS, [id=#3710]
         :     :     :     :        +- HashAggregate(keys=[c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1336 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1335 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1333 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1334 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1247, customer_first_name#1248, customer_last_name#1249, customer_login#1252, year_total#1255])
         :     :     :     :           +- Exchange hashpartitioning(c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348, 200), ENSURE_REQUIREMENTS, [id=#3705]
         :     :     :     :              +- HashAggregate(keys=[c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1336 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1335 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1333 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1334 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, d_year#1348, sum#2602, isEmpty#2603])
         :     :     :     :                 +- Project [c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, ss_ext_discount_amt#1333, ss_ext_sales_price#1334, ss_ext_wholesale_cost#1335, ss_ext_list_price#1336, d_year#1348]
         :     :     :     :                    +- SortMergeJoin [ss_sold_date_sk#1319], [d_date_sk#1342], Inner
         :     :     :     :                       :- Sort [ss_sold_date_sk#1319 ASC NULLS FIRST], false, 0
         :     :     :     :                       :  +- Exchange hashpartitioning(ss_sold_date_sk#1319, 200), ENSURE_REQUIREMENTS, [id=#3697]
         :     :     :     :                       :     +- Project [c_customer_id#1302, c_first_name#1309, c_last_name#1310, c_preferred_cust_flag#1311, c_birth_country#1315, c_login#1316, c_email_address#1317, ss_sold_date_sk#1319, ss_ext_discount_amt#1333, ss_ext_sales_price#1334, ss_ext_wholesale_cost#1335, ss_ext_list_price#1336]
         :     :     :     :                       :        +- SortMergeJoin [c_customer_sk#1301], [ss_customer_sk#1322], Inner
         :     :     :     :                       :           :- Sort [c_customer_sk#1301 ASC NULLS FIRST], false, 0
         :     :     :     :                       :           :  +- Exchange hashpartitioning(c_customer_sk#1301, 200), ENSURE_REQUIREMENTS, [id=#3689]
         :     :     :     :                       :           :     +- Filter (isnotnull(c_customer_sk#1301) AND isnotnull(c_customer_id#1302))
         :     :     :     :                       :           :        +- FileScan parquet [c_customer_sk#1301,c_customer_id#1302,c_first_name#1309,c_last_name#1310,c_preferred_cust_flag#1311,c_birth_country#1315,c_login#1316,c_email_address#1317] Batched: true, DataFilters: [isnotnull(c_customer_sk#1301), isnotnull(c_customer_id#1302)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :                       :           +- Sort [ss_customer_sk#1322 ASC NULLS FIRST], false, 0
         :     :     :     :                       :              +- Exchange hashpartitioning(ss_customer_sk#1322, 200), ENSURE_REQUIREMENTS, [id=#3690]
         :     :     :     :                       :                 +- Filter (isnotnull(ss_customer_sk#1322) AND isnotnull(ss_sold_date_sk#1319))
         :     :     :     :                       :                    +- FileScan parquet [ss_sold_date_sk#1319,ss_customer_sk#1322,ss_ext_discount_amt#1333,ss_ext_sales_price#1334,ss_ext_wholesale_cost#1335,ss_ext_list_price#1336] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1322), isnotnull(ss_sold_date_sk#1319)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :                       +- Sort [d_date_sk#1342 ASC NULLS FIRST], false, 0
         :     :     :     :                          +- Exchange hashpartitioning(d_date_sk#1342, 200), ENSURE_REQUIREMENTS, [id=#3698]
         :     :     :     :                             +- Filter ((isnotnull(d_year#1348) AND (d_year#1348 = 2002)) AND isnotnull(d_date_sk#1342))
         :     :     :     :                                +- FileScan parquet [d_date_sk#1342,d_year#1348] Batched: true, DataFilters: [isnotnull(d_year#1348), (d_year#1348 = 2002), isnotnull(d_date_sk#1342)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     +- Sort [customer_id#1769 ASC NULLS FIRST], false, 0
         :     :     :        +- Exchange hashpartitioning(customer_id#1769, 200), ENSURE_REQUIREMENTS, [id=#3737]
         :     :     :           +- Project [customer_id#1132 AS customer_id#1769, year_total#1140 AS year_total#1777]
         :     :     :              +- Filter (isnotnull(year_total#1140) AND (year_total#1140 > 0.000000))
         :     :     :                 +- HashAggregate(keys=[c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1652 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1651 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1649 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1650 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1132, year_total#1140])
         :     :     :                    +- Exchange hashpartitioning(c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667, 200), ENSURE_REQUIREMENTS, [id=#3731]
         :     :     :                       +- HashAggregate(keys=[c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1652 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1651 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1649 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1650 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, d_year#1667, sum#2606, isEmpty#2607])
         :     :     :                          +- Project [c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, cs_ext_discount_amt#1649, cs_ext_sales_price#1650, cs_ext_wholesale_cost#1651, cs_ext_list_price#1652, d_year#1667]
         :     :     :                             +- SortMergeJoin [cs_sold_date_sk#1627], [d_date_sk#1661], Inner
         :     :     :                                :- Sort [cs_sold_date_sk#1627 ASC NULLS FIRST], false, 0
         :     :     :                                :  +- Exchange hashpartitioning(cs_sold_date_sk#1627, 200), ENSURE_REQUIREMENTS, [id=#3723]
         :     :     :                                :     +- Project [c_customer_id#1610, c_first_name#1617, c_last_name#1618, c_preferred_cust_flag#1619, c_birth_country#1623, c_login#1624, c_email_address#1625, cs_sold_date_sk#1627, cs_ext_discount_amt#1649, cs_ext_sales_price#1650, cs_ext_wholesale_cost#1651, cs_ext_list_price#1652]
         :     :     :                                :        +- SortMergeJoin [c_customer_sk#1609], [cs_bill_customer_sk#1630], Inner
         :     :     :                                :           :- Sort [c_customer_sk#1609 ASC NULLS FIRST], false, 0
         :     :     :                                :           :  +- Exchange hashpartitioning(c_customer_sk#1609, 200), ENSURE_REQUIREMENTS, [id=#3715]
         :     :     :                                :           :     +- Filter (isnotnull(c_customer_sk#1609) AND isnotnull(c_customer_id#1610))
         :     :     :                                :           :        +- FileScan parquet [c_customer_sk#1609,c_customer_id#1610,c_first_name#1617,c_last_name#1618,c_preferred_cust_flag#1619,c_birth_country#1623,c_login#1624,c_email_address#1625] Batched: true, DataFilters: [isnotnull(c_customer_sk#1609), isnotnull(c_customer_id#1610)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :                                :           +- Sort [cs_bill_customer_sk#1630 ASC NULLS FIRST], false, 0
         :     :     :                                :              +- Exchange hashpartitioning(cs_bill_customer_sk#1630, 200), ENSURE_REQUIREMENTS, [id=#3716]
         :     :     :                                :                 +- Filter (isnotnull(cs_bill_customer_sk#1630) AND isnotnull(cs_sold_date_sk#1627))
         :     :     :                                :                    +- FileScan parquet [cs_sold_date_sk#1627,cs_bill_customer_sk#1630,cs_ext_discount_amt#1649,cs_ext_sales_price#1650,cs_ext_wholesale_cost#1651,cs_ext_list_price#1652] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#1630), isnotnull(cs_sold_date_sk#1627)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :     :                                +- Sort [d_date_sk#1661 ASC NULLS FIRST], false, 0
         :     :     :                                   +- Exchange hashpartitioning(d_date_sk#1661, 200), ENSURE_REQUIREMENTS, [id=#3724]
         :     :     :                                      +- Filter ((isnotnull(d_year#1667) AND (d_year#1667 = 2001)) AND isnotnull(d_date_sk#1661))
         :     :     :                                         +- FileScan parquet [d_date_sk#1661,d_year#1667] Batched: true, DataFilters: [isnotnull(d_year#1667), (d_year#1667 = 2001), isnotnull(d_date_sk#1661)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     +- Sort [customer_id#1267 ASC NULLS FIRST], false, 0
         :     :        +- Exchange hashpartitioning(customer_id#1267, 200), ENSURE_REQUIREMENTS, [id=#3762]
         :     :           +- HashAggregate(keys=[c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1891 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1890 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1888 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1889 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1267, year_total#1275])
         :     :              +- Exchange hashpartitioning(c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906, 200), ENSURE_REQUIREMENTS, [id=#3758]
         :     :                 +- HashAggregate(keys=[c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1891 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1890 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1888 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1889 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, d_year#1906, sum#2610, isEmpty#2611])
         :     :                    +- Project [c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, cs_ext_discount_amt#1888, cs_ext_sales_price#1889, cs_ext_wholesale_cost#1890, cs_ext_list_price#1891, d_year#1906]
         :     :                       +- SortMergeJoin [cs_sold_date_sk#1866], [d_date_sk#1900], Inner
         :     :                          :- Sort [cs_sold_date_sk#1866 ASC NULLS FIRST], false, 0
         :     :                          :  +- Exchange hashpartitioning(cs_sold_date_sk#1866, 200), ENSURE_REQUIREMENTS, [id=#3750]
         :     :                          :     +- Project [c_customer_id#1849, c_first_name#1856, c_last_name#1857, c_preferred_cust_flag#1858, c_birth_country#1862, c_login#1863, c_email_address#1864, cs_sold_date_sk#1866, cs_ext_discount_amt#1888, cs_ext_sales_price#1889, cs_ext_wholesale_cost#1890, cs_ext_list_price#1891]
         :     :                          :        +- SortMergeJoin [c_customer_sk#1848], [cs_bill_customer_sk#1869], Inner
         :     :                          :           :- Sort [c_customer_sk#1848 ASC NULLS FIRST], false, 0
         :     :                          :           :  +- Exchange hashpartitioning(c_customer_sk#1848, 200), ENSURE_REQUIREMENTS, [id=#3742]
         :     :                          :           :     +- Filter (isnotnull(c_customer_sk#1848) AND isnotnull(c_customer_id#1849))
         :     :                          :           :        +- FileScan parquet [c_customer_sk#1848,c_customer_id#1849,c_first_name#1856,c_last_name#1857,c_preferred_cust_flag#1858,c_birth_country#1862,c_login#1863,c_email_address#1864] Batched: true, DataFilters: [isnotnull(c_customer_sk#1848), isnotnull(c_customer_id#1849)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :                          :           +- Sort [cs_bill_customer_sk#1869 ASC NULLS FIRST], false, 0
         :     :                          :              +- Exchange hashpartitioning(cs_bill_customer_sk#1869, 200), ENSURE_REQUIREMENTS, [id=#3743]
         :     :                          :                 +- Filter (isnotnull(cs_bill_customer_sk#1869) AND isnotnull(cs_sold_date_sk#1866))
         :     :                          :                    +- FileScan parquet [cs_sold_date_sk#1866,cs_bill_customer_sk#1869,cs_ext_discount_amt#1888,cs_ext_sales_price#1889,cs_ext_wholesale_cost#1890,cs_ext_list_price#1891] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#1869), isnotnull(cs_sold_date_sk#1866)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :                          +- Sort [d_date_sk#1900 ASC NULLS FIRST], false, 0
         :     :                             +- Exchange hashpartitioning(d_date_sk#1900, 200), ENSURE_REQUIREMENTS, [id=#3751]
         :     :                                +- Filter ((isnotnull(d_year#1906) AND (d_year#1906 = 2002)) AND isnotnull(d_date_sk#1900))
         :     :                                   +- FileScan parquet [d_date_sk#1900,d_year#1906] Batched: true, DataFilters: [isnotnull(d_year#1906), (d_year#1906 = 2002), isnotnull(d_date_sk#1900)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     +- Sort [customer_id#2247 ASC NULLS FIRST], false, 0
         :        +- Exchange hashpartitioning(customer_id#2247, 200), ENSURE_REQUIREMENTS, [id=#3789]
         :           +- Project [customer_id#1142 AS customer_id#2247, year_total#1150 AS year_total#2255]
         :              +- Filter (isnotnull(year_total#1150) AND (year_total#1150 > 0.000000))
         :                 +- HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2210 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2209 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2207 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2208 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1142, year_total#1150])
         :                    +- Exchange hashpartitioning(c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, 200), ENSURE_REQUIREMENTS, [id=#3783]
         :                       +- HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2210 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2209 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2207 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2208 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2614, isEmpty#2615])
         :                          +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2207, ws_ext_sales_price#2208, ws_ext_wholesale_cost#2209, ws_ext_list_price#2210, d_year#2225]
         :                             +- SortMergeJoin [ws_sold_date_sk#2185], [d_date_sk#2219], Inner
         :                                :- Sort [ws_sold_date_sk#2185 ASC NULLS FIRST], false, 0
         :                                :  +- Exchange hashpartitioning(ws_sold_date_sk#2185, 200), ENSURE_REQUIREMENTS, [id=#3775]
         :                                :     +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_sold_date_sk#2185, ws_ext_discount_amt#2207, ws_ext_sales_price#2208, ws_ext_wholesale_cost#2209, ws_ext_list_price#2210]
         :                                :        +- SortMergeJoin [c_customer_sk#2167], [ws_bill_customer_sk#2189], Inner
         :                                :           :- Sort [c_customer_sk#2167 ASC NULLS FIRST], false, 0
         :                                :           :  +- Exchange hashpartitioning(c_customer_sk#2167, 200), ENSURE_REQUIREMENTS, [id=#3767]
         :                                :           :     +- Filter (isnotnull(c_customer_sk#2167) AND isnotnull(c_customer_id#2168))
         :                                :           :        +- FileScan parquet [c_customer_sk#2167,c_customer_id#2168,c_first_name#2175,c_last_name#2176,c_preferred_cust_flag#2177,c_birth_country#2181,c_login#2182,c_email_address#2183] Batched: true, DataFilters: [isnotnull(c_customer_sk#2167), isnotnull(c_customer_id#2168)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :                                :           +- Sort [ws_bill_customer_sk#2189 ASC NULLS FIRST], false, 0
         :                                :              +- Exchange hashpartitioning(ws_bill_customer_sk#2189, 200), ENSURE_REQUIREMENTS, [id=#3768]
         :                                :                 +- Filter (isnotnull(ws_bill_customer_sk#2189) AND isnotnull(ws_sold_date_sk#2185))
         :                                :                    +- FileScan parquet [ws_sold_date_sk#2185,ws_bill_customer_sk#2189,ws_ext_discount_amt#2207,ws_ext_sales_price#2208,ws_ext_wholesale_cost#2209,ws_ext_list_price#2210] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2189), isnotnull(ws_sold_date_sk#2185)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
         :                                +- Sort [d_date_sk#2219 ASC NULLS FIRST], false, 0
         :                                   +- Exchange hashpartitioning(d_date_sk#2219, 200), ENSURE_REQUIREMENTS, [id=#3776]
         :                                      +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2001)) AND isnotnull(d_date_sk#2219))
         :                                         +- FileScan parquet [d_date_sk#2219,d_year#2225] Batched: true, DataFilters: [isnotnull(d_year#2225), (d_year#2225 = 2001), isnotnull(d_date_sk#2219)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         +- Sort [customer_id#1287 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(customer_id#1287, 200), ENSURE_REQUIREMENTS, [id=#3814]
               +- HashAggregate(keys=[c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2449 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2448 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2446 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2447 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1287, year_total#1295])
                  +- Exchange hashpartitioning(c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464, 200), ENSURE_REQUIREMENTS, [id=#3810]
                     +- HashAggregate(keys=[c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2449 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2448 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2446 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2447 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, d_year#2464, sum#2618, isEmpty#2619])
                        +- Project [c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, ws_ext_discount_amt#2446, ws_ext_sales_price#2447, ws_ext_wholesale_cost#2448, ws_ext_list_price#2449, d_year#2464]
                           +- SortMergeJoin [ws_sold_date_sk#2424], [d_date_sk#2458], Inner
                              :- Sort [ws_sold_date_sk#2424 ASC NULLS FIRST], false, 0
                              :  +- Exchange hashpartitioning(ws_sold_date_sk#2424, 200), ENSURE_REQUIREMENTS, [id=#3802]
                              :     +- Project [c_customer_id#2407, c_first_name#2414, c_last_name#2415, c_preferred_cust_flag#2416, c_birth_country#2420, c_login#2421, c_email_address#2422, ws_sold_date_sk#2424, ws_ext_discount_amt#2446, ws_ext_sales_price#2447, ws_ext_wholesale_cost#2448, ws_ext_list_price#2449]
                              :        +- SortMergeJoin [c_customer_sk#2406], [ws_bill_customer_sk#2428], Inner
                              :           :- Sort [c_customer_sk#2406 ASC NULLS FIRST], false, 0
                              :           :  +- Exchange hashpartitioning(c_customer_sk#2406, 200), ENSURE_REQUIREMENTS, [id=#3794]
                              :           :     +- Filter (isnotnull(c_customer_sk#2406) AND isnotnull(c_customer_id#2407))
                              :           :        +- FileScan parquet [c_customer_sk#2406,c_customer_id#2407,c_first_name#2414,c_last_name#2415,c_preferred_cust_flag#2416,c_birth_country#2420,c_login#2421,c_email_address#2422] Batched: true, DataFilters: [isnotnull(c_customer_sk#2406), isnotnull(c_customer_id#2407)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
                              :           +- Sort [ws_bill_customer_sk#2428 ASC NULLS FIRST], false, 0
                              :              +- Exchange hashpartitioning(ws_bill_customer_sk#2428, 200), ENSURE_REQUIREMENTS, [id=#3795]
                              :                 +- Filter (isnotnull(ws_bill_customer_sk#2428) AND isnotnull(ws_sold_date_sk#2424))
                              :                    +- FileScan parquet [ws_sold_date_sk#2424,ws_bill_customer_sk#2428,ws_ext_discount_amt#2446,ws_ext_sales_price#2447,ws_ext_wholesale_cost#2448,ws_ext_list_price#2449] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2428), isnotnull(ws_sold_date_sk#2424)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
                              +- Sort [d_date_sk#2458 ASC NULLS FIRST], false, 0
                                 +- Exchange hashpartitioning(d_date_sk#2458, 200), ENSURE_REQUIREMENTS, [id=#3803]
                                    +- Filter ((isnotnull(d_year#2464) AND (d_year#2464 = 2002)) AND isnotnull(d_date_sk#2458))
                                       +- FileScan parquet [d_date_sk#2458,d_year#2464] Batched: true, DataFilters: [isnotnull(d_year#2464), (d_year#2464 = 2002), isnotnull(d_date_sk#2458)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
