AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(32) Sort [w_warehouse_sk#770 ASC NULLS FIRST, i_item_sk#668 ASC NULLS FIRST, d_moy#620 ASC NULLS FIRST, mean#10108 ASC NULLS FIRST, cov#10109 ASC NULLS FIRST, d_moy#10209 ASC NULLS FIRST, mean#10141 ASC NULLS FIRST, cov#10142 ASC NULLS FIRST], true, 0
   +- AQEShuffleRead coalesced
      +- ShuffleQueryStage 21
         +- Exchange rangepartitioning(w_warehouse_sk#770 ASC NULLS FIRST, i_item_sk#668 ASC NULLS FIRST, d_moy#620 ASC NULLS FIRST, mean#10108 ASC NULLS FIRST, cov#10109 ASC NULLS FIRST, d_moy#10209 ASC NULLS FIRST, mean#10141 ASC NULLS FIRST, cov#10142 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#136164]
            +- *(31) SortMergeJoin [i_item_sk#668, w_warehouse_sk#770], [i_item_sk#10165, w_warehouse_sk#10187], Inner
               :- *(29) Sort [i_item_sk#668 ASC NULLS FIRST, w_warehouse_sk#770 ASC NULLS FIRST], false, 0
               :  +- AQEShuffleRead coalesced
               :     +- ShuffleQueryStage 19
               :        +- Exchange hashpartitioning(i_item_sk#668, w_warehouse_sk#770, 200), ENSURE_REQUIREMENTS, [id=#136030]
               :           +- *(27) Project [w_warehouse_sk#770, i_item_sk#668, d_moy#620, mean#10108, CASE WHEN (mean#10108 = 0.0) THEN null ELSE (stdev#10107 / mean#10108) END AS cov#10109]
               :              +- *(27) Filter ((isnotnull(stdev#10107) AND isnotnull(mean#10108)) AND (NOT coalesce((mean#10108 = 0.0), false) AND ((stdev#10107 / mean#10108) > 1.0)))
               :                 +- *(27) HashAggregate(keys=[w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620], functions=[stddev_samp(cast(inv_quantity_on_hand#439 as double)), avg(inv_quantity_on_hand#439)], output=[w_warehouse_sk#770, i_item_sk#668, d_moy#620, stdev#10107, mean#10108])
               :                    +- AQEShuffleRead coalesced
               :                       +- ShuffleQueryStage 17
               :                          +- Exchange hashpartitioning(w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620, 200), ENSURE_REQUIREMENTS, [id=#135857]
               :                             +- *(23) HashAggregate(keys=[w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#439 as double)), partial_avg(inv_quantity_on_hand#439)], output=[w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620, n#10133, avg#10134, m2#10135, sum#10240, count#10241L])
               :                                +- *(23) Project [inv_quantity_on_hand#439, i_item_sk#668, w_warehouse_sk#770, w_warehouse_name#772, d_moy#620]
               :                                   +- *(23) SortMergeJoin [inv_date_sk#436], [d_date_sk#612], Inner
               :                                      :- *(21) Sort [inv_date_sk#436 ASC NULLS FIRST], false, 0
               :                                      :  +- AQEShuffleRead coalesced
               :                                      :     +- ShuffleQueryStage 14
               :                                      :        +- Exchange hashpartitioning(inv_date_sk#436, 200), ENSURE_REQUIREMENTS, [id=#135629]
               :                                      :           +- *(17) Project [inv_date_sk#436, inv_quantity_on_hand#439, i_item_sk#668, w_warehouse_sk#770, w_warehouse_name#772]
               :                                      :              +- *(17) SortMergeJoin [inv_warehouse_sk#438], [w_warehouse_sk#770], Inner
               :                                      :                 :- *(15) Sort [inv_warehouse_sk#438 ASC NULLS FIRST], false, 0
               :                                      :                 :  +- AQEShuffleRead coalesced
               :                                      :                 :     +- ShuffleQueryStage 11
               :                                      :                 :        +- Exchange hashpartitioning(inv_warehouse_sk#438, 200), ENSURE_REQUIREMENTS, [id=#135349]
               :                                      :                 :           +- *(11) Project [inv_date_sk#436, inv_warehouse_sk#438, inv_quantity_on_hand#439, i_item_sk#668]
               :                                      :                 :              +- *(11) SortMergeJoin [inv_item_sk#437], [i_item_sk#668], Inner
               :                                      :                 :                 :- *(9) Sort [inv_item_sk#437 ASC NULLS FIRST], false, 0
               :                                      :                 :                 :  +- AQEShuffleRead coalesced
               :                                      :                 :                 :     +- ShuffleQueryStage 0
               :                                      :                 :                 :        +- Exchange hashpartitioning(inv_item_sk#437, 200), ENSURE_REQUIREMENTS, [id=#134368]
               :                                      :                 :                 :           +- *(1) Filter ((isnotnull(inv_item_sk#437) AND isnotnull(inv_warehouse_sk#438)) AND isnotnull(inv_date_sk#436))
               :                                      :                 :                 :              +- *(1) ColumnarToRow
               :                                      :                 :                 :                 +- FileScan parquet [inv_date_sk#436,inv_item_sk#437,inv_warehouse_sk#438,inv_quantity_on_hand#439] Batched: true, DataFilters: [isnotnull(inv_item_sk#437), isnotnull(inv_warehouse_sk#438), isnotnull(inv_date_sk#436)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/inventory.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
               :                                      :                 :                 +- *(10) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
               :                                      :                 :                    +- AQEShuffleRead coalesced
               :                                      :                 :                       +- ShuffleQueryStage 1
               :                                      :                 :                          +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#134385]
               :                                      :                 :                             +- *(2) Filter isnotnull(i_item_sk#668)
               :                                      :                 :                                +- *(2) ColumnarToRow
               :                                      :                 :                                   +- FileScan parquet [i_item_sk#668] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>
               :                                      :                 +- *(16) Sort [w_warehouse_sk#770 ASC NULLS FIRST], false, 0
               :                                      :                    +- AQEShuffleRead coalesced
               :                                      :                       +- ShuffleQueryStage 2
               :                                      :                          +- Exchange hashpartitioning(w_warehouse_sk#770, 200), ENSURE_REQUIREMENTS, [id=#134406]
               :                                      :                             +- *(3) Filter isnotnull(w_warehouse_sk#770)
               :                                      :                                +- *(3) ColumnarToRow
               :                                      :                                   +- FileScan parquet [w_warehouse_sk#770,w_warehouse_name#772] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#770)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/warehouse.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
               :                                      +- *(22) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
               :                                         +- AQEShuffleRead coalesced
               :                                            +- ShuffleQueryStage 3
               :                                               +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#134429]
               :                                                  +- *(4) Project [d_date_sk#612, d_moy#620]
               :                                                     +- *(4) Filter ((((isnotnull(d_year#618) AND isnotnull(d_moy#620)) AND (d_year#618 = 2001)) AND (d_moy#620 = 1)) AND isnotnull(d_date_sk#612))
               :                                                        +- *(4) ColumnarToRow
               :                                                           +- FileScan parquet [d_date_sk#612,d_year#618,d_moy#620] Batched: true, DataFilters: [isnotnull(d_year#618), isnotnull(d_moy#620), (d_year#618 = 2001), (d_moy#620 = 1), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               +- *(30) Sort [i_item_sk#10165 ASC NULLS FIRST, w_warehouse_sk#10187 ASC NULLS FIRST], false, 0
                  +- AQEShuffleRead coalesced
                     +- ShuffleQueryStage 20
                        +- Exchange hashpartitioning(i_item_sk#10165, w_warehouse_sk#10187, 200), ENSURE_REQUIREMENTS, [id=#136109]
                           +- *(28) Project [w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, mean#10108 AS mean#10141, CASE WHEN (mean#10108 = 0.0) THEN null ELSE (stdev#10107 / mean#10108) END AS cov#10142]
                              +- *(28) Filter ((isnotnull(stdev#10107) AND isnotnull(mean#10108)) AND (NOT coalesce((mean#10108 = 0.0), false) AND ((stdev#10107 / mean#10108) > 1.0)))
                                 +- *(28) HashAggregate(keys=[w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209], functions=[stddev_samp(cast(inv_quantity_on_hand#10164 as double)), avg(inv_quantity_on_hand#10164)], output=[w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, stdev#10107, mean#10108])
                                    +- AQEShuffleRead coalesced
                                       +- ShuffleQueryStage 18
                                          +- Exchange hashpartitioning(w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, 200), ENSURE_REQUIREMENTS, [id=#135905]
                                             +- *(26) HashAggregate(keys=[w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#10164 as double)), partial_avg(inv_quantity_on_hand#10164)], output=[w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, n#10234, avg#10235, m2#10236, sum#10252, count#10253L])
                                                +- *(26) Project [inv_quantity_on_hand#10164, i_item_sk#10165, w_warehouse_sk#10187, w_warehouse_name#10189, d_moy#10209]
                                                   +- *(26) SortMergeJoin [inv_date_sk#10161], [d_date_sk#10201], Inner
                                                      :- *(24) Sort [inv_date_sk#10161 ASC NULLS FIRST], false, 0
                                                      :  +- AQEShuffleRead coalesced
                                                      :     +- ShuffleQueryStage 16
                                                      :        +- ReusedExchange [inv_date_sk#10161, inv_quantity_on_hand#10164, i_item_sk#10165, w_warehouse_sk#10187, w_warehouse_name#10189], Exchange hashpartitioning(inv_date_sk#436, 200), ENSURE_REQUIREMENTS, [id=#135629]
                                                      +- *(25) Sort [d_date_sk#10201 ASC NULLS FIRST], false, 0
                                                         +- AQEShuffleRead coalesced
                                                            +- ShuffleQueryStage 10
                                                               +- Exchange hashpartitioning(d_date_sk#10201, 200), ENSURE_REQUIREMENTS, [id=#134524]
                                                                  +- *(8) Project [d_date_sk#10201, d_moy#10209]
                                                                     +- *(8) Filter ((((isnotnull(d_year#10207) AND isnotnull(d_moy#10209)) AND (d_year#10207 = 2001)) AND (d_moy#10209 = 2)) AND isnotnull(d_date_sk#10201))
                                                                        +- *(8) ColumnarToRow
                                                                           +- FileScan parquet [d_date_sk#10201,d_year#10207,d_moy#10209] Batched: true, DataFilters: [isnotnull(d_year#10207), isnotnull(d_moy#10209), (d_year#10207 = 2001), (d_moy#10209 = 2), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
+- == Initial Plan ==
   Sort [w_warehouse_sk#770 ASC NULLS FIRST, i_item_sk#668 ASC NULLS FIRST, d_moy#620 ASC NULLS FIRST, mean#10108 ASC NULLS FIRST, cov#10109 ASC NULLS FIRST, d_moy#10209 ASC NULLS FIRST, mean#10141 ASC NULLS FIRST, cov#10142 ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(w_warehouse_sk#770 ASC NULLS FIRST, i_item_sk#668 ASC NULLS FIRST, d_moy#620 ASC NULLS FIRST, mean#10108 ASC NULLS FIRST, cov#10109 ASC NULLS FIRST, d_moy#10209 ASC NULLS FIRST, mean#10141 ASC NULLS FIRST, cov#10142 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#134227]
      +- SortMergeJoin [i_item_sk#668, w_warehouse_sk#770], [i_item_sk#10165, w_warehouse_sk#10187], Inner
         :- Sort [i_item_sk#668 ASC NULLS FIRST, w_warehouse_sk#770 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(i_item_sk#668, w_warehouse_sk#770, 200), ENSURE_REQUIREMENTS, [id=#134221]
         :     +- Project [w_warehouse_sk#770, i_item_sk#668, d_moy#620, mean#10108, CASE WHEN (mean#10108 = 0.0) THEN null ELSE (stdev#10107 / mean#10108) END AS cov#10109]
         :        +- Filter ((isnotnull(stdev#10107) AND isnotnull(mean#10108)) AND (NOT coalesce((mean#10108 = 0.0), false) AND ((stdev#10107 / mean#10108) > 1.0)))
         :           +- HashAggregate(keys=[w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620], functions=[stddev_samp(cast(inv_quantity_on_hand#439 as double)), avg(inv_quantity_on_hand#439)], output=[w_warehouse_sk#770, i_item_sk#668, d_moy#620, stdev#10107, mean#10108])
         :              +- Exchange hashpartitioning(w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620, 200), ENSURE_REQUIREMENTS, [id=#134186]
         :                 +- HashAggregate(keys=[w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#439 as double)), partial_avg(inv_quantity_on_hand#439)], output=[w_warehouse_name#772, w_warehouse_sk#770, i_item_sk#668, d_moy#620, n#10133, avg#10134, m2#10135, sum#10240, count#10241L])
         :                    +- Project [inv_quantity_on_hand#439, i_item_sk#668, w_warehouse_sk#770, w_warehouse_name#772, d_moy#620]
         :                       +- SortMergeJoin [inv_date_sk#436], [d_date_sk#612], Inner
         :                          :- Sort [inv_date_sk#436 ASC NULLS FIRST], false, 0
         :                          :  +- Exchange hashpartitioning(inv_date_sk#436, 200), ENSURE_REQUIREMENTS, [id=#134178]
         :                          :     +- Project [inv_date_sk#436, inv_quantity_on_hand#439, i_item_sk#668, w_warehouse_sk#770, w_warehouse_name#772]
         :                          :        +- SortMergeJoin [inv_warehouse_sk#438], [w_warehouse_sk#770], Inner
         :                          :           :- Sort [inv_warehouse_sk#438 ASC NULLS FIRST], false, 0
         :                          :           :  +- Exchange hashpartitioning(inv_warehouse_sk#438, 200), ENSURE_REQUIREMENTS, [id=#134170]
         :                          :           :     +- Project [inv_date_sk#436, inv_warehouse_sk#438, inv_quantity_on_hand#439, i_item_sk#668]
         :                          :           :        +- SortMergeJoin [inv_item_sk#437], [i_item_sk#668], Inner
         :                          :           :           :- Sort [inv_item_sk#437 ASC NULLS FIRST], false, 0
         :                          :           :           :  +- Exchange hashpartitioning(inv_item_sk#437, 200), ENSURE_REQUIREMENTS, [id=#134162]
         :                          :           :           :     +- Filter ((isnotnull(inv_item_sk#437) AND isnotnull(inv_warehouse_sk#438)) AND isnotnull(inv_date_sk#436))
         :                          :           :           :        +- FileScan parquet [inv_date_sk#436,inv_item_sk#437,inv_warehouse_sk#438,inv_quantity_on_hand#439] Batched: true, DataFilters: [isnotnull(inv_item_sk#437), isnotnull(inv_warehouse_sk#438), isnotnull(inv_date_sk#436)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/inventory.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
         :                          :           :           +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
         :                          :           :              +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#134163]
         :                          :           :                 +- Filter isnotnull(i_item_sk#668)
         :                          :           :                    +- FileScan parquet [i_item_sk#668] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>
         :                          :           +- Sort [w_warehouse_sk#770 ASC NULLS FIRST], false, 0
         :                          :              +- Exchange hashpartitioning(w_warehouse_sk#770, 200), ENSURE_REQUIREMENTS, [id=#134171]
         :                          :                 +- Filter isnotnull(w_warehouse_sk#770)
         :                          :                    +- FileScan parquet [w_warehouse_sk#770,w_warehouse_name#772] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#770)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/warehouse.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
         :                          +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :                             +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#134179]
         :                                +- Project [d_date_sk#612, d_moy#620]
         :                                   +- Filter ((((isnotnull(d_year#618) AND isnotnull(d_moy#620)) AND (d_year#618 = 2001)) AND (d_moy#620 = 1)) AND isnotnull(d_date_sk#612))
         :                                      +- FileScan parquet [d_date_sk#612,d_year#618,d_moy#620] Batched: true, DataFilters: [isnotnull(d_year#618), isnotnull(d_moy#620), (d_year#618 = 2001), (d_moy#620 = 1), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
         +- Sort [i_item_sk#10165 ASC NULLS FIRST, w_warehouse_sk#10187 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(i_item_sk#10165, w_warehouse_sk#10187, 200), ENSURE_REQUIREMENTS, [id=#134222]
               +- Project [w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, mean#10108 AS mean#10141, CASE WHEN (mean#10108 = 0.0) THEN null ELSE (stdev#10107 / mean#10108) END AS cov#10142]
                  +- Filter ((isnotnull(stdev#10107) AND isnotnull(mean#10108)) AND (NOT coalesce((mean#10108 = 0.0), false) AND ((stdev#10107 / mean#10108) > 1.0)))
                     +- HashAggregate(keys=[w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209], functions=[stddev_samp(cast(inv_quantity_on_hand#10164 as double)), avg(inv_quantity_on_hand#10164)], output=[w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, stdev#10107, mean#10108])
                        +- Exchange hashpartitioning(w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, 200), ENSURE_REQUIREMENTS, [id=#134215]
                           +- HashAggregate(keys=[w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#10164 as double)), partial_avg(inv_quantity_on_hand#10164)], output=[w_warehouse_name#10189, w_warehouse_sk#10187, i_item_sk#10165, d_moy#10209, n#10234, avg#10235, m2#10236, sum#10252, count#10253L])
                              +- Project [inv_quantity_on_hand#10164, i_item_sk#10165, w_warehouse_sk#10187, w_warehouse_name#10189, d_moy#10209]
                                 +- SortMergeJoin [inv_date_sk#10161], [d_date_sk#10201], Inner
                                    :- Sort [inv_date_sk#10161 ASC NULLS FIRST], false, 0
                                    :  +- Exchange hashpartitioning(inv_date_sk#10161, 200), ENSURE_REQUIREMENTS, [id=#134207]
                                    :     +- Project [inv_date_sk#10161, inv_quantity_on_hand#10164, i_item_sk#10165, w_warehouse_sk#10187, w_warehouse_name#10189]
                                    :        +- SortMergeJoin [inv_warehouse_sk#10163], [w_warehouse_sk#10187], Inner
                                    :           :- Sort [inv_warehouse_sk#10163 ASC NULLS FIRST], false, 0
                                    :           :  +- Exchange hashpartitioning(inv_warehouse_sk#10163, 200), ENSURE_REQUIREMENTS, [id=#134199]
                                    :           :     +- Project [inv_date_sk#10161, inv_warehouse_sk#10163, inv_quantity_on_hand#10164, i_item_sk#10165]
                                    :           :        +- SortMergeJoin [inv_item_sk#10162], [i_item_sk#10165], Inner
                                    :           :           :- Sort [inv_item_sk#10162 ASC NULLS FIRST], false, 0
                                    :           :           :  +- Exchange hashpartitioning(inv_item_sk#10162, 200), ENSURE_REQUIREMENTS, [id=#134191]
                                    :           :           :     +- Filter ((isnotnull(inv_item_sk#10162) AND isnotnull(inv_warehouse_sk#10163)) AND isnotnull(inv_date_sk#10161))
                                    :           :           :        +- FileScan parquet [inv_date_sk#10161,inv_item_sk#10162,inv_warehouse_sk#10163,inv_quantity_on_hand#10164] Batched: true, DataFilters: [isnotnull(inv_item_sk#10162), isnotnull(inv_warehouse_sk#10163), isnotnull(inv_date_sk#10161)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/inventory.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
                                    :           :           +- Sort [i_item_sk#10165 ASC NULLS FIRST], false, 0
                                    :           :              +- Exchange hashpartitioning(i_item_sk#10165, 200), ENSURE_REQUIREMENTS, [id=#134192]
                                    :           :                 +- Filter isnotnull(i_item_sk#10165)
                                    :           :                    +- FileScan parquet [i_item_sk#10165] Batched: true, DataFilters: [isnotnull(i_item_sk#10165)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>
                                    :           +- Sort [w_warehouse_sk#10187 ASC NULLS FIRST], false, 0
                                    :              +- Exchange hashpartitioning(w_warehouse_sk#10187, 200), ENSURE_REQUIREMENTS, [id=#134200]
                                    :                 +- Filter isnotnull(w_warehouse_sk#10187)
                                    :                    +- FileScan parquet [w_warehouse_sk#10187,w_warehouse_name#10189] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#10187)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/warehouse.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
                                    +- Sort [d_date_sk#10201 ASC NULLS FIRST], false, 0
                                       +- Exchange hashpartitioning(d_date_sk#10201, 200), ENSURE_REQUIREMENTS, [id=#134208]
                                          +- Project [d_date_sk#10201, d_moy#10209]
                                             +- Filter ((((isnotnull(d_year#10207) AND isnotnull(d_moy#10209)) AND (d_year#10207 = 2001)) AND (d_moy#10209 = 2)) AND isnotnull(d_date_sk#10201))
                                                +- FileScan parquet [d_date_sk#10201,d_year#10207,d_moy#10209] Batched: true, DataFilters: [isnotnull(d_year#10207), isnotnull(d_moy#10209), (d_year#10207 = 2001), (d_moy#10209 = 2), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
