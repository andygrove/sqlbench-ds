AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name1#13707 ASC NULLS FIRST,s_store_id1#13709 ASC NULLS FIRST,d_week_seq1#13708 ASC NULLS FIRST], output=[s_store_name1#13707,s_store_id1#13709,d_week_seq1#13708,(sun_sales1 / sun_sales2)#13826,(mon_sales1 / mon_sales2)#13827,(tue_sales1 / tue_sales2)#13828,(wed_sales1 / wed_sales2)#13829,(thu_sales1 / thu_sales2)#13830,(fri_sales1 / fri_sales2)#13831,(sat_sales1 / sat_sales2)#13832])
   +- *(31) Project [s_store_name1#13707, s_store_id1#13709, d_week_seq1#13708, CheckOverflow((promote_precision(sun_sales1#13710) / promote_precision(sun_sales2#13720)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#13826, CheckOverflow((promote_precision(mon_sales1#13711) / promote_precision(mon_sales2#13721)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#13827, CheckOverflow((promote_precision(tue_sales1#13712) / promote_precision(tue_sales2#13722)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales2)#13828, CheckOverflow((promote_precision(wed_sales1#13713) / promote_precision(wed_sales2#13723)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#13829, CheckOverflow((promote_precision(thu_sales1#13714) / promote_precision(thu_sales2#13724)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#13830, CheckOverflow((promote_precision(fri_sales1#13715) / promote_precision(fri_sales2#13725)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#13831, CheckOverflow((promote_precision(sat_sales1#13716) / promote_precision(sat_sales2#13726)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#13832]
      +- *(31) SortMergeJoin [s_store_id1#13709, d_week_seq1#13708], [s_store_id2#13719, (d_week_seq2#13718 - 52)], Inner
         :- *(29) Sort [s_store_id1#13709 ASC NULLS FIRST, d_week_seq1#13708 ASC NULLS FIRST], false, 0
         :  +- AQEShuffleRead coalesced
         :     +- ShuffleQueryStage 18
         :        +- Exchange hashpartitioning(s_store_id1#13709, d_week_seq1#13708, 200), ENSURE_REQUIREMENTS, [id=#171644]
         :           +- *(25) Project [s_store_name#717 AS s_store_name1#13707, d_week_seq#616 AS d_week_seq1#13708, s_store_id#713 AS s_store_id1#13709, sun_sales#13727 AS sun_sales1#13710, mon_sales#13728 AS mon_sales1#13711, tue_sales#13729 AS tue_sales1#13712, wed_sales#13730 AS wed_sales1#13713, thu_sales#13731 AS thu_sales1#13714, fri_sales#13732 AS fri_sales1#13715, sat_sales#13733 AS sat_sales1#13716]
         :              +- *(25) SortMergeJoin [d_week_seq#616], [d_week_seq#13738], Inner
         :                 :- *(23) Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
         :                 :  +- AQEShuffleRead coalesced
         :                 :     +- ShuffleQueryStage 16
         :                 :        +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#171483]
         :                 :           +- *(19) Project [d_week_seq#616, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733, s_store_id#713, s_store_name#717]
         :                 :              +- *(19) SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
         :                 :                 :- *(17) Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
         :                 :                 :  +- AQEShuffleRead coalesced
         :                 :                 :     +- ShuffleQueryStage 13
         :                 :                 :        +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#171306]
         :                 :                 :           +- *(15) HashAggregate(keys=[d_week_seq#616, ss_store_sk#259], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[d_week_seq#616, ss_store_sk#259, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733])
         :                 :                 :              +- AQEShuffleRead coalesced
         :                 :                 :                 +- ShuffleQueryStage 10
         :                 :                 :                    +- Exchange hashpartitioning(d_week_seq#616, ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#171109]
         :                 :                 :                       +- *(11) HashAggregate(keys=[d_week_seq#616, ss_store_sk#259], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[d_week_seq#616, ss_store_sk#259, sum#13850L, sum#13851L, sum#13852L, sum#13853L, sum#13854L, sum#13855L, sum#13856L])
         :                 :                 :                          +- *(11) Project [ss_store_sk#259, ss_sales_price#265, d_week_seq#616, d_day_name#626]
         :                 :                 :                             +- *(11) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :                 :                 :                                :- *(9) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :                 :                 :                                :  +- AQEShuffleRead coalesced
         :                 :                 :                                :     +- ShuffleQueryStage 0
         :                 :                 :                                :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#170289]
         :                 :                 :                                :           +- *(1) Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
         :                 :                 :                                :              +- *(1) ColumnarToRow
         :                 :                 :                                :                 +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :                 :                 :                                +- *(10) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :                 :                 :                                   +- AQEShuffleRead coalesced
         :                 :                 :                                      +- ShuffleQueryStage 1
         :                 :                 :                                         +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#170306]
         :                 :                 :                                            +- *(2) Filter (isnotnull(d_date_sk#612) AND isnotnull(d_week_seq#616))
         :                 :                 :                                               +- *(2) ColumnarToRow
         :                 :                 :                                                  +- FileScan parquet [d_date_sk#612,d_week_seq#616,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_date_sk#612), isnotnull(d_week_seq#616)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
         :                 :                 +- *(18) Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
         :                 :                    +- AQEShuffleRead coalesced
         :                 :                       +- ShuffleQueryStage 2
         :                 :                          +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#170330]
         :                 :                             +- *(3) Filter (isnotnull(s_store_sk#712) AND isnotnull(s_store_id#713))
         :                 :                                +- *(3) ColumnarToRow
         :                 :                                   +- FileScan parquet [s_store_sk#712,s_store_id#713,s_store_name#717] Batched: true, DataFilters: [isnotnull(s_store_sk#712), isnotnull(s_store_id#713)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
         :                 +- *(24) Sort [d_week_seq#13738 ASC NULLS FIRST], false, 0
         :                    +- AQEShuffleRead coalesced
         :                       +- ShuffleQueryStage 3
         :                          +- Exchange hashpartitioning(d_week_seq#13738, 200), ENSURE_REQUIREMENTS, [id=#170353]
         :                             +- *(4) Project [d_week_seq#13738]
         :                                +- *(4) Filter (((isnotnull(d_month_seq#13737) AND (d_month_seq#13737 >= 1183)) AND (d_month_seq#13737 <= 1194)) AND isnotnull(d_week_seq#13738))
         :                                   +- *(4) ColumnarToRow
         :                                      +- FileScan parquet [d_month_seq#13737,d_week_seq#13738] Batched: true, DataFilters: [isnotnull(d_month_seq#13737), (d_month_seq#13737 >= 1183), (d_month_seq#13737 <= 1194), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1183), LessThanOrEqual(d_month_seq,1194),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
         +- *(30) Sort [s_store_id2#13719 ASC NULLS FIRST, (d_week_seq2#13718 - 52) ASC NULLS FIRST], false, 0
            +- AQEShuffleRead coalesced
               +- ShuffleQueryStage 19
                  +- Exchange hashpartitioning(s_store_id2#13719, (d_week_seq2#13718 - 52), 200), ENSURE_REQUIREMENTS, [id=#171727]
                     +- *(28) Project [d_week_seq#616 AS d_week_seq2#13718, s_store_id#13763 AS s_store_id2#13719, sun_sales#13727 AS sun_sales2#13720, mon_sales#13728 AS mon_sales2#13721, tue_sales#13729 AS tue_sales2#13722, wed_sales#13730 AS wed_sales2#13723, thu_sales#13731 AS thu_sales2#13724, fri_sales#13732 AS fri_sales2#13725, sat_sales#13733 AS sat_sales2#13726]
                        +- *(28) SortMergeJoin [d_week_seq#616], [d_week_seq#13795], Inner
                           :- *(26) Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
                           :  +- AQEShuffleRead coalesced
                           :     +- ShuffleQueryStage 17
                           :        +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#171543]
                           :           +- *(22) Project [d_week_seq#616, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733, s_store_id#13763]
                           :              +- *(22) SortMergeJoin [ss_store_sk#259], [s_store_sk#13762], Inner
                           :                 :- *(20) Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                           :                 :  +- AQEShuffleRead coalesced
                           :                 :     +- ShuffleQueryStage 15
                           :                 :        +- ReusedExchange [d_week_seq#616, ss_store_sk#259, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733], Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#171306]
                           :                 +- *(21) Sort [s_store_sk#13762 ASC NULLS FIRST], false, 0
                           :                    +- AQEShuffleRead coalesced
                           :                       +- ShuffleQueryStage 8
                           :                          +- Exchange hashpartitioning(s_store_sk#13762, 200), ENSURE_REQUIREMENTS, [id=#170479]
                           :                             +- *(7) Filter (isnotnull(s_store_sk#13762) AND isnotnull(s_store_id#13763))
                           :                                +- *(7) ColumnarToRow
                           :                                   +- FileScan parquet [s_store_sk#13762,s_store_id#13763] Batched: true, DataFilters: [isnotnull(s_store_sk#13762), isnotnull(s_store_id#13763)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                           +- *(27) Sort [d_week_seq#13795 ASC NULLS FIRST], false, 0
                              +- AQEShuffleRead coalesced
                                 +- ShuffleQueryStage 9
                                    +- Exchange hashpartitioning(d_week_seq#13795, 200), ENSURE_REQUIREMENTS, [id=#170502]
                                       +- *(8) Project [d_week_seq#13795]
                                          +- *(8) Filter (((isnotnull(d_month_seq#13794) AND (d_month_seq#13794 >= 1195)) AND (d_month_seq#13794 <= 1206)) AND isnotnull(d_week_seq#13795))
                                             +- *(8) ColumnarToRow
                                                +- FileScan parquet [d_month_seq#13794,d_week_seq#13795] Batched: true, DataFilters: [isnotnull(d_month_seq#13794), (d_month_seq#13794 >= 1195), (d_month_seq#13794 <= 1206), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1195), LessThanOrEqual(d_month_seq,1206),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name1#13707 ASC NULLS FIRST,s_store_id1#13709 ASC NULLS FIRST,d_week_seq1#13708 ASC NULLS FIRST], output=[s_store_name1#13707,s_store_id1#13709,d_week_seq1#13708,(sun_sales1 / sun_sales2)#13826,(mon_sales1 / mon_sales2)#13827,(tue_sales1 / tue_sales2)#13828,(wed_sales1 / wed_sales2)#13829,(thu_sales1 / thu_sales2)#13830,(fri_sales1 / fri_sales2)#13831,(sat_sales1 / sat_sales2)#13832])
   +- Project [s_store_name1#13707, s_store_id1#13709, d_week_seq1#13708, CheckOverflow((promote_precision(sun_sales1#13710) / promote_precision(sun_sales2#13720)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#13826, CheckOverflow((promote_precision(mon_sales1#13711) / promote_precision(mon_sales2#13721)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#13827, CheckOverflow((promote_precision(tue_sales1#13712) / promote_precision(tue_sales2#13722)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales2)#13828, CheckOverflow((promote_precision(wed_sales1#13713) / promote_precision(wed_sales2#13723)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#13829, CheckOverflow((promote_precision(thu_sales1#13714) / promote_precision(thu_sales2#13724)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#13830, CheckOverflow((promote_precision(fri_sales1#13715) / promote_precision(fri_sales2#13725)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#13831, CheckOverflow((promote_precision(sat_sales1#13716) / promote_precision(sat_sales2#13726)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#13832]
      +- SortMergeJoin [s_store_id1#13709, d_week_seq1#13708], [s_store_id2#13719, (d_week_seq2#13718 - 52)], Inner
         :- Sort [s_store_id1#13709 ASC NULLS FIRST, d_week_seq1#13708 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(s_store_id1#13709, d_week_seq1#13708, 200), ENSURE_REQUIREMENTS, [id=#170217]
         :     +- Project [s_store_name#717 AS s_store_name1#13707, d_week_seq#616 AS d_week_seq1#13708, s_store_id#713 AS s_store_id1#13709, sun_sales#13727 AS sun_sales1#13710, mon_sales#13728 AS mon_sales1#13711, tue_sales#13729 AS tue_sales1#13712, wed_sales#13730 AS wed_sales1#13713, thu_sales#13731 AS thu_sales1#13714, fri_sales#13732 AS fri_sales1#13715, sat_sales#13733 AS sat_sales1#13716]
         :        +- SortMergeJoin [d_week_seq#616], [d_week_seq#13738], Inner
         :           :- Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
         :           :  +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#170182]
         :           :     +- Project [d_week_seq#616, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733, s_store_id#713, s_store_name#717]
         :           :        +- SortMergeJoin [ss_store_sk#259], [s_store_sk#712], Inner
         :           :           :- Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
         :           :           :  +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#170174]
         :           :           :     +- HashAggregate(keys=[d_week_seq#616, ss_store_sk#259], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[d_week_seq#616, ss_store_sk#259, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733])
         :           :           :        +- Exchange hashpartitioning(d_week_seq#616, ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#170170]
         :           :           :           +- HashAggregate(keys=[d_week_seq#616, ss_store_sk#259], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[d_week_seq#616, ss_store_sk#259, sum#13850L, sum#13851L, sum#13852L, sum#13853L, sum#13854L, sum#13855L, sum#13856L])
         :           :           :              +- Project [ss_store_sk#259, ss_sales_price#265, d_week_seq#616, d_day_name#626]
         :           :           :                 +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :           :           :                    :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :           :           :                    :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#170162]
         :           :           :                    :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
         :           :           :                    :        +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :           :           :                    +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :           :           :                       +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#170163]
         :           :           :                          +- Filter (isnotnull(d_date_sk#612) AND isnotnull(d_week_seq#616))
         :           :           :                             +- FileScan parquet [d_date_sk#612,d_week_seq#616,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_date_sk#612), isnotnull(d_week_seq#616)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
         :           :           +- Sort [s_store_sk#712 ASC NULLS FIRST], false, 0
         :           :              +- Exchange hashpartitioning(s_store_sk#712, 200), ENSURE_REQUIREMENTS, [id=#170175]
         :           :                 +- Filter (isnotnull(s_store_sk#712) AND isnotnull(s_store_id#713))
         :           :                    +- FileScan parquet [s_store_sk#712,s_store_id#713,s_store_name#717] Batched: true, DataFilters: [isnotnull(s_store_sk#712), isnotnull(s_store_id#713)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
         :           +- Sort [d_week_seq#13738 ASC NULLS FIRST], false, 0
         :              +- Exchange hashpartitioning(d_week_seq#13738, 200), ENSURE_REQUIREMENTS, [id=#170183]
         :                 +- Project [d_week_seq#13738]
         :                    +- Filter (((isnotnull(d_month_seq#13737) AND (d_month_seq#13737 >= 1183)) AND (d_month_seq#13737 <= 1194)) AND isnotnull(d_week_seq#13738))
         :                       +- FileScan parquet [d_month_seq#13737,d_week_seq#13738] Batched: true, DataFilters: [isnotnull(d_month_seq#13737), (d_month_seq#13737 >= 1183), (d_month_seq#13737 <= 1194), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1183), LessThanOrEqual(d_month_seq,1194),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
         +- Sort [s_store_id2#13719 ASC NULLS FIRST, (d_week_seq2#13718 - 52) ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(s_store_id2#13719, (d_week_seq2#13718 - 52), 200), ENSURE_REQUIREMENTS, [id=#170218]
               +- Project [d_week_seq#616 AS d_week_seq2#13718, s_store_id#13763 AS s_store_id2#13719, sun_sales#13727 AS sun_sales2#13720, mon_sales#13728 AS mon_sales2#13721, tue_sales#13729 AS tue_sales2#13722, wed_sales#13730 AS wed_sales2#13723, thu_sales#13731 AS thu_sales2#13724, fri_sales#13732 AS fri_sales2#13725, sat_sales#13733 AS sat_sales2#13726]
                  +- SortMergeJoin [d_week_seq#616], [d_week_seq#13795], Inner
                     :- Sort [d_week_seq#616 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(d_week_seq#616, 200), ENSURE_REQUIREMENTS, [id=#170209]
                     :     +- Project [d_week_seq#616, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733, s_store_id#13763]
                     :        +- SortMergeJoin [ss_store_sk#259], [s_store_sk#13762], Inner
                     :           :- Sort [ss_store_sk#259 ASC NULLS FIRST], false, 0
                     :           :  +- Exchange hashpartitioning(ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#170201]
                     :           :     +- HashAggregate(keys=[d_week_seq#616, ss_store_sk#259], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[d_week_seq#616, ss_store_sk#259, sun_sales#13727, mon_sales#13728, tue_sales#13729, wed_sales#13730, thu_sales#13731, fri_sales#13732, sat_sales#13733])
                     :           :        +- Exchange hashpartitioning(d_week_seq#616, ss_store_sk#259, 200), ENSURE_REQUIREMENTS, [id=#170197]
                     :           :           +- HashAggregate(keys=[d_week_seq#616, ss_store_sk#259], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Sunday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Monday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Tuesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Wednesday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Thursday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Friday) THEN ss_sales_price#265 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#626 = Saturday) THEN ss_sales_price#265 END))], output=[d_week_seq#616, ss_store_sk#259, sum#13864L, sum#13865L, sum#13866L, sum#13867L, sum#13868L, sum#13869L, sum#13870L])
                     :           :              +- Project [ss_store_sk#259, ss_sales_price#265, d_week_seq#616, d_day_name#626]
                     :           :                 +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                     :           :                    :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                     :           :                    :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#170189]
                     :           :                    :     +- Filter (isnotnull(ss_sold_date_sk#252) AND isnotnull(ss_store_sk#259))
                     :           :                    :        +- FileScan parquet [ss_sold_date_sk#252,ss_store_sk#259,ss_sales_price#265] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252), isnotnull(ss_store_sk#259)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                     :           :                    +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                     :           :                       +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#170190]
                     :           :                          +- Filter (isnotnull(d_date_sk#612) AND isnotnull(d_week_seq#616))
                     :           :                             +- FileScan parquet [d_date_sk#612,d_week_seq#616,d_day_name#626] Batched: true, DataFilters: [isnotnull(d_date_sk#612), isnotnull(d_week_seq#616)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
                     :           +- Sort [s_store_sk#13762 ASC NULLS FIRST], false, 0
                     :              +- Exchange hashpartitioning(s_store_sk#13762, 200), ENSURE_REQUIREMENTS, [id=#170202]
                     :                 +- Filter (isnotnull(s_store_sk#13762) AND isnotnull(s_store_id#13763))
                     :                    +- FileScan parquet [s_store_sk#13762,s_store_id#13763] Batched: true, DataFilters: [isnotnull(s_store_sk#13762), isnotnull(s_store_id#13763)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                     +- Sort [d_week_seq#13795 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(d_week_seq#13795, 200), ENSURE_REQUIREMENTS, [id=#170210]
                           +- Project [d_week_seq#13795]
                              +- Filter (((isnotnull(d_month_seq#13794) AND (d_month_seq#13794 >= 1195)) AND (d_month_seq#13794 <= 1206)) AND isnotnull(d_week_seq#13795))
                                 +- FileScan parquet [d_month_seq#13794,d_week_seq#13795] Batched: true, DataFilters: [isnotnull(d_month_seq#13794), (d_month_seq#13794 >= 1195), (d_month_seq#13794 <= 1206), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1195), LessThanOrEqual(d_month_seq,1206),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
