AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(14) HashAggregate(keys=[], functions=[sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnull(customer_sk#22074)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END)], output=[store_only#22069L, catalog_only#22070L, store_and_catalog#22071L])
   +- ShuffleQueryStage 7
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#280594]
         +- *(13) HashAggregate(keys=[], functions=[partial_sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnull(customer_sk#22074)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END)], output=[sum#22113L, sum#22114L, sum#22115L])
            +- *(13) Project [customer_sk#22072, customer_sk#22074]
               +- SortMergeJoin [customer_sk#22072, item_sk#22073], [customer_sk#22074, item_sk#22075], FullOuter
                  :- *(11) Sort [customer_sk#22072 ASC NULLS FIRST, item_sk#22073 ASC NULLS FIRST], false, 0
                  :  +- *(11) HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[customer_sk#22072, item_sk#22073])
                  :     +- AQEShuffleRead coalesced
                  :        +- ShuffleQueryStage 5
                  :           +- Exchange hashpartitioning(ss_customer_sk#255, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#280377]
                  :              +- *(7) HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[ss_customer_sk#255, ss_item_sk#254])
                  :                 +- *(7) Project [ss_item_sk#254, ss_customer_sk#255]
                  :                    +- *(7) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                  :                       :- *(5) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                  :                       :  +- AQEShuffleRead coalesced
                  :                       :     +- ShuffleQueryStage 0
                  :                       :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#280094]
                  :                       :           +- *(1) Filter isnotnull(ss_sold_date_sk#252)
                  :                       :              +- *(1) ColumnarToRow
                  :                       :                 +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_customer_sk#255] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
                  :                       +- *(6) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :                          +- AQEShuffleRead coalesced
                  :                             +- ShuffleQueryStage 1
                  :                                +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#280113]
                  :                                   +- *(2) Project [d_date_sk#612]
                  :                                      +- *(2) Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1219)) AND (d_month_seq#615 <= 1230)) AND isnotnull(d_date_sk#612))
                  :                                         +- *(2) ColumnarToRow
                  :                                            +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1219), (d_month_seq#615 <= 1230), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1219), LessThanOrEqual(d_month_seq,1230),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                  +- *(12) Sort [customer_sk#22074 ASC NULLS FIRST, item_sk#22075 ASC NULLS FIRST], false, 0
                     +- *(12) HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[customer_sk#22074, item_sk#22075])
                        +- AQEShuffleRead coalesced
                           +- ShuffleQueryStage 6
                              +- Exchange hashpartitioning(cs_bill_customer_sk#547, cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#280484]
                                 +- *(10) HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[cs_bill_customer_sk#547, cs_item_sk#559])
                                    +- *(10) Project [cs_bill_customer_sk#547, cs_item_sk#559]
                                       +- *(10) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#22076], Inner
                                          :- *(8) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                                          :  +- AQEShuffleRead coalesced
                                          :     +- ShuffleQueryStage 2
                                          :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#280138]
                                          :           +- *(3) Filter isnotnull(cs_sold_date_sk#544)
                                          :              +- *(3) ColumnarToRow
                                          :                 +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>
                                          +- *(9) Sort [d_date_sk#22076 ASC NULLS FIRST], false, 0
                                             +- AQEShuffleRead coalesced
                                                +- ShuffleQueryStage 4
                                                   +- ReusedExchange [d_date_sk#22076], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#280113]
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnull(customer_sk#22074)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END)], output=[store_only#22069L, catalog_only#22070L, store_and_catalog#22071L])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#280022]
      +- HashAggregate(keys=[], functions=[partial_sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnull(customer_sk#22074)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#22072) AND isnotnull(customer_sk#22074)) THEN 1 ELSE 0 END)], output=[sum#22113L, sum#22114L, sum#22115L])
         +- Project [customer_sk#22072, customer_sk#22074]
            +- SortMergeJoin [customer_sk#22072, item_sk#22073], [customer_sk#22074, item_sk#22075], FullOuter
               :- Sort [customer_sk#22072 ASC NULLS FIRST, item_sk#22073 ASC NULLS FIRST], false, 0
               :  +- HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[customer_sk#22072, item_sk#22073])
               :     +- Exchange hashpartitioning(ss_customer_sk#255, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#280001]
               :        +- HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[ss_customer_sk#255, ss_item_sk#254])
               :           +- Project [ss_item_sk#254, ss_customer_sk#255]
               :              +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
               :                 :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
               :                 :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#279993]
               :                 :     +- Filter isnotnull(ss_sold_date_sk#252)
               :                 :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_customer_sk#255] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
               :                 +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
               :                    +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#279994]
               :                       +- Project [d_date_sk#612]
               :                          +- Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1219)) AND (d_month_seq#615 <= 1230)) AND isnotnull(d_date_sk#612))
               :                             +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1219), (d_month_seq#615 <= 1230), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1219), LessThanOrEqual(d_month_seq,1230),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
               +- Sort [customer_sk#22074 ASC NULLS FIRST, item_sk#22075 ASC NULLS FIRST], false, 0
                  +- HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[customer_sk#22074, item_sk#22075])
                     +- Exchange hashpartitioning(cs_bill_customer_sk#547, cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#280012]
                        +- HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[cs_bill_customer_sk#547, cs_item_sk#559])
                           +- Project [cs_bill_customer_sk#547, cs_item_sk#559]
                              +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#22076], Inner
                                 :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                                 :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#280004]
                                 :     +- Filter isnotnull(cs_sold_date_sk#544)
                                 :        +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>
                                 +- Sort [d_date_sk#22076 ASC NULLS FIRST], false, 0
                                    +- Exchange hashpartitioning(d_date_sk#22076, 200), ENSURE_REQUIREMENTS, [id=#280005]
                                       +- Project [d_date_sk#22076]
                                          +- Filter (((isnotnull(d_month_seq#22079) AND (d_month_seq#22079 >= 1219)) AND (d_month_seq#22079 <= 1230)) AND isnotnull(d_date_sk#22076))
                                             +- FileScan parquet [d_date_sk#22076,d_month_seq#22079] Batched: true, DataFilters: [isnotnull(d_month_seq#22079), (d_month_seq#22079 >= 1219), (d_month_seq#22079 <= 1230), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1219), LessThanOrEqual(d_month_seq,1230),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
