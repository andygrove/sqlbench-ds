AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(14) HashAggregate(keys=[], functions=[sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnull(customer_sk#19501)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END)], output=[store_only#19496L, catalog_only#19497L, store_and_catalog#19498L])
   +- ShuffleQueryStage 7
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#207519]
         +- *(13) HashAggregate(keys=[], functions=[partial_sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnull(customer_sk#19501)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END)], output=[sum#19540L, sum#19541L, sum#19542L])
            +- *(13) Project [customer_sk#19499, customer_sk#19501]
               +- SortMergeJoin [customer_sk#19499, item_sk#19500], [customer_sk#19501, item_sk#19502], FullOuter
                  :- *(11) Sort [customer_sk#19499 ASC NULLS FIRST, item_sk#19500 ASC NULLS FIRST], false, 0
                  :  +- *(11) HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[customer_sk#19499, item_sk#19500])
                  :     +- AQEShuffleRead coalesced
                  :        +- ShuffleQueryStage 5
                  :           +- Exchange hashpartitioning(ss_customer_sk#255, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#207302]
                  :              +- *(7) HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[ss_customer_sk#255, ss_item_sk#254])
                  :                 +- *(7) Project [ss_item_sk#254, ss_customer_sk#255]
                  :                    +- *(7) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
                  :                       :- *(5) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
                  :                       :  +- AQEShuffleRead coalesced
                  :                       :     +- ShuffleQueryStage 0
                  :                       :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#207019]
                  :                       :           +- *(1) Filter isnotnull(ss_sold_date_sk#252)
                  :                       :              +- *(1) ColumnarToRow
                  :                       :                 +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_customer_sk#255] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
                  :                       +- *(6) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :                          +- AQEShuffleRead coalesced
                  :                             +- ShuffleQueryStage 1
                  :                                +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#207038]
                  :                                   +- *(2) Project [d_date_sk#612]
                  :                                      +- *(2) Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1212)) AND (d_month_seq#615 <= 1223)) AND isnotnull(d_date_sk#612))
                  :                                         +- *(2) ColumnarToRow
                  :                                            +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1212), (d_month_seq#615 <= 1223), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                  +- *(12) Sort [customer_sk#19501 ASC NULLS FIRST, item_sk#19502 ASC NULLS FIRST], false, 0
                     +- *(12) HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[customer_sk#19501, item_sk#19502])
                        +- AQEShuffleRead coalesced
                           +- ShuffleQueryStage 6
                              +- Exchange hashpartitioning(cs_bill_customer_sk#547, cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#207409]
                                 +- *(10) HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[cs_bill_customer_sk#547, cs_item_sk#559])
                                    +- *(10) Project [cs_bill_customer_sk#547, cs_item_sk#559]
                                       +- *(10) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#19503], Inner
                                          :- *(8) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                                          :  +- AQEShuffleRead coalesced
                                          :     +- ShuffleQueryStage 2
                                          :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#207063]
                                          :           +- *(3) Filter isnotnull(cs_sold_date_sk#544)
                                          :              +- *(3) ColumnarToRow
                                          :                 +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>
                                          +- *(9) Sort [d_date_sk#19503 ASC NULLS FIRST], false, 0
                                             +- AQEShuffleRead coalesced
                                                +- ShuffleQueryStage 4
                                                   +- ReusedExchange [d_date_sk#19503], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#207038]
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnull(customer_sk#19501)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END)], output=[store_only#19496L, catalog_only#19497L, store_and_catalog#19498L])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#206947]
      +- HashAggregate(keys=[], functions=[partial_sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnull(customer_sk#19501)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#19499) AND isnotnull(customer_sk#19501)) THEN 1 ELSE 0 END)], output=[sum#19540L, sum#19541L, sum#19542L])
         +- Project [customer_sk#19499, customer_sk#19501]
            +- SortMergeJoin [customer_sk#19499, item_sk#19500], [customer_sk#19501, item_sk#19502], FullOuter
               :- Sort [customer_sk#19499 ASC NULLS FIRST, item_sk#19500 ASC NULLS FIRST], false, 0
               :  +- HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[customer_sk#19499, item_sk#19500])
               :     +- Exchange hashpartitioning(ss_customer_sk#255, ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#206926]
               :        +- HashAggregate(keys=[ss_customer_sk#255, ss_item_sk#254], functions=[], output=[ss_customer_sk#255, ss_item_sk#254])
               :           +- Project [ss_item_sk#254, ss_customer_sk#255]
               :              +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
               :                 :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
               :                 :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#206918]
               :                 :     +- Filter isnotnull(ss_sold_date_sk#252)
               :                 :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_customer_sk#255] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
               :                 +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
               :                    +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#206919]
               :                       +- Project [d_date_sk#612]
               :                          +- Filter (((isnotnull(d_month_seq#615) AND (d_month_seq#615 >= 1212)) AND (d_month_seq#615 <= 1223)) AND isnotnull(d_date_sk#612))
               :                             +- FileScan parquet [d_date_sk#612,d_month_seq#615] Batched: true, DataFilters: [isnotnull(d_month_seq#615), (d_month_seq#615 >= 1212), (d_month_seq#615 <= 1223), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
               +- Sort [customer_sk#19501 ASC NULLS FIRST, item_sk#19502 ASC NULLS FIRST], false, 0
                  +- HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[customer_sk#19501, item_sk#19502])
                     +- Exchange hashpartitioning(cs_bill_customer_sk#547, cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#206937]
                        +- HashAggregate(keys=[cs_bill_customer_sk#547, cs_item_sk#559], functions=[], output=[cs_bill_customer_sk#547, cs_item_sk#559])
                           +- Project [cs_bill_customer_sk#547, cs_item_sk#559]
                              +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#19503], Inner
                                 :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                                 :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#206929]
                                 :     +- Filter isnotnull(cs_sold_date_sk#544)
                                 :        +- FileScan parquet [cs_sold_date_sk#544,cs_bill_customer_sk#547,cs_item_sk#559] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>
                                 +- Sort [d_date_sk#19503 ASC NULLS FIRST], false, 0
                                    +- Exchange hashpartitioning(d_date_sk#19503, 200), ENSURE_REQUIREMENTS, [id=#206930]
                                       +- Project [d_date_sk#19503]
                                          +- Filter (((isnotnull(d_month_seq#19506) AND (d_month_seq#19506 >= 1212)) AND (d_month_seq#19506 <= 1223)) AND isnotnull(d_date_sk#19503))
                                             +- FileScan parquet [d_date_sk#19503,d_month_seq#19506] Batched: true, DataFilters: [isnotnull(d_month_seq#19506), (d_month_seq#19506 >= 1212), (d_month_seq#19506 <= 1223), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
