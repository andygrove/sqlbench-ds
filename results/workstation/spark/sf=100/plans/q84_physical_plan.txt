AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#401 ASC NULLS FIRST], output=[customer_id#18564,customername#18565])
   +- *(21) Project [c_customer_id#401 AS customer_id#18564, concat(coalesce(c_last_name#409, ), , , coalesce(c_first_name#408, )) AS customername#18565, c_customer_id#401]
      +- *(21) SortMergeJoin [cd_demo_sk#222], [sr_cdemo_sk#140], Inner
         :- *(19) Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
         :  +- AQEShuffleRead coalesced
         :     +- ShuffleQueryStage 9
         :        +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#185381]
         :           +- *(18) Project [c_customer_id#401, c_first_name#408, c_last_name#409, cd_demo_sk#222]
         :              +- *(18) SortMergeJoin [hd_income_band_sk#89], [ib_income_band_sk#240], Inner
         :                 :- *(16) Sort [hd_income_band_sk#89 ASC NULLS FIRST], false, 0
         :                 :  +- AQEShuffleRead coalesced
         :                 :     +- ShuffleQueryStage 8
         :                 :        +- Exchange hashpartitioning(hd_income_band_sk#89, 200), ENSURE_REQUIREMENTS, [id=#185294]
         :                 :           +- *(15) Project [c_customer_id#401, c_first_name#408, c_last_name#409, cd_demo_sk#222, hd_income_band_sk#89]
         :                 :              +- *(15) SortMergeJoin [c_current_hdemo_sk#403], [hd_demo_sk#88], Inner
         :                 :                 :- *(13) Sort [c_current_hdemo_sk#403 ASC NULLS FIRST], false, 0
         :                 :                 :  +- AQEShuffleRead coalesced
         :                 :                 :     +- ShuffleQueryStage 7
         :                 :                 :        +- Exchange hashpartitioning(c_current_hdemo_sk#403, 200), ENSURE_REQUIREMENTS, [id=#185180]
         :                 :                 :           +- *(12) Project [c_customer_id#401, c_current_hdemo_sk#403, c_first_name#408, c_last_name#409, cd_demo_sk#222]
         :                 :                 :              +- *(12) SortMergeJoin [c_current_cdemo_sk#402], [cd_demo_sk#222], Inner
         :                 :                 :                 :- *(10) Sort [c_current_cdemo_sk#402 ASC NULLS FIRST], false, 0
         :                 :                 :                 :  +- AQEShuffleRead coalesced
         :                 :                 :                 :     +- ShuffleQueryStage 6
         :                 :                 :                 :        +- Exchange hashpartitioning(c_current_cdemo_sk#402, 200), ENSURE_REQUIREMENTS, [id=#184791]
         :                 :                 :                 :           +- *(9) Project [c_customer_id#401, c_current_cdemo_sk#402, c_current_hdemo_sk#403, c_first_name#408, c_last_name#409]
         :                 :                 :                 :              +- *(9) SortMergeJoin [c_current_addr_sk#404], [ca_address_sk#62], Inner
         :                 :                 :                 :                 :- *(7) Sort [c_current_addr_sk#404 ASC NULLS FIRST], false, 0
         :                 :                 :                 :                 :  +- AQEShuffleRead coalesced
         :                 :                 :                 :                 :     +- ShuffleQueryStage 0
         :                 :                 :                 :                 :        +- Exchange hashpartitioning(c_current_addr_sk#404, 200), ENSURE_REQUIREMENTS, [id=#184452]
         :                 :                 :                 :                 :           +- *(1) Filter ((isnotnull(c_current_addr_sk#404) AND isnotnull(c_current_cdemo_sk#402)) AND isnotnull(c_current_hdemo_sk#403))
         :                 :                 :                 :                 :              +- *(1) ColumnarToRow
         :                 :                 :                 :                 :                 +- FileScan parquet [c_customer_id#401,c_current_cdemo_sk#402,c_current_hdemo_sk#403,c_current_addr_sk#404,c_first_name#408,c_last_name#409] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#404), isnotnull(c_current_cdemo_sk#402), isnotnull(c_current_hdemo_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)], ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c...
         :                 :                 :                 :                 +- *(8) Sort [ca_address_sk#62 ASC NULLS FIRST], false, 0
         :                 :                 :                 :                    +- AQEShuffleRead coalesced
         :                 :                 :                 :                       +- ShuffleQueryStage 1
         :                 :                 :                 :                          +- Exchange hashpartitioning(ca_address_sk#62, 200), ENSURE_REQUIREMENTS, [id=#184471]
         :                 :                 :                 :                             +- *(2) Project [ca_address_sk#62]
         :                 :                 :                 :                                +- *(2) Filter ((isnotnull(ca_city#68) AND (ca_city#68 = Hopewell)) AND isnotnull(ca_address_sk#62))
         :                 :                 :                 :                                   +- *(2) ColumnarToRow
         :                 :                 :                 :                                      +- FileScan parquet [ca_address_sk#62,ca_city#68] Batched: true, DataFilters: [isnotnull(ca_city#68), (ca_city#68 = Hopewell), isnotnull(ca_address_sk#62)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ca_city), EqualTo(ca_city,Hopewell), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_city:string>
         :                 :                 :                 +- *(11) Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
         :                 :                 :                    +- AQEShuffleRead coalesced
         :                 :                 :                       +- ShuffleQueryStage 2
         :                 :                 :                          +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#184494]
         :                 :                 :                             +- *(3) Filter isnotnull(cd_demo_sk#222)
         :                 :                 :                                +- *(3) ColumnarToRow
         :                 :                 :                                   +- FileScan parquet [cd_demo_sk#222] Batched: true, DataFilters: [isnotnull(cd_demo_sk#222)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int>
         :                 :                 +- *(14) Sort [hd_demo_sk#88 ASC NULLS FIRST], false, 0
         :                 :                    +- AQEShuffleRead coalesced
         :                 :                       +- ShuffleQueryStage 3
         :                 :                          +- Exchange hashpartitioning(hd_demo_sk#88, 200), ENSURE_REQUIREMENTS, [id=#184515]
         :                 :                             +- *(4) Filter (isnotnull(hd_demo_sk#88) AND isnotnull(hd_income_band_sk#89))
         :                 :                                +- *(4) ColumnarToRow
         :                 :                                   +- FileScan parquet [hd_demo_sk#88,hd_income_band_sk#89] Batched: true, DataFilters: [isnotnull(hd_demo_sk#88), isnotnull(hd_income_band_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/household_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)], ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>
         :                 +- *(17) Sort [ib_income_band_sk#240 ASC NULLS FIRST], false, 0
         :                    +- AQEShuffleRead coalesced
         :                       +- ShuffleQueryStage 4
         :                          +- Exchange hashpartitioning(ib_income_band_sk#240, 200), ENSURE_REQUIREMENTS, [id=#184538]
         :                             +- *(5) Project [ib_income_band_sk#240]
         :                                +- *(5) Filter ((((isnotnull(ib_lower_bound#241) AND isnotnull(ib_upper_bound#242)) AND (ib_lower_bound#241 >= 32287)) AND (ib_upper_bound#242 <= 82287)) AND isnotnull(ib_income_band_sk#240))
         :                                   +- *(5) ColumnarToRow
         :                                      +- FileScan parquet [ib_income_band_sk#240,ib_lower_bound#241,ib_upper_bound#242] Batched: true, DataFilters: [isnotnull(ib_lower_bound#241), isnotnull(ib_upper_bound#242), (ib_lower_bound#241 >= 32287), (ib..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/income_band.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,32287), ..., ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>
         +- *(20) Sort [sr_cdemo_sk#140 ASC NULLS FIRST], false, 0
            +- AQEShuffleRead coalesced
               +- ShuffleQueryStage 5
                  +- Exchange hashpartitioning(sr_cdemo_sk#140, 200), ENSURE_REQUIREMENTS, [id=#184566]
                     +- *(6) Filter isnotnull(sr_cdemo_sk#140)
                        +- *(6) ColumnarToRow
                           +- FileScan parquet [sr_cdemo_sk#140] Batched: true, DataFilters: [isnotnull(sr_cdemo_sk#140)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_cdemo_sk)], ReadSchema: struct<sr_cdemo_sk:int>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#401 ASC NULLS FIRST], output=[customer_id#18564,customername#18565])
   +- Project [c_customer_id#401 AS customer_id#18564, concat(coalesce(c_last_name#409, ), , , coalesce(c_first_name#408, )) AS customername#18565, c_customer_id#401]
      +- SortMergeJoin [cd_demo_sk#222], [sr_cdemo_sk#140], Inner
         :- Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#184369]
         :     +- Project [c_customer_id#401, c_first_name#408, c_last_name#409, cd_demo_sk#222]
         :        +- SortMergeJoin [hd_income_band_sk#89], [ib_income_band_sk#240], Inner
         :           :- Sort [hd_income_band_sk#89 ASC NULLS FIRST], false, 0
         :           :  +- Exchange hashpartitioning(hd_income_band_sk#89, 200), ENSURE_REQUIREMENTS, [id=#184361]
         :           :     +- Project [c_customer_id#401, c_first_name#408, c_last_name#409, cd_demo_sk#222, hd_income_band_sk#89]
         :           :        +- SortMergeJoin [c_current_hdemo_sk#403], [hd_demo_sk#88], Inner
         :           :           :- Sort [c_current_hdemo_sk#403 ASC NULLS FIRST], false, 0
         :           :           :  +- Exchange hashpartitioning(c_current_hdemo_sk#403, 200), ENSURE_REQUIREMENTS, [id=#184353]
         :           :           :     +- Project [c_customer_id#401, c_current_hdemo_sk#403, c_first_name#408, c_last_name#409, cd_demo_sk#222]
         :           :           :        +- SortMergeJoin [c_current_cdemo_sk#402], [cd_demo_sk#222], Inner
         :           :           :           :- Sort [c_current_cdemo_sk#402 ASC NULLS FIRST], false, 0
         :           :           :           :  +- Exchange hashpartitioning(c_current_cdemo_sk#402, 200), ENSURE_REQUIREMENTS, [id=#184345]
         :           :           :           :     +- Project [c_customer_id#401, c_current_cdemo_sk#402, c_current_hdemo_sk#403, c_first_name#408, c_last_name#409]
         :           :           :           :        +- SortMergeJoin [c_current_addr_sk#404], [ca_address_sk#62], Inner
         :           :           :           :           :- Sort [c_current_addr_sk#404 ASC NULLS FIRST], false, 0
         :           :           :           :           :  +- Exchange hashpartitioning(c_current_addr_sk#404, 200), ENSURE_REQUIREMENTS, [id=#184337]
         :           :           :           :           :     +- Filter ((isnotnull(c_current_addr_sk#404) AND isnotnull(c_current_cdemo_sk#402)) AND isnotnull(c_current_hdemo_sk#403))
         :           :           :           :           :        +- FileScan parquet [c_customer_id#401,c_current_cdemo_sk#402,c_current_hdemo_sk#403,c_current_addr_sk#404,c_first_name#408,c_last_name#409] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#404), isnotnull(c_current_cdemo_sk#402), isnotnull(c_current_hdemo_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)], ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c...
         :           :           :           :           +- Sort [ca_address_sk#62 ASC NULLS FIRST], false, 0
         :           :           :           :              +- Exchange hashpartitioning(ca_address_sk#62, 200), ENSURE_REQUIREMENTS, [id=#184338]
         :           :           :           :                 +- Project [ca_address_sk#62]
         :           :           :           :                    +- Filter ((isnotnull(ca_city#68) AND (ca_city#68 = Hopewell)) AND isnotnull(ca_address_sk#62))
         :           :           :           :                       +- FileScan parquet [ca_address_sk#62,ca_city#68] Batched: true, DataFilters: [isnotnull(ca_city#68), (ca_city#68 = Hopewell), isnotnull(ca_address_sk#62)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ca_city), EqualTo(ca_city,Hopewell), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_city:string>
         :           :           :           +- Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
         :           :           :              +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#184346]
         :           :           :                 +- Filter isnotnull(cd_demo_sk#222)
         :           :           :                    +- FileScan parquet [cd_demo_sk#222] Batched: true, DataFilters: [isnotnull(cd_demo_sk#222)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int>
         :           :           +- Sort [hd_demo_sk#88 ASC NULLS FIRST], false, 0
         :           :              +- Exchange hashpartitioning(hd_demo_sk#88, 200), ENSURE_REQUIREMENTS, [id=#184354]
         :           :                 +- Filter (isnotnull(hd_demo_sk#88) AND isnotnull(hd_income_band_sk#89))
         :           :                    +- FileScan parquet [hd_demo_sk#88,hd_income_band_sk#89] Batched: true, DataFilters: [isnotnull(hd_demo_sk#88), isnotnull(hd_income_band_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/household_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)], ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>
         :           +- Sort [ib_income_band_sk#240 ASC NULLS FIRST], false, 0
         :              +- Exchange hashpartitioning(ib_income_band_sk#240, 200), ENSURE_REQUIREMENTS, [id=#184362]
         :                 +- Project [ib_income_band_sk#240]
         :                    +- Filter ((((isnotnull(ib_lower_bound#241) AND isnotnull(ib_upper_bound#242)) AND (ib_lower_bound#241 >= 32287)) AND (ib_upper_bound#242 <= 82287)) AND isnotnull(ib_income_band_sk#240))
         :                       +- FileScan parquet [ib_income_band_sk#240,ib_lower_bound#241,ib_upper_bound#242] Batched: true, DataFilters: [isnotnull(ib_lower_bound#241), isnotnull(ib_upper_bound#242), (ib_lower_bound#241 >= 32287), (ib..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/income_band.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,32287), ..., ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>
         +- Sort [sr_cdemo_sk#140 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(sr_cdemo_sk#140, 200), ENSURE_REQUIREMENTS, [id=#184370]
               +- Filter isnotnull(sr_cdemo_sk#140)
                  +- FileScan parquet [sr_cdemo_sk#140] Batched: true, DataFilters: [isnotnull(sr_cdemo_sk#140)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_cdemo_sk)], ReadSchema: struct<sr_cdemo_sk:int>
