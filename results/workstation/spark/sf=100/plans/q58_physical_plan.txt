AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_id#13386 ASC NULLS FIRST,ss_item_rev#13387 ASC NULLS FIRST], output=[item_id#13386,ss_item_rev#13387,ss_dev#13382,cs_item_rev#13391,cs_dev#13383,ws_item_rev#13395,ws_dev#13384,average#13385])
   +- *(44) Project [item_id#13386, ss_item_rev#13387, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ss_dev#13382, cs_item_rev#13391, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#13391 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS cs_dev#13383, ws_item_rev#13395, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#13395 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ws_dev#13384, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#13385]
      +- *(44) SortMergeJoin [item_id#13386], [item_id#13394], Inner, ((((((((cast(ss_item_rev#13387 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13395)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13387 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13395)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13391 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13395)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13391 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13395)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13395 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13387)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13395 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13387)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13395 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13391)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13395 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13391)), DecimalType(20,3), true)))
         :- *(42) Project [item_id#13386, ss_item_rev#13387, cs_item_rev#13391]
         :  +- *(42) SortMergeJoin [item_id#13386], [item_id#13390], Inner, ((((cast(ss_item_rev#13387 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13391)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13387 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13391)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13391 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13387)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13391 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13387)), DecimalType(20,3), true)))
         :     :- *(40) Sort [item_id#13386 ASC NULLS FIRST], false, 0
         :     :  +- *(40) Filter isnotnull(ss_item_rev#13387)
         :     :     +- *(40) HashAggregate(keys=[i_item_id#669], functions=[sum(UnscaledValue(ss_ext_sales_price#267))], output=[item_id#13386, ss_item_rev#13387])
         :     :        +- AQEShuffleRead coalesced
         :     :           +- ShuffleQueryStage 26
         :     :              +- Exchange hashpartitioning(i_item_id#669, 200), ENSURE_REQUIREMENTS, [id=#169556]
         :     :                 +- *(33) HashAggregate(keys=[i_item_id#669], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#267))], output=[i_item_id#669, sum#13678L])
         :     :                    +- *(33) Project [ss_ext_sales_price#267, i_item_id#669]
         :     :                       +- *(33) SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :     :                          :- *(31) Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :     :                          :  +- AQEShuffleRead coalesced
         :     :                          :     +- ShuffleQueryStage 23
         :     :                          :        +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#168849]
         :     :                          :           +- *(24) Project [ss_sold_date_sk#252, ss_ext_sales_price#267, i_item_id#669]
         :     :                          :              +- *(24) SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
         :     :                          :                 :- *(22) Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
         :     :                          :                 :  +- AQEShuffleRead coalesced
         :     :                          :                 :     +- ShuffleQueryStage 0
         :     :                          :                 :        +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#167622]
         :     :                          :                 :           +- *(1) Filter (isnotnull(ss_item_sk#254) AND isnotnull(ss_sold_date_sk#252))
         :     :                          :                 :              +- *(1) ColumnarToRow
         :     :                          :                 :                 +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_ext_sales_price#267] Batched: true, DataFilters: [isnotnull(ss_item_sk#254), isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
         :     :                          :                 +- *(23) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
         :     :                          :                    +- AQEShuffleRead coalesced
         :     :                          :                       +- ShuffleQueryStage 1
         :     :                          :                          +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#167639]
         :     :                          :                             +- *(2) Filter (isnotnull(i_item_sk#668) AND isnotnull(i_item_id#669))
         :     :                          :                                +- *(2) ColumnarToRow
         :     :                          :                                   +- FileScan parquet [i_item_sk#668,i_item_id#669] Batched: true, DataFilters: [isnotnull(i_item_sk#668), isnotnull(i_item_id#669)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :     :                          +- *(32) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :     :                             +- AQEShuffleRead coalesced
         :     :                                +- ShuffleQueryStage 18
         :     :                                   +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#168535]
         :     :                                      +- *(15) Project [d_date_sk#612]
         :     :                                         +- *(15) SortMergeJoin [d_date#614], [d_date#13584], LeftSemi
         :     :                                            :- *(13) Sort [d_date#614 ASC NULLS FIRST], false, 0
         :     :                                            :  +- AQEShuffleRead coalesced
         :     :                                            :     +- ShuffleQueryStage 2
         :     :                                            :        +- Exchange hashpartitioning(d_date#614, 200), ENSURE_REQUIREMENTS, [id=#167660]
         :     :                                            :           +- *(3) Filter isnotnull(d_date_sk#612)
         :     :                                            :              +- *(3) ColumnarToRow
         :     :                                            :                 +- FileScan parquet [d_date_sk#612,d_date#614] Batched: true, DataFilters: [isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :     :                                            +- *(14) Sort [d_date#13584 ASC NULLS FIRST], false, 0
         :     :                                               +- AQEShuffleRead coalesced
         :     :                                                  +- ShuffleQueryStage 3
         :     :                                                     +- Exchange hashpartitioning(d_date#13584, 200), ENSURE_REQUIREMENTS, [id=#167679]
         :     :                                                        +- *(4) Project [d_date#13584]
         :     :                                                           +- *(4) Filter (isnotnull(d_week_seq#13586) AND (d_week_seq#13586 = Subquery subquery#13388, [id=#167384]))
         :     :                                                              :  +- Subquery subquery#13388, [id=#167384]
         :     :                                                              :     +- AdaptiveSparkPlan isFinalPlan=true
                                                                                    +- == Final Plan ==
                                                                                       *(1) Project [d_week_seq#13502]
                                                                                       +- *(1) Filter (isnotnull(d_date#13500) AND (d_date#13500 = 2000-07-21))
                                                                                          +- *(1) ColumnarToRow
                                                                                             +- FileScan parquet [d_date#13500,d_week_seq#13502] Batched: true, DataFilters: [isnotnull(d_date#13500), (d_date#13500 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                                                    +- == Initial Plan ==
                                                                                       Project [d_week_seq#13502]
                                                                                       +- Filter (isnotnull(d_date#13500) AND (d_date#13500 = 2000-07-21))
                                                                                          +- FileScan parquet [d_date#13500,d_week_seq#13502] Batched: true, DataFilters: [isnotnull(d_date#13500), (d_date#13500 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     :                                                              +- *(4) ColumnarToRow
         :     :                                                                 +- FileScan parquet [d_date#13584,d_week_seq#13586] Batched: true, DataFilters: [isnotnull(d_week_seq#13586)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     +- *(41) Sort [item_id#13390 ASC NULLS FIRST], false, 0
         :        +- *(41) Filter isnotnull(cs_item_rev#13391)
         :           +- *(41) HashAggregate(keys=[i_item_id#13399], functions=[sum(UnscaledValue(cs_ext_sales_price#567))], output=[item_id#13390, cs_item_rev#13391])
         :              +- AQEShuffleRead coalesced
         :                 +- ShuffleQueryStage 27
         :                    +- Exchange hashpartitioning(i_item_id#13399, 200), ENSURE_REQUIREMENTS, [id=#169703]
         :                       +- *(36) HashAggregate(keys=[i_item_id#13399], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#567))], output=[i_item_id#13399, sum#13680L])
         :                          +- *(36) Project [cs_ext_sales_price#567, i_item_id#13399]
         :                             +- *(36) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#13420], Inner
         :                                :- *(34) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
         :                                :  +- AQEShuffleRead coalesced
         :                                :     +- ShuffleQueryStage 24
         :                                :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#169209]
         :                                :           +- *(27) Project [cs_sold_date_sk#544, cs_ext_sales_price#567, i_item_id#13399]
         :                                :              +- *(27) SortMergeJoin [cs_item_sk#559], [i_item_sk#13398], Inner
         :                                :                 :- *(25) Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
         :                                :                 :  +- AQEShuffleRead coalesced
         :                                :                 :     +- ShuffleQueryStage 4
         :                                :                 :        +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#167769]
         :                                :                 :           +- *(5) Filter (isnotnull(cs_item_sk#559) AND isnotnull(cs_sold_date_sk#544))
         :                                :                 :              +- *(5) ColumnarToRow
         :                                :                 :                 +- FileScan parquet [cs_sold_date_sk#544,cs_item_sk#559,cs_ext_sales_price#567] Batched: true, DataFilters: [isnotnull(cs_item_sk#559), isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
         :                                :                 +- *(26) Sort [i_item_sk#13398 ASC NULLS FIRST], false, 0
         :                                :                    +- AQEShuffleRead coalesced
         :                                :                       +- ShuffleQueryStage 6
         :                                :                          +- ReusedExchange [i_item_sk#13398, i_item_id#13399], Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#167639]
         :                                +- *(35) Sort [d_date_sk#13420 ASC NULLS FIRST], false, 0
         :                                   +- AQEShuffleRead coalesced
         :                                      +- ShuffleQueryStage 20
         :                                         +- ReusedExchange [d_date_sk#13420], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#168535]
         +- *(43) Sort [item_id#13394 ASC NULLS FIRST], false, 0
            +- *(43) Filter isnotnull(ws_item_rev#13395)
               +- *(43) HashAggregate(keys=[i_item_id#13449], functions=[sum(UnscaledValue(ws_ext_sales_price#499))], output=[item_id#13394, ws_item_rev#13395])
                  +- AQEShuffleRead coalesced
                     +- ShuffleQueryStage 28
                        +- Exchange hashpartitioning(i_item_id#13449, 200), ENSURE_REQUIREMENTS, [id=#169816]
                           +- *(39) HashAggregate(keys=[i_item_id#13449], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#499))], output=[i_item_id#13449, sum#13682L])
                              +- *(39) Project [ws_ext_sales_price#499, i_item_id#13449]
                                 +- *(39) SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#13470], Inner
                                    :- *(37) Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                                    :  +- AQEShuffleRead coalesced
                                    :     +- ShuffleQueryStage 25
                                    :        +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#169395]
                                    :           +- *(30) Project [ws_sold_date_sk#476, ws_ext_sales_price#499, i_item_id#13449]
                                    :              +- *(30) SortMergeJoin [ws_item_sk#479], [i_item_sk#13448], Inner
                                    :                 :- *(28) Sort [ws_item_sk#479 ASC NULLS FIRST], false, 0
                                    :                 :  +- AQEShuffleRead coalesced
                                    :                 :     +- ShuffleQueryStage 11
                                    :                 :        +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#167928]
                                    :                 :           +- *(9) Filter (isnotnull(ws_item_sk#479) AND isnotnull(ws_sold_date_sk#476))
                                    :                 :              +- *(9) ColumnarToRow
                                    :                 :                 +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_ext_sales_price#499] Batched: true, DataFilters: [isnotnull(ws_item_sk#479), isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                                    :                 +- *(29) Sort [i_item_sk#13448 ASC NULLS FIRST], false, 0
                                    :                    +- AQEShuffleRead coalesced
                                    :                       +- ShuffleQueryStage 13
                                    :                          +- ReusedExchange [i_item_sk#13448, i_item_id#13449], Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#167639]
                                    +- *(38) Sort [d_date_sk#13470 ASC NULLS FIRST], false, 0
                                       +- AQEShuffleRead coalesced
                                          +- ShuffleQueryStage 22
                                             +- ReusedExchange [d_date_sk#13470], Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#168535]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_id#13386 ASC NULLS FIRST,ss_item_rev#13387 ASC NULLS FIRST], output=[item_id#13386,ss_item_rev#13387,ss_dev#13382,cs_item_rev#13391,cs_dev#13383,ws_item_rev#13395,ws_dev#13384,average#13385])
   +- Project [item_id#13386, ss_item_rev#13387, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ss_dev#13382, cs_item_rev#13391, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#13391 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS cs_dev#13383, ws_item_rev#13395, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#13395 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ws_dev#13384, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13387 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13391 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13395 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#13385]
      +- SortMergeJoin [item_id#13386], [item_id#13394], Inner, ((((((((cast(ss_item_rev#13387 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13395)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13387 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13395)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13391 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13395)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13391 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13395)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13395 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13387)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13395 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13387)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13395 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13391)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13395 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13391)), DecimalType(20,3), true)))
         :- Project [item_id#13386, ss_item_rev#13387, cs_item_rev#13391]
         :  +- SortMergeJoin [item_id#13386], [item_id#13390], Inner, ((((cast(ss_item_rev#13387 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13391)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13387 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13391)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13391 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13387)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13391 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13387)), DecimalType(20,3), true)))
         :     :- Sort [item_id#13386 ASC NULLS FIRST], false, 0
         :     :  +- Filter isnotnull(ss_item_rev#13387)
         :     :     +- HashAggregate(keys=[i_item_id#669], functions=[sum(UnscaledValue(ss_ext_sales_price#267))], output=[item_id#13386, ss_item_rev#13387])
         :     :        +- Exchange hashpartitioning(i_item_id#669, 200), ENSURE_REQUIREMENTS, [id=#167486]
         :     :           +- HashAggregate(keys=[i_item_id#669], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#267))], output=[i_item_id#669, sum#13678L])
         :     :              +- Project [ss_ext_sales_price#267, i_item_id#669]
         :     :                 +- SortMergeJoin [ss_sold_date_sk#252], [d_date_sk#612], Inner
         :     :                    :- Sort [ss_sold_date_sk#252 ASC NULLS FIRST], false, 0
         :     :                    :  +- Exchange hashpartitioning(ss_sold_date_sk#252, 200), ENSURE_REQUIREMENTS, [id=#167478]
         :     :                    :     +- Project [ss_sold_date_sk#252, ss_ext_sales_price#267, i_item_id#669]
         :     :                    :        +- SortMergeJoin [ss_item_sk#254], [i_item_sk#668], Inner
         :     :                    :           :- Sort [ss_item_sk#254 ASC NULLS FIRST], false, 0
         :     :                    :           :  +- Exchange hashpartitioning(ss_item_sk#254, 200), ENSURE_REQUIREMENTS, [id=#167463]
         :     :                    :           :     +- Filter (isnotnull(ss_item_sk#254) AND isnotnull(ss_sold_date_sk#252))
         :     :                    :           :        +- FileScan parquet [ss_sold_date_sk#252,ss_item_sk#254,ss_ext_sales_price#267] Batched: true, DataFilters: [isnotnull(ss_item_sk#254), isnotnull(ss_sold_date_sk#252)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
         :     :                    :           +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
         :     :                    :              +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#167464]
         :     :                    :                 +- Filter (isnotnull(i_item_sk#668) AND isnotnull(i_item_id#669))
         :     :                    :                    +- FileScan parquet [i_item_sk#668,i_item_id#669] Batched: true, DataFilters: [isnotnull(i_item_sk#668), isnotnull(i_item_id#669)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :     :                    +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
         :     :                       +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#167479]
         :     :                          +- Project [d_date_sk#612]
         :     :                             +- SortMergeJoin [d_date#614], [d_date#13584], LeftSemi
         :     :                                :- Sort [d_date#614 ASC NULLS FIRST], false, 0
         :     :                                :  +- Exchange hashpartitioning(d_date#614, 200), ENSURE_REQUIREMENTS, [id=#167470]
         :     :                                :     +- Filter isnotnull(d_date_sk#612)
         :     :                                :        +- FileScan parquet [d_date_sk#612,d_date#614] Batched: true, DataFilters: [isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :     :                                +- Sort [d_date#13584 ASC NULLS FIRST], false, 0
         :     :                                   +- Exchange hashpartitioning(d_date#13584, 200), ENSURE_REQUIREMENTS, [id=#167471]
         :     :                                      +- Project [d_date#13584]
         :     :                                         +- Filter (isnotnull(d_week_seq#13586) AND (d_week_seq#13586 = Subquery subquery#13388, [id=#167384]))
         :     :                                            :  +- Subquery subquery#13388, [id=#167384]
         :     :                                            :     +- AdaptiveSparkPlan isFinalPlan=true
                                                                  +- == Final Plan ==
                                                                     *(1) Project [d_week_seq#13502]
                                                                     +- *(1) Filter (isnotnull(d_date#13500) AND (d_date#13500 = 2000-07-21))
                                                                        +- *(1) ColumnarToRow
                                                                           +- FileScan parquet [d_date#13500,d_week_seq#13502] Batched: true, DataFilters: [isnotnull(d_date#13500), (d_date#13500 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                                  +- == Initial Plan ==
                                                                     Project [d_week_seq#13502]
                                                                     +- Filter (isnotnull(d_date#13500) AND (d_date#13500 = 2000-07-21))
                                                                        +- FileScan parquet [d_date#13500,d_week_seq#13502] Batched: true, DataFilters: [isnotnull(d_date#13500), (d_date#13500 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     :                                            +- FileScan parquet [d_date#13584,d_week_seq#13586] Batched: true, DataFilters: [isnotnull(d_week_seq#13586)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     +- Sort [item_id#13390 ASC NULLS FIRST], false, 0
         :        +- Filter isnotnull(cs_item_rev#13391)
         :           +- HashAggregate(keys=[i_item_id#13399], functions=[sum(UnscaledValue(cs_ext_sales_price#567))], output=[item_id#13390, cs_item_rev#13391])
         :              +- Exchange hashpartitioning(i_item_id#13399, 200), ENSURE_REQUIREMENTS, [id=#167513]
         :                 +- HashAggregate(keys=[i_item_id#13399], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#567))], output=[i_item_id#13399, sum#13680L])
         :                    +- Project [cs_ext_sales_price#567, i_item_id#13399]
         :                       +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#13420], Inner
         :                          :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
         :                          :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#167505]
         :                          :     +- Project [cs_sold_date_sk#544, cs_ext_sales_price#567, i_item_id#13399]
         :                          :        +- SortMergeJoin [cs_item_sk#559], [i_item_sk#13398], Inner
         :                          :           :- Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
         :                          :           :  +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#167490]
         :                          :           :     +- Filter (isnotnull(cs_item_sk#559) AND isnotnull(cs_sold_date_sk#544))
         :                          :           :        +- FileScan parquet [cs_sold_date_sk#544,cs_item_sk#559,cs_ext_sales_price#567] Batched: true, DataFilters: [isnotnull(cs_item_sk#559), isnotnull(cs_sold_date_sk#544)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
         :                          :           +- Sort [i_item_sk#13398 ASC NULLS FIRST], false, 0
         :                          :              +- Exchange hashpartitioning(i_item_sk#13398, 200), ENSURE_REQUIREMENTS, [id=#167491]
         :                          :                 +- Filter (isnotnull(i_item_sk#13398) AND isnotnull(i_item_id#13399))
         :                          :                    +- FileScan parquet [i_item_sk#13398,i_item_id#13399] Batched: true, DataFilters: [isnotnull(i_item_sk#13398), isnotnull(i_item_id#13399)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :                          +- Sort [d_date_sk#13420 ASC NULLS FIRST], false, 0
         :                             +- Exchange hashpartitioning(d_date_sk#13420, 200), ENSURE_REQUIREMENTS, [id=#167506]
         :                                +- Project [d_date_sk#13420]
         :                                   +- SortMergeJoin [d_date#13422], [d_date#13612], LeftSemi
         :                                      :- Sort [d_date#13422 ASC NULLS FIRST], false, 0
         :                                      :  +- Exchange hashpartitioning(d_date#13422, 200), ENSURE_REQUIREMENTS, [id=#167497]
         :                                      :     +- Filter isnotnull(d_date_sk#13420)
         :                                      :        +- FileScan parquet [d_date_sk#13420,d_date#13422] Batched: true, DataFilters: [isnotnull(d_date_sk#13420)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :                                      +- Sort [d_date#13612 ASC NULLS FIRST], false, 0
         :                                         +- Exchange hashpartitioning(d_date#13612, 200), ENSURE_REQUIREMENTS, [id=#167498]
         :                                            +- Project [d_date#13612]
         :                                               +- Filter (isnotnull(d_week_seq#13614) AND (d_week_seq#13614 = Subquery subquery#13392, [id=#167390]))
         :                                                  :  +- Subquery subquery#13392, [id=#167390]
         :                                                  :     +- AdaptiveSparkPlan isFinalPlan=false
         :                                                  :        +- Project [d_week_seq#13530]
         :                                                  :           +- Filter (isnotnull(d_date#13528) AND (d_date#13528 = 2000-07-21))
         :                                                  :              +- FileScan parquet [d_date#13528,d_week_seq#13530] Batched: true, DataFilters: [isnotnull(d_date#13528), (d_date#13528 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :                                                  +- FileScan parquet [d_date#13612,d_week_seq#13614] Batched: true, DataFilters: [isnotnull(d_week_seq#13614)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         +- Sort [item_id#13394 ASC NULLS FIRST], false, 0
            +- Filter isnotnull(ws_item_rev#13395)
               +- HashAggregate(keys=[i_item_id#13449], functions=[sum(UnscaledValue(ws_ext_sales_price#499))], output=[item_id#13394, ws_item_rev#13395])
                  +- Exchange hashpartitioning(i_item_id#13449, 200), ENSURE_REQUIREMENTS, [id=#167546]
                     +- HashAggregate(keys=[i_item_id#13449], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#499))], output=[i_item_id#13449, sum#13682L])
                        +- Project [ws_ext_sales_price#499, i_item_id#13449]
                           +- SortMergeJoin [ws_sold_date_sk#476], [d_date_sk#13470], Inner
                              :- Sort [ws_sold_date_sk#476 ASC NULLS FIRST], false, 0
                              :  +- Exchange hashpartitioning(ws_sold_date_sk#476, 200), ENSURE_REQUIREMENTS, [id=#167538]
                              :     +- Project [ws_sold_date_sk#476, ws_ext_sales_price#499, i_item_id#13449]
                              :        +- SortMergeJoin [ws_item_sk#479], [i_item_sk#13448], Inner
                              :           :- Sort [ws_item_sk#479 ASC NULLS FIRST], false, 0
                              :           :  +- Exchange hashpartitioning(ws_item_sk#479, 200), ENSURE_REQUIREMENTS, [id=#167523]
                              :           :     +- Filter (isnotnull(ws_item_sk#479) AND isnotnull(ws_sold_date_sk#476))
                              :           :        +- FileScan parquet [ws_sold_date_sk#476,ws_item_sk#479,ws_ext_sales_price#499] Batched: true, DataFilters: [isnotnull(ws_item_sk#479), isnotnull(ws_sold_date_sk#476)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                              :           +- Sort [i_item_sk#13448 ASC NULLS FIRST], false, 0
                              :              +- Exchange hashpartitioning(i_item_sk#13448, 200), ENSURE_REQUIREMENTS, [id=#167524]
                              :                 +- Filter (isnotnull(i_item_sk#13448) AND isnotnull(i_item_id#13449))
                              :                    +- FileScan parquet [i_item_sk#13448,i_item_id#13449] Batched: true, DataFilters: [isnotnull(i_item_sk#13448), isnotnull(i_item_id#13449)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                              +- Sort [d_date_sk#13470 ASC NULLS FIRST], false, 0
                                 +- Exchange hashpartitioning(d_date_sk#13470, 200), ENSURE_REQUIREMENTS, [id=#167539]
                                    +- Project [d_date_sk#13470]
                                       +- SortMergeJoin [d_date#13472], [d_date#13640], LeftSemi
                                          :- Sort [d_date#13472 ASC NULLS FIRST], false, 0
                                          :  +- Exchange hashpartitioning(d_date#13472, 200), ENSURE_REQUIREMENTS, [id=#167530]
                                          :     +- Filter isnotnull(d_date_sk#13470)
                                          :        +- FileScan parquet [d_date_sk#13470,d_date#13472] Batched: true, DataFilters: [isnotnull(d_date_sk#13470)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
                                          +- Sort [d_date#13640 ASC NULLS FIRST], false, 0
                                             +- Exchange hashpartitioning(d_date#13640, 200), ENSURE_REQUIREMENTS, [id=#167531]
                                                +- Project [d_date#13640]
                                                   +- Filter (isnotnull(d_week_seq#13642) AND (d_week_seq#13642 = Subquery subquery#13396, [id=#167396]))
                                                      :  +- Subquery subquery#13396, [id=#167396]
                                                      :     +- AdaptiveSparkPlan isFinalPlan=false
                                                      :        +- Project [d_week_seq#13558]
                                                      :           +- Filter (isnotnull(d_date#13556) AND (d_date#13556 = 2000-07-21))
                                                      :              +- FileScan parquet [d_date#13556,d_week_seq#13558] Batched: true, DataFilters: [isnotnull(d_date#13556), (d_date#13556 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                      +- FileScan parquet [d_date#13640,d_week_seq#13642] Batched: true, DataFilters: [isnotnull(d_week_seq#13642)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
