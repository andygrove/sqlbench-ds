AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#669 ASC NULLS FIRST], output=[i_item_id#669,agg1#8142,agg2#8143,agg3#8144,agg4#8145])
   +- *(18) HashAggregate(keys=[i_item_id#669], functions=[avg(cs_quantity#562), avg(UnscaledValue(cs_list_price#564)), avg(UnscaledValue(cs_coupon_amt#571)), avg(UnscaledValue(cs_sales_price#565))], output=[i_item_id#669, agg1#8142, agg2#8143, agg3#8144, agg4#8145])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 8
            +- Exchange hashpartitioning(i_item_id#669, 200), ENSURE_REQUIREMENTS, [id=#108520]
               +- *(17) HashAggregate(keys=[i_item_id#669], functions=[partial_avg(cs_quantity#562), partial_avg(UnscaledValue(cs_list_price#564)), partial_avg(UnscaledValue(cs_coupon_amt#571)), partial_avg(UnscaledValue(cs_sales_price#565))], output=[i_item_id#669, sum#8163, count#8164L, sum#8165, count#8166L, sum#8167, count#8168L, sum#8169, count#8170L])
                  +- *(17) Project [cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571, i_item_id#669]
                     +- *(17) SortMergeJoin [cs_promo_sk#560], [p_promo_sk#98], Inner
                        :- *(15) Sort [cs_promo_sk#560 ASC NULLS FIRST], false, 0
                        :  +- AQEShuffleRead coalesced
                        :     +- ShuffleQueryStage 7
                        :        +- Exchange hashpartitioning(cs_promo_sk#560, 200), ENSURE_REQUIREMENTS, [id=#108436]
                        :           +- *(14) Project [cs_promo_sk#560, cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571, i_item_id#669]
                        :              +- *(14) SortMergeJoin [cs_item_sk#559], [i_item_sk#668], Inner
                        :                 :- *(12) Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
                        :                 :  +- AQEShuffleRead coalesced
                        :                 :     +- ShuffleQueryStage 6
                        :                 :        +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#108327]
                        :                 :           +- *(11) Project [cs_item_sk#559, cs_promo_sk#560, cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571]
                        :                 :              +- *(11) SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#612], Inner
                        :                 :                 :- *(9) Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                        :                 :                 :  +- AQEShuffleRead coalesced
                        :                 :                 :     +- ShuffleQueryStage 5
                        :                 :                 :        +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#108191]
                        :                 :                 :           +- *(8) Project [cs_sold_date_sk#544, cs_item_sk#559, cs_promo_sk#560, cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571]
                        :                 :                 :              +- *(8) SortMergeJoin [cs_bill_cdemo_sk#548], [cd_demo_sk#222], Inner
                        :                 :                 :                 :- *(6) Sort [cs_bill_cdemo_sk#548 ASC NULLS FIRST], false, 0
                        :                 :                 :                 :  +- AQEShuffleRead coalesced
                        :                 :                 :                 :     +- ShuffleQueryStage 0
                        :                 :                 :                 :        +- Exchange hashpartitioning(cs_bill_cdemo_sk#548, 200), ENSURE_REQUIREMENTS, [id=#107668]
                        :                 :                 :                 :           +- *(1) Filter (((isnotnull(cs_bill_cdemo_sk#548) AND isnotnull(cs_sold_date_sk#544)) AND isnotnull(cs_item_sk#559)) AND isnotnull(cs_promo_sk#560))
                        :                 :                 :                 :              +- *(1) ColumnarToRow
                        :                 :                 :                 :                 +- FileScan parquet [cs_sold_date_sk#544,cs_bill_cdemo_sk#548,cs_item_sk#559,cs_promo_sk#560,cs_quantity#562,cs_list_price#564,cs_sales_price#565,cs_coupon_amt#571] Batched: true, DataFilters: [isnotnull(cs_bill_cdemo_sk#548), isnotnull(cs_sold_date_sk#544), isnotnull(cs_item_sk#559), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_quantity:int,cs...
                        :                 :                 :                 +- *(7) Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
                        :                 :                 :                    +- AQEShuffleRead coalesced
                        :                 :                 :                       +- ShuffleQueryStage 1
                        :                 :                 :                          +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#107687]
                        :                 :                 :                             +- *(2) Project [cd_demo_sk#222]
                        :                 :                 :                                +- *(2) Filter ((((((isnotnull(cd_gender#223) AND isnotnull(cd_marital_status#224)) AND isnotnull(cd_education_status#225)) AND (cd_gender#223 = F)) AND (cd_marital_status#224 = M)) AND (cd_education_status#225 = 4 yr Degree)) AND isnotnull(cd_demo_sk#222))
                        :                 :                 :                                   +- *(2) ColumnarToRow
                        :                 :                 :                                      +- FileScan parquet [cd_demo_sk#222,cd_gender#223,cd_marital_status#224,cd_education_status#225] Batched: true, DataFilters: [isnotnull(cd_gender#223), isnotnull(cd_marital_status#224), isnotnull(cd_education_status#225), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                        :                 :                 +- *(10) Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                        :                 :                    +- AQEShuffleRead coalesced
                        :                 :                       +- ShuffleQueryStage 2
                        :                 :                          +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#107712]
                        :                 :                             +- *(3) Project [d_date_sk#612]
                        :                 :                                +- *(3) Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
                        :                 :                                   +- *(3) ColumnarToRow
                        :                 :                                      +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                        :                 +- *(13) Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                        :                    +- AQEShuffleRead coalesced
                        :                       +- ShuffleQueryStage 3
                        :                          +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#107735]
                        :                             +- *(4) Filter isnotnull(i_item_sk#668)
                        :                                +- *(4) ColumnarToRow
                        :                                   +- FileScan parquet [i_item_sk#668,i_item_id#669] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                        +- *(16) Sort [p_promo_sk#98 ASC NULLS FIRST], false, 0
                           +- AQEShuffleRead coalesced
                              +- ShuffleQueryStage 4
                                 +- Exchange hashpartitioning(p_promo_sk#98, 200), ENSURE_REQUIREMENTS, [id=#107758]
                                    +- *(5) Project [p_promo_sk#98]
                                       +- *(5) Filter (((p_channel_email#107 = N) OR (p_channel_event#112 = N)) AND isnotnull(p_promo_sk#98))
                                          +- *(5) ColumnarToRow
                                             +- FileScan parquet [p_promo_sk#98,p_channel_email#107,p_channel_event#112] Batched: true, DataFilters: [((p_channel_email#107 = N) OR (p_channel_event#112 = N)), isnotnull(p_promo_sk#98)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/promotion.parquet], PartitionFilters: [], PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#669 ASC NULLS FIRST], output=[i_item_id#669,agg1#8142,agg2#8143,agg3#8144,agg4#8145])
   +- HashAggregate(keys=[i_item_id#669], functions=[avg(cs_quantity#562), avg(UnscaledValue(cs_list_price#564)), avg(UnscaledValue(cs_coupon_amt#571)), avg(UnscaledValue(cs_sales_price#565))], output=[i_item_id#669, agg1#8142, agg2#8143, agg3#8144, agg4#8145])
      +- Exchange hashpartitioning(i_item_id#669, 200), ENSURE_REQUIREMENTS, [id=#107585]
         +- HashAggregate(keys=[i_item_id#669], functions=[partial_avg(cs_quantity#562), partial_avg(UnscaledValue(cs_list_price#564)), partial_avg(UnscaledValue(cs_coupon_amt#571)), partial_avg(UnscaledValue(cs_sales_price#565))], output=[i_item_id#669, sum#8163, count#8164L, sum#8165, count#8166L, sum#8167, count#8168L, sum#8169, count#8170L])
            +- Project [cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571, i_item_id#669]
               +- SortMergeJoin [cs_promo_sk#560], [p_promo_sk#98], Inner
                  :- Sort [cs_promo_sk#560 ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(cs_promo_sk#560, 200), ENSURE_REQUIREMENTS, [id=#107577]
                  :     +- Project [cs_promo_sk#560, cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571, i_item_id#669]
                  :        +- SortMergeJoin [cs_item_sk#559], [i_item_sk#668], Inner
                  :           :- Sort [cs_item_sk#559 ASC NULLS FIRST], false, 0
                  :           :  +- Exchange hashpartitioning(cs_item_sk#559, 200), ENSURE_REQUIREMENTS, [id=#107569]
                  :           :     +- Project [cs_item_sk#559, cs_promo_sk#560, cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571]
                  :           :        +- SortMergeJoin [cs_sold_date_sk#544], [d_date_sk#612], Inner
                  :           :           :- Sort [cs_sold_date_sk#544 ASC NULLS FIRST], false, 0
                  :           :           :  +- Exchange hashpartitioning(cs_sold_date_sk#544, 200), ENSURE_REQUIREMENTS, [id=#107561]
                  :           :           :     +- Project [cs_sold_date_sk#544, cs_item_sk#559, cs_promo_sk#560, cs_quantity#562, cs_list_price#564, cs_sales_price#565, cs_coupon_amt#571]
                  :           :           :        +- SortMergeJoin [cs_bill_cdemo_sk#548], [cd_demo_sk#222], Inner
                  :           :           :           :- Sort [cs_bill_cdemo_sk#548 ASC NULLS FIRST], false, 0
                  :           :           :           :  +- Exchange hashpartitioning(cs_bill_cdemo_sk#548, 200), ENSURE_REQUIREMENTS, [id=#107553]
                  :           :           :           :     +- Filter (((isnotnull(cs_bill_cdemo_sk#548) AND isnotnull(cs_sold_date_sk#544)) AND isnotnull(cs_item_sk#559)) AND isnotnull(cs_promo_sk#560))
                  :           :           :           :        +- FileScan parquet [cs_sold_date_sk#544,cs_bill_cdemo_sk#548,cs_item_sk#559,cs_promo_sk#560,cs_quantity#562,cs_list_price#564,cs_sales_price#565,cs_coupon_amt#571] Batched: true, DataFilters: [isnotnull(cs_bill_cdemo_sk#548), isnotnull(cs_sold_date_sk#544), isnotnull(cs_item_sk#559), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_quantity:int,cs...
                  :           :           :           +- Sort [cd_demo_sk#222 ASC NULLS FIRST], false, 0
                  :           :           :              +- Exchange hashpartitioning(cd_demo_sk#222, 200), ENSURE_REQUIREMENTS, [id=#107554]
                  :           :           :                 +- Project [cd_demo_sk#222]
                  :           :           :                    +- Filter ((((((isnotnull(cd_gender#223) AND isnotnull(cd_marital_status#224)) AND isnotnull(cd_education_status#225)) AND (cd_gender#223 = F)) AND (cd_marital_status#224 = M)) AND (cd_education_status#225 = 4 yr Degree)) AND isnotnull(cd_demo_sk#222))
                  :           :           :                       +- FileScan parquet [cd_demo_sk#222,cd_gender#223,cd_marital_status#224,cd_education_status#225] Batched: true, DataFilters: [isnotnull(cd_gender#223), isnotnull(cd_marital_status#224), isnotnull(cd_education_status#225), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_demographics.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                  :           :           +- Sort [d_date_sk#612 ASC NULLS FIRST], false, 0
                  :           :              +- Exchange hashpartitioning(d_date_sk#612, 200), ENSURE_REQUIREMENTS, [id=#107562]
                  :           :                 +- Project [d_date_sk#612]
                  :           :                    +- Filter ((isnotnull(d_year#618) AND (d_year#618 = 2000)) AND isnotnull(d_date_sk#612))
                  :           :                       +- FileScan parquet [d_date_sk#612,d_year#618] Batched: true, DataFilters: [isnotnull(d_year#618), (d_year#618 = 2000), isnotnull(d_date_sk#612)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                  :           +- Sort [i_item_sk#668 ASC NULLS FIRST], false, 0
                  :              +- Exchange hashpartitioning(i_item_sk#668, 200), ENSURE_REQUIREMENTS, [id=#107570]
                  :                 +- Filter isnotnull(i_item_sk#668)
                  :                    +- FileScan parquet [i_item_sk#668,i_item_id#669] Batched: true, DataFilters: [isnotnull(i_item_sk#668)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                  +- Sort [p_promo_sk#98 ASC NULLS FIRST], false, 0
                     +- Exchange hashpartitioning(p_promo_sk#98, 200), ENSURE_REQUIREMENTS, [id=#107578]
                        +- Project [p_promo_sk#98]
                           +- Filter (((p_channel_email#107 = N) OR (p_channel_event#112 = N)) AND isnotnull(p_promo_sk#98))
                              +- FileScan parquet [p_promo_sk#98,p_channel_email#107,p_channel_event#112] Batched: true, DataFilters: [((p_channel_email#107 = N) OR (p_channel_event#112 = N)), isnotnull(p_promo_sk#98)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/promotion.parquet], PartitionFilters: [], PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>
