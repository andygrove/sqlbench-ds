Limit: skip=0, fetch=100
  Sort: customer_address.ca_country ASC NULLS LAST, customer_address.ca_state ASC NULLS LAST, customer_address.ca_county ASC NULLS LAST, item.i_item_id ASC NULLS LAST, fetch=100
    Projection: item.i_item_id, customer_address.ca_country, customer_address.ca_state, customer_address.ca_county, AVG(catalog_sales.cs_quantity) AS agg1, AVG(catalog_sales.cs_list_price) AS agg2, AVG(catalog_sales.cs_coupon_amt) AS agg3, AVG(catalog_sales.cs_sales_price) AS agg4, AVG(catalog_sales.cs_net_profit) AS agg5, AVG(customer.c_birth_year) AS agg6, AVG(cd1.cd_dep_count) AS agg7
      Aggregate: groupBy=[[ROLLUP (item.i_item_id, customer_address.ca_country, customer_address.ca_state, customer_address.ca_county)]], aggr=[[AVG(CAST(catalog_sales.cs_quantity AS Decimal128(12, 2))), AVG(CAST(catalog_sales.cs_list_price AS Decimal128(12, 2))), AVG(CAST(catalog_sales.cs_coupon_amt AS Decimal128(12, 2))), AVG(CAST(catalog_sales.cs_sales_price AS Decimal128(12, 2))), AVG(CAST(catalog_sales.cs_net_profit AS Decimal128(12, 2))), AVG(CAST(customer.c_birth_year AS Decimal128(12, 2))), AVG(CAST(cd1.cd_dep_count AS Decimal128(12, 2)))]]
        Projection: catalog_sales.cs_quantity, catalog_sales.cs_list_price, catalog_sales.cs_sales_price, catalog_sales.cs_coupon_amt, catalog_sales.cs_net_profit, cd1.cd_dep_count, customer.c_birth_year, customer_address.ca_county, customer_address.ca_state, customer_address.ca_country, item.i_item_id
          Inner Join: catalog_sales.cs_item_sk = item.i_item_sk
            Inner Join: catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
              Inner Join: customer.c_current_addr_sk = customer_address.ca_address_sk
                Inner Join: customer.c_current_cdemo_sk = cd2.cd_demo_sk
                  Inner Join: catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
                    Inner Join: catalog_sales.cs_bill_cdemo_sk = cd1.cd_demo_sk
                      TableScan: catalog_sales projection=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit]
                      SubqueryAlias: cd1
                        Filter: customer_demographics.cd_gender = Utf8("F") AND customer_demographics.cd_education_status = Utf8("College")
                          TableScan: customer_demographics projection=[cd_demo_sk, cd_gender, cd_education_status, cd_dep_count], partial_filters=[customer_demographics.cd_gender = Utf8("F"), customer_demographics.cd_education_status = Utf8("College")]
                    Filter: customer.c_birth_month IN ([Int32(9), Int32(7), Int32(4), Int32(10), Int32(3), Int32(12)])
                      TableScan: customer projection=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_month, c_birth_year], partial_filters=[customer.c_birth_month IN ([Int32(9), Int32(7), Int32(4), Int32(10), Int32(3), Int32(12)])]
                  SubqueryAlias: cd2
                    TableScan: customer_demographics projection=[cd_demo_sk]
                Filter: customer_address.ca_state IN ([Utf8("LA"), Utf8("KY"), Utf8("MN"), Utf8("SC"), Utf8("NC"), Utf8("SD"), Utf8("IA")])
                  TableScan: customer_address projection=[ca_address_sk, ca_county, ca_state, ca_country], partial_filters=[customer_address.ca_state IN ([Utf8("LA"), Utf8("KY"), Utf8("MN"), Utf8("SC"), Utf8("NC"), Utf8("SD"), Utf8("IA")])]
              Filter: date_dim.d_year = Int32(2001)
                TableScan: date_dim projection=[d_date_sk, d_year], partial_filters=[date_dim.d_year = Int32(2001)]
            TableScan: item projection=[i_item_sk, i_item_id]