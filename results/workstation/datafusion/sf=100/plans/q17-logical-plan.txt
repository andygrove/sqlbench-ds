Limit: skip=0, fetch=100
  Sort: item.i_item_id ASC NULLS LAST, item.i_item_desc ASC NULLS LAST, store.s_state ASC NULLS LAST, fetch=100
    Projection: item.i_item_id, item.i_item_desc, store.s_state, COUNT(store_sales.ss_quantity) AS store_sales_quantitycount, AVG(store_sales.ss_quantity) AS store_sales_quantityave, STDDEV(store_sales.ss_quantity) AS store_sales_quantitystdev, STDDEV(store_sales.ss_quantity) / AVG(store_sales.ss_quantity) AS store_sales_quantitycov, COUNT(store_returns.sr_return_quantity) AS store_returns_quantitycount, AVG(store_returns.sr_return_quantity) AS store_returns_quantityave, STDDEV(store_returns.sr_return_quantity) AS store_returns_quantitystdev, STDDEV(store_returns.sr_return_quantity) / AVG(store_returns.sr_return_quantity) AS store_returns_quantitycov, COUNT(catalog_sales.cs_quantity) AS catalog_sales_quantitycount, AVG(catalog_sales.cs_quantity) AS catalog_sales_quantityave, STDDEV(catalog_sales.cs_quantity) AS catalog_sales_quantitystdev, STDDEV(catalog_sales.cs_quantity) / AVG(catalog_sales.cs_quantity) AS catalog_sales_quantitycov
      Aggregate: groupBy=[[item.i_item_id, item.i_item_desc, store.s_state]], aggr=[[COUNT(store_sales.ss_quantity), AVG(store_sales.ss_quantity), STDDEV(store_sales.ss_quantity), COUNT(store_returns.sr_return_quantity), AVG(store_returns.sr_return_quantity), STDDEV(store_returns.sr_return_quantity), COUNT(catalog_sales.cs_quantity), AVG(catalog_sales.cs_quantity), STDDEV(catalog_sales.cs_quantity)]]
        Inner Join: store_sales.ss_item_sk = item.i_item_sk
          Inner Join: store_sales.ss_store_sk = store.s_store_sk
            Inner Join: catalog_sales.cs_sold_date_sk = d3.d_date_sk
              Inner Join: store_returns.sr_returned_date_sk = d2.d_date_sk
                Inner Join: store_sales.ss_sold_date_sk = d1.d_date_sk
                  Inner Join: store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk, store_returns.sr_item_sk = catalog_sales.cs_item_sk
                    Inner Join: store_sales.ss_customer_sk = store_returns.sr_customer_sk, store_sales.ss_item_sk = store_returns.sr_item_sk, store_sales.ss_ticket_number = store_returns.sr_ticket_number
                      TableScan: store_sales projection=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity]
                      TableScan: store_returns projection=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity]
                    TableScan: catalog_sales projection=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity]
                  SubqueryAlias: d1
                    Filter: date_dim.d_quarter_name = Utf8("1999Q1")
                      TableScan: date_dim projection=[d_date_sk, d_quarter_name], partial_filters=[date_dim.d_quarter_name = Utf8("1999Q1")]
                SubqueryAlias: d2
                  Filter: date_dim.d_quarter_name = Utf8("1999Q3") OR date_dim.d_quarter_name = Utf8("1999Q2") OR date_dim.d_quarter_name = Utf8("1999Q1")
                    TableScan: date_dim projection=[d_date_sk, d_quarter_name], partial_filters=[date_dim.d_quarter_name = Utf8("1999Q3") OR date_dim.d_quarter_name = Utf8("1999Q2") OR date_dim.d_quarter_name = Utf8("1999Q1")]
              SubqueryAlias: d3
                Filter: date_dim.d_quarter_name = Utf8("1999Q3") OR date_dim.d_quarter_name = Utf8("1999Q2") OR date_dim.d_quarter_name = Utf8("1999Q1")
                  TableScan: date_dim projection=[d_date_sk, d_quarter_name], partial_filters=[date_dim.d_quarter_name = Utf8("1999Q3") OR date_dim.d_quarter_name = Utf8("1999Q2") OR date_dim.d_quarter_name = Utf8("1999Q1")]
            TableScan: store projection=[s_store_sk, s_state]
          TableScan: item projection=[i_item_sk, i_item_id, i_item_desc]