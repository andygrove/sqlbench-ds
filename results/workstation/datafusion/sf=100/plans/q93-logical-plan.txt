Limit: skip=0, fetch=100
  Sort: sumsales ASC NULLS LAST, t.ss_customer_sk ASC NULLS LAST, fetch=100
    Projection: t.ss_customer_sk, SUM(t.act_sales) AS sumsales
      Aggregate: groupBy=[[t.ss_customer_sk]], aggr=[[SUM(t.act_sales)]]
        SubqueryAlias: t
          Projection: store_sales.ss_customer_sk, CASE WHEN store_returns.sr_return_quantity IS NOT NULL THEN CAST(store_sales.ss_quantity - store_returns.sr_return_quantity AS Decimal128(18, 2)) * CAST(store_sales.ss_sales_price AS Decimal128(18, 2))store_sales.ss_sales_price AS store_sales.ss_sales_price ELSE CAST(store_sales.ss_quantity AS Decimal128(18, 2)) * CAST(store_sales.ss_sales_price AS Decimal128(18, 2))store_sales.ss_sales_price AS store_sales.ss_sales_price END AS act_sales
            Projection: CAST(store_sales.ss_sales_price AS Decimal128(18, 2)) AS CAST(store_sales.ss_sales_price AS Decimal128(18, 2))store_sales.ss_sales_price, store_sales.ss_customer_sk, store_sales.ss_quantity, store_returns.sr_return_quantity
              Inner Join: store_returns.sr_reason_sk = reason.r_reason_sk
                Left Join: store_sales.ss_item_sk = store_returns.sr_item_sk, store_sales.ss_ticket_number = store_returns.sr_ticket_number
                  TableScan: store_sales projection=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price]
                  TableScan: store_returns projection=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity]
                Filter: reason.r_reason_desc = Utf8("reason 49")
                  TableScan: reason projection=[r_reason_sk, r_reason_desc], partial_filters=[reason.r_reason_desc = Utf8("reason 49")]