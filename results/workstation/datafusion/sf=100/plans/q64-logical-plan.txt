Projection: cs1.product_name, cs1.store_name, cs1.store_zip, cs1.b_street_number, cs1.b_street_name, cs1.b_city, cs1.b_zip, cs1.c_street_number, cs1.c_street_name, cs1.c_city, cs1.c_zip, cs1.syear, cs1.cnt, s11, s21, s31, s12, s22, s32, cs2.syear, cs2.cnt
  Sort: cs1.product_name ASC NULLS LAST, cs1.store_name ASC NULLS LAST, cs2.cnt ASC NULLS LAST, cs1.s1 ASC NULLS LAST, cs2.s1 ASC NULLS LAST
    Projection: cs1.product_name, cs1.store_name, cs1.store_zip, cs1.b_street_number, cs1.b_street_name, cs1.b_city, cs1.b_zip, cs1.c_street_number, cs1.c_street_name, cs1.c_city, cs1.c_zip, cs1.syear, cs1.cnt, cs1.s1 AS s11, cs1.s2 AS s21, cs1.s3 AS s31, cs2.s1 AS s12, cs2.s2 AS s22, cs2.s3 AS s32, cs2.syear, cs2.cnt, cs1.s1, cs2.s1
      Filter: cs2.cnt <= cs1.cnt
        Inner Join: cs1.item_sk = cs2.item_sk, cs1.store_name = cs2.store_name, cs1.store_zip = cs2.store_zip
          SubqueryAlias: cs1
            SubqueryAlias: cross_sales
              Projection: item.i_product_name AS product_name, item.i_item_sk AS item_sk, store.s_store_name AS store_name, store.s_zip AS store_zip, ad1.ca_street_number AS b_street_number, ad1.ca_street_name AS b_street_name, ad1.ca_city AS b_city, ad1.ca_zip AS b_zip, ad2.ca_street_number AS c_street_number, ad2.ca_street_name AS c_street_name, ad2.ca_city AS c_city, ad2.ca_zip AS c_zip, d1.d_year AS syear, COUNT(UInt8(1)) AS cnt, SUM(store_sales.ss_wholesale_cost) AS s1, SUM(store_sales.ss_list_price) AS s2, SUM(store_sales.ss_coupon_amt) AS s3
                Aggregate: groupBy=[[item.i_product_name, item.i_item_sk, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year]], aggr=[[COUNT(UInt8(1)), SUM(store_sales.ss_wholesale_cost), SUM(store_sales.ss_list_price), SUM(store_sales.ss_coupon_amt)]]
                  Projection: store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_coupon_amt, d1.d_year, d2.d_year, d3.d_year, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, item.i_item_sk, item.i_product_name
                    Inner Join: store_sales.ss_item_sk = item.i_item_sk
                      Inner Join: hd2.hd_income_band_sk = ib2.ib_income_band_sk
                        Inner Join: hd1.hd_income_band_sk = ib1.ib_income_band_sk
                          Inner Join: customer.c_current_addr_sk = ad2.ca_address_sk
                            Inner Join: store_sales.ss_addr_sk = ad1.ca_address_sk
                              Inner Join: customer.c_current_hdemo_sk = hd2.hd_demo_sk
                                Inner Join: store_sales.ss_hdemo_sk = hd1.hd_demo_sk
                                  Inner Join: store_sales.ss_promo_sk = promotion.p_promo_sk
                                    Filter: cd1.cd_marital_status != cd2.cd_marital_status
                                      Inner Join: customer.c_current_cdemo_sk = cd2.cd_demo_sk
                                        Inner Join: store_sales.ss_cdemo_sk = cd1.cd_demo_sk
                                          Inner Join: customer.c_first_shipto_date_sk = d3.d_date_sk
                                            Inner Join: customer.c_first_sales_date_sk = d2.d_date_sk
                                              Inner Join: store_sales.ss_customer_sk = customer.c_customer_sk
                                                Inner Join: store_sales.ss_store_sk = store.s_store_sk
                                                  Inner Join: store_sales.ss_sold_date_sk = d1.d_date_sk
                                                    Inner Join: store_sales.ss_item_sk = cs_ui.cs_item_sk
                                                      Inner Join: store_sales.ss_item_sk = store_returns.sr_item_sk, store_sales.ss_ticket_number = store_returns.sr_ticket_number
                                                        TableScan: store_sales projection=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt]
                                                        TableScan: store_returns projection=[sr_item_sk, sr_ticket_number]
                                                      SubqueryAlias: cs_ui
                                                        Projection: catalog_sales.cs_item_sk
                                                          Filter: CAST(SUM(catalog_sales.cs_ext_list_price) AS Decimal128(38, 2)) > Decimal128(Some(200),38,2) * CAST(SUM(catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge + catalog_returns.cr_store_credit) AS Decimal128(38, 2))
                                                            Aggregate: groupBy=[[catalog_sales.cs_item_sk]], aggr=[[SUM(catalog_sales.cs_ext_list_price), SUM(catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge + catalog_returns.cr_store_credit)]]
                                                              Inner Join: catalog_sales.cs_item_sk = catalog_returns.cr_item_sk, catalog_sales.cs_order_number = catalog_returns.cr_order_number
                                                                TableScan: catalog_sales projection=[cs_item_sk, cs_order_number, cs_ext_list_price]
                                                                TableScan: catalog_returns projection=[cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit]
                                                    SubqueryAlias: d1
                                                      Filter: date_dim.d_year = Int32(2001)
                                                        TableScan: date_dim projection=[d_date_sk, d_year], partial_filters=[date_dim.d_year = Int32(2001)]
                                                  TableScan: store projection=[s_store_sk, s_store_name, s_zip]
                                                TableScan: customer projection=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk]
                                              SubqueryAlias: d2
                                                TableScan: date_dim projection=[d_date_sk, d_year]
                                            SubqueryAlias: d3
                                              TableScan: date_dim projection=[d_date_sk, d_year]
                                          SubqueryAlias: cd1
                                            TableScan: customer_demographics projection=[cd_demo_sk, cd_marital_status]
                                        SubqueryAlias: cd2
                                          TableScan: customer_demographics projection=[cd_demo_sk, cd_marital_status]
                                    TableScan: promotion projection=[p_promo_sk]
                                  SubqueryAlias: hd1
                                    TableScan: household_demographics projection=[hd_demo_sk, hd_income_band_sk]
                                SubqueryAlias: hd2
                                  TableScan: household_demographics projection=[hd_demo_sk, hd_income_band_sk]
                              SubqueryAlias: ad1
                                TableScan: customer_address projection=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]
                            SubqueryAlias: ad2
                              TableScan: customer_address projection=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]
                          SubqueryAlias: ib1
                            TableScan: income_band projection=[ib_income_band_sk]
                        SubqueryAlias: ib2
                          TableScan: income_band projection=[ib_income_band_sk]
                      Filter: item.i_color IN ([Utf8("chocolate"), Utf8("lime"), Utf8("sienna"), Utf8("drab"), Utf8("goldenrod"), Utf8("navajo")]) AND item.i_current_price >= Decimal128(Some(7500),7,2) AND item.i_current_price <= Decimal128(Some(8500),7,2) AND item.i_current_price >= Decimal128(Some(7600),7,2) AND item.i_current_price <= Decimal128(Some(9000),7,2)
                        TableScan: item projection=[i_item_sk, i_current_price, i_color, i_product_name], partial_filters=[item.i_color IN ([Utf8("chocolate"), Utf8("lime"), Utf8("sienna"), Utf8("drab"), Utf8("goldenrod"), Utf8("navajo")]), item.i_current_price >= Decimal128(Some(7500),7,2), item.i_current_price <= Decimal128(Some(8500),7,2), item.i_current_price >= Decimal128(Some(7600),7,2), item.i_current_price <= Decimal128(Some(9000),7,2)]
          SubqueryAlias: cs2
            SubqueryAlias: cross_sales
              Projection: item.i_item_sk AS item_sk, store.s_store_name AS store_name, store.s_zip AS store_zip, d1.d_year AS syear, COUNT(UInt8(1)) AS cnt, SUM(store_sales.ss_wholesale_cost) AS s1, SUM(store_sales.ss_list_price) AS s2, SUM(store_sales.ss_coupon_amt) AS s3
                Aggregate: groupBy=[[item.i_product_name, item.i_item_sk, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year]], aggr=[[COUNT(UInt8(1)), SUM(store_sales.ss_wholesale_cost), SUM(store_sales.ss_list_price), SUM(store_sales.ss_coupon_amt)]]
                  Projection: store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_coupon_amt, d1.d_year, d2.d_year, d3.d_year, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, item.i_item_sk, item.i_product_name
                    Inner Join: store_sales.ss_item_sk = item.i_item_sk
                      Inner Join: hd2.hd_income_band_sk = ib2.ib_income_band_sk
                        Inner Join: hd1.hd_income_band_sk = ib1.ib_income_band_sk
                          Inner Join: customer.c_current_addr_sk = ad2.ca_address_sk
                            Inner Join: store_sales.ss_addr_sk = ad1.ca_address_sk
                              Inner Join: customer.c_current_hdemo_sk = hd2.hd_demo_sk
                                Inner Join: store_sales.ss_hdemo_sk = hd1.hd_demo_sk
                                  Inner Join: store_sales.ss_promo_sk = promotion.p_promo_sk
                                    Filter: cd1.cd_marital_status != cd2.cd_marital_status
                                      Inner Join: customer.c_current_cdemo_sk = cd2.cd_demo_sk
                                        Inner Join: store_sales.ss_cdemo_sk = cd1.cd_demo_sk
                                          Inner Join: customer.c_first_shipto_date_sk = d3.d_date_sk
                                            Inner Join: customer.c_first_sales_date_sk = d2.d_date_sk
                                              Inner Join: store_sales.ss_customer_sk = customer.c_customer_sk
                                                Inner Join: store_sales.ss_store_sk = store.s_store_sk
                                                  Inner Join: store_sales.ss_sold_date_sk = d1.d_date_sk
                                                    Inner Join: store_sales.ss_item_sk = cs_ui.cs_item_sk
                                                      Inner Join: store_sales.ss_item_sk = store_returns.sr_item_sk, store_sales.ss_ticket_number = store_returns.sr_ticket_number
                                                        TableScan: store_sales projection=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt]
                                                        TableScan: store_returns projection=[sr_item_sk, sr_ticket_number]
                                                      SubqueryAlias: cs_ui
                                                        Projection: catalog_sales.cs_item_sk
                                                          Filter: CAST(SUM(catalog_sales.cs_ext_list_price) AS Decimal128(38, 2)) > Decimal128(Some(200),38,2) * CAST(SUM(catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge + catalog_returns.cr_store_credit) AS Decimal128(38, 2))
                                                            Aggregate: groupBy=[[catalog_sales.cs_item_sk]], aggr=[[SUM(catalog_sales.cs_ext_list_price), SUM(catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge + catalog_returns.cr_store_credit)]]
                                                              Inner Join: catalog_sales.cs_item_sk = catalog_returns.cr_item_sk, catalog_sales.cs_order_number = catalog_returns.cr_order_number
                                                                TableScan: catalog_sales projection=[cs_item_sk, cs_order_number, cs_ext_list_price]
                                                                TableScan: catalog_returns projection=[cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit]
                                                    SubqueryAlias: d1
                                                      Filter: date_dim.d_year = Int32(2002)
                                                        TableScan: date_dim projection=[d_date_sk, d_year], partial_filters=[date_dim.d_year = Int32(2002)]
                                                  TableScan: store projection=[s_store_sk, s_store_name, s_zip]
                                                TableScan: customer projection=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk]
                                              SubqueryAlias: d2
                                                TableScan: date_dim projection=[d_date_sk, d_year]
                                            SubqueryAlias: d3
                                              TableScan: date_dim projection=[d_date_sk, d_year]
                                          SubqueryAlias: cd1
                                            TableScan: customer_demographics projection=[cd_demo_sk, cd_marital_status]
                                        SubqueryAlias: cd2
                                          TableScan: customer_demographics projection=[cd_demo_sk, cd_marital_status]
                                    TableScan: promotion projection=[p_promo_sk]
                                  SubqueryAlias: hd1
                                    TableScan: household_demographics projection=[hd_demo_sk, hd_income_band_sk]
                                SubqueryAlias: hd2
                                  TableScan: household_demographics projection=[hd_demo_sk, hd_income_band_sk]
                              SubqueryAlias: ad1
                                TableScan: customer_address projection=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]
                            SubqueryAlias: ad2
                              TableScan: customer_address projection=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]
                          SubqueryAlias: ib1
                            TableScan: income_band projection=[ib_income_band_sk]
                        SubqueryAlias: ib2
                          TableScan: income_band projection=[ib_income_band_sk]
                      Filter: item.i_color IN ([Utf8("chocolate"), Utf8("lime"), Utf8("sienna"), Utf8("drab"), Utf8("goldenrod"), Utf8("navajo")]) AND item.i_current_price >= Decimal128(Some(7500),7,2) AND item.i_current_price <= Decimal128(Some(8500),7,2) AND item.i_current_price >= Decimal128(Some(7600),7,2) AND item.i_current_price <= Decimal128(Some(9000),7,2)
                        TableScan: item projection=[i_item_sk, i_current_price, i_color, i_product_name], partial_filters=[item.i_color IN ([Utf8("chocolate"), Utf8("lime"), Utf8("sienna"), Utf8("drab"), Utf8("goldenrod"), Utf8("navajo")]), item.i_current_price >= Decimal128(Some(7500),7,2), item.i_current_price <= Decimal128(Some(8500),7,2), item.i_current_price >= Decimal128(Some(7600),7,2), item.i_current_price <= Decimal128(Some(9000),7,2)]