Limit: skip=0, fetch=100
  Sort: y.item_sk ASC NULLS LAST, y.d_date ASC NULLS LAST, fetch=100
    Projection: y.item_sk, y.d_date, y.web_sales, y.store_sales, y.web_cumulative, y.store_cumulative
      SubqueryAlias: y
        Projection: x.item_sk, x.d_date, x.web_sales, x.store_sales, MAX(x.web_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW AS web_cumulative, MAX(x.store_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW AS store_cumulative
          Filter: MAX(x.web_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW > MAX(x.store_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            WindowAggr: windowExpr=[[MAX(x.web_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN NULL PRECEDING AND CURRENT ROW AS MAX(x.web_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW, MAX(x.store_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN NULL PRECEDING AND CURRENT ROW AS MAX(x.store_sales) PARTITION BY [x.item_sk] ORDER BY [x.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW]]
              SubqueryAlias: x
                Projection: CASE WHEN web.item_sk IS NOT NULL THEN web.item_sk ELSE store.item_sk END AS item_sk, CASE WHEN web.d_date IS NOT NULL THEN web.d_date ELSE store.d_date END AS d_date, web.cume_sales AS web_sales, store.cume_sales AS store_sales
                  Full Join: web.item_sk = store.item_sk, web.d_date = store.d_date
                    SubqueryAlias: web
                      SubqueryAlias: web_v1
                        Projection: web_sales.ws_item_sk AS item_sk, date_dim.d_date, SUM(SUM(web_sales.ws_sales_price)) PARTITION BY [web_sales.ws_item_sk] ORDER BY [date_dim.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW AS cume_sales
                          WindowAggr: windowExpr=[[SUM(SUM(web_sales.ws_sales_price)) PARTITION BY [web_sales.ws_item_sk] ORDER BY [date_dim.d_date ASC NULLS LAST] ROWS BETWEEN NULL PRECEDING AND CURRENT ROW AS SUM(SUM(web_sales.ws_sales_price)) PARTITION BY [web_sales.ws_item_sk] ORDER BY [date_dim.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW]]
                            Aggregate: groupBy=[[web_sales.ws_item_sk, date_dim.d_date]], aggr=[[SUM(web_sales.ws_sales_price)]]
                              Inner Join: web_sales.ws_sold_date_sk = date_dim.d_date_sk
                                Filter: web_sales.ws_item_sk IS NOT NULL
                                  TableScan: web_sales projection=[ws_sold_date_sk, ws_item_sk, ws_sales_price], partial_filters=[web_sales.ws_item_sk IS NOT NULL]
                                Filter: date_dim.d_month_seq >= Int32(1212) AND date_dim.d_month_seq <= Int32(1223)
                                  TableScan: date_dim projection=[d_date_sk, d_date, d_month_seq], partial_filters=[date_dim.d_month_seq >= Int32(1212), date_dim.d_month_seq <= Int32(1223)]
                    SubqueryAlias: store
                      SubqueryAlias: store_v1
                        Projection: store_sales.ss_item_sk AS item_sk, date_dim.d_date, SUM(SUM(store_sales.ss_sales_price)) PARTITION BY [store_sales.ss_item_sk] ORDER BY [date_dim.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW AS cume_sales
                          WindowAggr: windowExpr=[[SUM(SUM(store_sales.ss_sales_price)) PARTITION BY [store_sales.ss_item_sk] ORDER BY [date_dim.d_date ASC NULLS LAST] ROWS BETWEEN NULL PRECEDING AND CURRENT ROW AS SUM(SUM(store_sales.ss_sales_price)) PARTITION BY [store_sales.ss_item_sk] ORDER BY [date_dim.d_date ASC NULLS LAST] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW]]
                            Aggregate: groupBy=[[store_sales.ss_item_sk, date_dim.d_date]], aggr=[[SUM(store_sales.ss_sales_price)]]
                              Inner Join: store_sales.ss_sold_date_sk = date_dim.d_date_sk
                                Filter: store_sales.ss_item_sk IS NOT NULL
                                  TableScan: store_sales projection=[ss_sold_date_sk, ss_item_sk, ss_sales_price], partial_filters=[store_sales.ss_item_sk IS NOT NULL]
                                Filter: date_dim.d_month_seq >= Int32(1212) AND date_dim.d_month_seq <= Int32(1223)
                                  TableScan: date_dim projection=[d_date_sk, d_date, d_month_seq], partial_filters=[date_dim.d_month_seq >= Int32(1212), date_dim.d_month_seq <= Int32(1223)]